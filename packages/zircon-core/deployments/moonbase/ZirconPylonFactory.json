{
  "address": "0x19Da0E8b44374770Ce289F0117BD4e951250d025",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_energyFactory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolToken0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolToken1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pylon",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "PylonCreated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "addPylon",
      "outputs": [
        {
          "internalType": "address",
          "name": "pylonAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPylons",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPylonsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "dynamicFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "energyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPylon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maximumPercentageSync",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pylonCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0280b5b3b7d40891723947a99389e7750a7c15e52d847ba6001ec41aae38ab6",
  "receipt": {
    "to": null,
    "from": "0x10AD3b25F0CD7Ed4EA01A95d2f1bf9E4bE987161",
    "contractAddress": "0x19Da0E8b44374770Ce289F0117BD4e951250d025",
    "transactionIndex": 2,
    "gasUsed": "5264792",
    "logsBloom": "0x
    "blockHash": "0x725055043ef2766177ac545fdd298d1603f7308afb852a05fb57dab06e7ed95d",
    "transactionHash": "0xb0280b5b3b7d40891723947a99389e7750a7c15e52d847ba6001ec41aae38ab6",
    "logs": [],
    "blockNumber": 2299553,
    "cumulativeGasUsed": "5537716",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF78a75304f405B7d84B00Ce990E62113c77582d1",
    "0xE2B6b71DBB0E7eAF2a28C489aB7407048aa3Cb7b"
  ],
  "numDeployments": 1,
  "solcInputHash": "f5757409255e89383e38186cfee50eb5",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_energyFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pylon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PylonCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"addPylon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pylonAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPylons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPylonsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dynamicFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"energyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPylon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumPercentageSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pylonCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ZirconPylonFactory.sol\":\"ZirconPylonFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"contracts/ZirconERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\nimport './interfaces/IUniswapV2ERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract ZirconERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n    // TODO: change name of token\\n    string public constant name = 'Zircon';\\n    string public constant symbol = 'ZPT';\\n    uint8 public constant decimals = 18;\\n    uint public totalSupply;\\n    mapping(address => uint)  public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x38809b91556cbf7b9a97d26dc11a2f16f013d0d96819b75233d4489a47ced080\"},\"contracts/ZirconPoolToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\nimport \\\"./ZirconERC20.sol\\\";\\nimport \\\"./interfaces/IZirconPoolToken.sol\\\";\\n\\ncontract ZirconPoolToken is ZirconERC20 {\\n    address public token;\\n    address public pair;\\n    bool public isAnchor;\\n    address public factory;\\n    address public pylon;\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function mint(address account, uint256 amount) lock external {\\n        require(msg.sender == pylon, 'ZirconPoolToken: FORBIDDEN');\\n        // sufficient check\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) lock external {\\n        require(msg.sender == pylon, 'ZirconPoolToken: FORBIDDEN');\\n        // sufficient check\\n        _burn(account, amount);\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _pair, address _pylon, bool _isAnchor) external {\\n        require(msg.sender == factory, 'ZirconPoolToken: FORBIDDEN');\\n        // sufficient check\\n        token = _token0;\\n        pair = _pair;\\n        isAnchor = _isAnchor;\\n        pylon = _pylon;\\n    }\\n}\\n\",\"keccak256\":\"0x5ece03a7910d8065eb53e371b5231d3a691f313a2e73df5bf85d44a566a6d2cd\"},\"contracts/ZirconPylon.sol\":{\"content\":\"pragma solidity ^0.5.16;\\nimport './libraries/Math.sol';\\nimport './interfaces/IZirconPair.sol';\\nimport './interfaces/IZirconPoolToken.sol';\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./libraries/ZirconLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IZirconPylonFactory.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport \\\"./interfaces/IZirconPylon.sol\\\";\\nimport \\\"./energy/interfaces/IZirconEnergy.sol\\\";\\nimport \\\"./energy/interfaces/IZirconEnergyRevenue.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract ZirconPylon is IZirconPylon, ReentrancyGuard {\\n    // **** Libraries ****\\n    using SafeMath for uint112;\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    // **** STRUCTS *****\\n    struct PylonToken {\\n        address float;\\n        address anchor;\\n    }\\n    PylonToken public pylonToken;\\n\\n    // ***** GLOBAL VARIABLES ******\\n\\n    // ***** The address of the other components ******\\n    address public pairAddress;\\n    address public factoryAddress;\\n    address public pairFactoryAddress;\\n    address public floatPoolTokenAddress;\\n    address public anchorPoolTokenAddress;\\n    address public energyAddress;\\n\\n    // Indicates if in the pair the token0 is float or anchor\\n    bool public isFloatReserve0;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    bytes4 private constant SELECTOR_FROM = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n\\n    // ***** Variables for calculations *****\\n    uint public virtualAnchorBalance;\\n    uint public virtualFloatBalance;\\n    uint public maximumPercentageSync;\\n    uint public dynamicFeePercentage;\\n    uint public gammaMulDecimals; // Name represents the fact that this is always the numerator of a fraction with 10**18 as denominator.\\n    uint public lastK;\\n    uint public lastPoolTokens;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves (always anchor)\\n    uint112 private reserve1;           // us es single storage slot, accessible via getReserves (always float)\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    // global variable used for testing\\n    uint private testMultiplier = 1e16;\\n\\n    // **** MODIFIERS *****\\n    uint public initialized = 0;\\n    modifier isInitialized() {\\n        require(initialized == 1, 'ZP: NOT INITIALIZED');\\n        _;\\n    }\\n\\n    // Calls dummy function with lock modifier\\n    modifier pairUnlocked() {\\n        IZirconPair(pairAddress).tryLock();\\n        _;\\n    }\\n\\n    modifier blockRecursion() {\\n        // TODO: Should do some kind of block height check to ensure this user hasn't\\n        // already called any of these functions\\n        _;\\n    }\\n\\n    // **** EVENTS ****\\n    event PylonUpdate(uint _reserve0, uint _reserve1);\\n    event PylonSync(uint _vab, uint _vfb, uint _gamma);\\n\\n    // Transform in just one event\\n    event MintSync(address sender, uint aIn0, bool isAnchor);\\n    event MintAsync(address sender, uint aIn0, uint aIn1);\\n    event MintAsync100(address sender, uint aIn0, bool isAnchor);\\n    event Burn(address sender, uint aIn0, bool isAnchor);\\n    event BurnAsync(address sender, uint aIn0, uint aIn1);\\n    event Excess(uint aIn0, bool isAnchor);\\n\\n    // ****** CONSTRUCTOR ******\\n    constructor() public {\\n        factoryAddress = msg.sender;\\n    }\\n\\n    // ****** HELPER FUNCTIONS *****\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Zircon Pylon: TRANSFER_FAILED');\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR_FROM, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Zircon Pylon: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function getSyncReserves()  public view returns  (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    /// @notice Private function to get pair reserves normalized on float and anchor\\n    // @return _reserve0 -> float\\n    // @return _reserve1 -> Anchor\\n    function getPairReservesNormalized()  private view returns  (uint112 _reserve0, uint112 _reserve1) {\\n        (uint112 _reservePair0, uint112 _reservePair1,) = IZirconPair(pairAddress).getReserves();\\n        _reserve0 = isFloatReserve0 ? _reservePair0 : _reservePair1;\\n        _reserve1 = isFloatReserve0 ? _reservePair1 : _reservePair0;\\n    }\\n\\n    /// @notice Function that returns pair reserves translated to pylon\\n    /// @return Float -> _reserve0\\n    /// @dev Anchor -> _reserve1\\n    function getPairReservesTranslated(uint error0, uint error1)  private view returns  (uint _reserve0, uint _reserve1) {\\n        (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n        _reserve0 = translateToPylon(uint(_reservePair0), error0);\\n        _reserve1 = translateToPylon(uint(_reservePair1), error1);\\n    }\\n\\n    /// @notice Function to obtain Pair Reserves on Pylon Basis\\n    /// In case PTT Or PTB are null it will @return errorReturn\\n    function translateToPylon(uint toConvert, uint errorReturn) view private returns (uint amount){\\n        uint ptb = IZirconPair(pairAddress).balanceOf(address(this));\\n        uint ptt = IZirconPair(pairAddress).totalSupply();\\n        amount =  (ptt == 0 || ptb == 0) ? errorReturn : toConvert.mul(ptb)/ptt;\\n    }\\n\\n\\n    /// @notice Helper function to calculate slippage-adjusted share of pool\\n    function _disincorporateAmount(uint _amountIn, bool isAnchor) private view returns (uint amount0, uint amount1) {\\n        (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n        amount0 = !isAnchor ? _amountIn/2 : ZirconLibrary.getAmountOut(_amountIn/2, _reservePair1, _reservePair0);\\n        amount1 = isAnchor ? _amountIn/2 : ZirconLibrary.getAmountOut(_amountIn/2, _reservePair0, _reservePair1);\\n    }\\n\\n    function getLiquidityFromPoolTokens(uint amountIn0, uint amountIn1,  bool shouldMintAnchor, IZirconPoolToken pt) private view returns (uint liquidity, uint amountInAdjusted){\\n        (uint112 _pairReserve0, uint112 _pairReserve1) = getPairReservesNormalized();\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves(); // gas savings\\n\\n        if (shouldMintAnchor) {\\n            amountInAdjusted = Math.min((amountIn0.mul(_pairReserve1).mul(2))/_pairReserve0, amountIn1.mul(2)); //Adjust AmountIn0 to its value in Anchor tokens\\n            liquidity = ZirconLibrary.calculatePTU(shouldMintAnchor, amountInAdjusted, pt.totalSupply(), translateToPylon(_pairReserve1, 0), _reserve1, gammaMulDecimals, virtualAnchorBalance);\\n        }else{\\n            amountInAdjusted = Math.min((amountIn1.mul(_pairReserve0).mul(2))/_pairReserve1, amountIn0.mul(2)); //Adjust AmountIn1 to its value in Float tokens\\n            liquidity = ZirconLibrary.calculatePTU(shouldMintAnchor, amountInAdjusted, pt.totalSupply(), translateToPylon(_pairReserve0, 0), _reserve0, gammaMulDecimals, virtualAnchorBalance);\\n        }\\n    }\\n\\n    // ***** INIT ******\\n\\n    // @notice Called once by the factory at time of deployment\\n    // @_floatPoolTokenAddress -> Contains Address Of Float PT\\n    // @_anchorPoolTokenAddress -> Contains Address Of Anchor PT\\n    // @floatToken -> Float token\\n    // @anchorToken -> Anchor token\\n    function initialize(address _floatPoolTokenAddress, address _anchorPoolTokenAddress, address _floatToken, address _anchorToken, address _pairAddress, address _pairFactoryAddress, address _energy) external nonReentrant {\\n        require(msg.sender == factoryAddress, 'Zircon: FORBIDDEN'); // sufficient check\\n        floatPoolTokenAddress = _floatPoolTokenAddress;\\n        anchorPoolTokenAddress = _anchorPoolTokenAddress;\\n        pairAddress = _pairAddress;\\n        isFloatReserve0 = IZirconPair(_pairAddress).token0() == _floatToken;\\n        pylonToken = PylonToken(_floatToken, _anchorToken);\\n        pairFactoryAddress = _pairFactoryAddress;\\n        energyAddress = _energy;\\n\\n        maximumPercentageSync = IZirconPylonFactory(factoryAddress).maximumPercentageSync();\\n        dynamicFeePercentage = IZirconPylonFactory(factoryAddress).dynamicFeePercentage();\\n\\n    }\\n\\n    // @notice On init pylon we have to handle two cases\\n    // The first case is when we initialize the pair through the pylon\\n    // And the second one is when initialize the pylon with a pair already existing\\n    function initPylon(address _to) external nonReentrant returns (uint floatLiquidity, uint anchorLiquidity) {\\n        require(initialized == 0, \\\"Already Initialized\\\");\\n\\n        // Let's get the balances so we can see what the user send us\\n        // As we are initializing the reserves are going to be null\\n        uint balance0 = IERC20Uniswap(pylonToken.float).balanceOf(address(this));\\n        uint balance1 = IERC20Uniswap(pylonToken.anchor).balanceOf(address(this));\\n        require(balance0 > 0 && balance1 > 0, \\\"ZP: Not enough liquidity\\\");\\n\\n        // Let's see if the pair contains some reserves\\n        (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n        // If pair contains reserves we have to use the ratio of the Pair so...\\n\\n        virtualFloatBalance = balance0.sub(balance0.mul(dynamicFeePercentage)/10000);\\n        virtualAnchorBalance = balance1.sub(balance1.mul(dynamicFeePercentage)/10000);\\n        if (_reservePair0 > 0 && _reservePair1 > 0) {\\n            uint denominator = (virtualAnchorBalance.mul(_reservePair0))/_reservePair1;\\n            gammaMulDecimals = (virtualFloatBalance*1e18) /  (virtualFloatBalance.add(denominator));\\n            // This is gamma formula when FTV <= 50%\\n        } else {\\n            // When Pair is not initialized let's start gamma to 0.5\\n            gammaMulDecimals = 500000000000000000;\\n        }\\n        // TODO: Old definition of gamma, necessary because pool may not be initialized but check for weird interactions\\n        // Time to mint some tokens\\n        (anchorLiquidity,) = _mintPoolToken(balance1, 0, _reservePair1, anchorPoolTokenAddress, _to, true);\\n        (floatLiquidity,) = _mintPoolToken(balance0, 0, _reservePair0, floatPoolTokenAddress, _to, false);\\n\\n        //Here it updates the state and throws liquidity into the pool if possible\\n        _update();\\n        initialized = 1;\\n    }\\n\\n\\n    // ***** EXCESS RESERVES ******\\n\\n\\n    // This function takes\\n    // @balance0 & @balance1 -> The New Balances After A Sync Update\\n    // @max0 & @max1 -> The maximum that we can save on the reserves\\n    // If we have any excess reserves we donate them to the pool\\n    //TODO:- Function should be fine although the mintOneSide usage could be dangerous\\n    //TODO:- But we need to check how we use it.\\n    function updateReservesRemovingExcess(uint newReserve0, uint newReserve1, uint112 max0, uint112 max1) private {\\n        uint ptl = 0;\\n        if (max0 < newReserve0) {\\n            _safeTransfer(pylonToken.float, pairAddress, newReserve0.sub(max0));\\n            (ptl,,) = IZirconPair(pairAddress).mintOneSide(address(this), isFloatReserve0);\\n            reserve0 = max0;\\n        } else {\\n            reserve0 = uint112(newReserve0);\\n        }\\n        if (max1 < newReserve1) {\\n\\n            _safeTransfer(pylonToken.anchor, pairAddress, newReserve1.sub(max1));\\n            (ptl,,) = IZirconPair(pairAddress).mintOneSide(address(this), !isFloatReserve0);\\n            reserve1 = max1;\\n        }else{\\n            reserve1 = uint112(newReserve1);\\n        }\\n        emit PylonUpdate(reserve0, reserve1);\\n    }\\n\\n\\n\\n    // ****** UPDATE ********\\n\\n    // Update reserves and, on the first call per block, price accumulator\\n    // Any excess of balance is going to be donated to the pair\\n    // So... here we get the maximum off both tokens and we mint Pool Tokens\\n\\n    // Sends pylonReserves to pool if there is a match\\n    function _update() private {\\n        // Let's take the current balances\\n        uint balance0 = IERC20Uniswap(pylonToken.float).balanceOf(address(this));\\n        uint balance1 = IERC20Uniswap(pylonToken.anchor).balanceOf(address(this));\\n\\n        // Intializing the variables, (Maybe gas consuming let's see how to sort out this\\n        // Getting pair reserves and updating variables before minting\\n        // Max0 and Max1 are two variables representing the maximum that can be minted on sync\\n        // Min0/2 & Min1/2 remain as reserves on the pylon\\n        // In the case the pair hasn't been initialized pair reserves will be 0 so we take our current balance as the maximum\\n        (uint reservesTranslated0, uint reservesTranslated1) = getPairReservesTranslated(balance0, balance1);\\n\\n        uint112 max0 = uint112(reservesTranslated0.mul(maximumPercentageSync)/100);\\n        uint112 max1 = uint112(reservesTranslated1.mul(maximumPercentageSync)/100);\\n        // Pylon Update Minting\\n        if (balance0 > max0/2 && balance1 > max1/2) {\\n            // Get Maximum simple gets the maximum quantity of token that we can mint\\n            (uint px, uint py) = ZirconLibrary._getMaximum(\\n                reservesTranslated0,\\n                reservesTranslated1,\\n                balance0.sub(max0/2), balance1.sub(max1/2));\\n            // Transferring tokens to pair and minting\\n            if(px != 0) _safeTransfer(pylonToken.float, pairAddress, px);\\n            if(py != 0) _safeTransfer(pylonToken.anchor, pairAddress, py);\\n            IZirconPair(pairAddress).mint(address(this));\\n            balance0 -= px;\\n            balance1 -= py;\\n\\n        }\\n        // Let's remove the tokens that are above max0 and max1, and donate them to the pool\\n        // This is for cases where somebody just donates tokens to pylon; tx reverts if this done via core functions\\n        //Todo: This is likely also invoked if the price dumps and the sync pool is suddenly above max, not ideal behavior...\\n\\n        updateReservesRemovingExcess(balance0, balance1, max0, max1);\\n        _updateVariables();\\n\\n        // Updating Variables\\n    }\\n    // @notice This Function is called to update some variables needed for calculation\\n    function _updateVariables() private {\\n        (uint112 _pairReserve0, uint112 _pairReserve1) = getPairReservesNormalized();\\n        lastPoolTokens = IZirconPair(pairAddress).totalSupply();\\n        lastK = uint(_pairReserve0).mul(_pairReserve1);\\n\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        //uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        blockTimestampLast = blockTimestamp;\\n    }\\n\\n    // ***** MINTING *****\\n\\n    // @notice Mint Pool Token\\n    // @_balance -> Balance OF PT\\n    // @_pylonReserve -> Reserves of PT on Pylon\\n    function _mintPoolToken(uint amountIn,\\n        uint _pylonReserve, uint _pairReserveTranslated,\\n        address _poolTokenAddress, address _to,  bool isAnchor) private returns (uint liquidity, uint amountOut) {\\n        require(amountIn > 0, \\\"ZP: Not Enough Liquidity\\\");\\n        // Taking the fee out in tokens\\n\\n        uint pts = IZirconPoolToken(_poolTokenAddress).totalSupply();\\n        {\\n            uint _gamma = gammaMulDecimals;\\n            uint _vab = virtualAnchorBalance;\\n\\n            if (pts == 0) {\\n                //TODO: Double check if we can start the pool with no fees\\n                IZirconPoolToken(_poolTokenAddress).mint(address(0), MINIMUM_LIQUIDITY);\\n                if (isAnchor) {\\n                    liquidity = amountIn.sub(MINIMUM_LIQUIDITY);\\n                }else{\\n                    liquidity = (amountIn.mul(1e18)/_gamma.mul(2)).sub(MINIMUM_LIQUIDITY);\\n                }\\n            } else {\\n                // Paying fees only on not init call\\n                amountOut = payFees(amountIn, isAnchor);\\n                liquidity = ZirconLibrary.calculatePTU(isAnchor, amountOut, pts, _pairReserveTranslated, _pylonReserve, _gamma, _vab);\\n\\n            }\\n        }\\n        IZirconPoolToken(_poolTokenAddress).mint(_to, liquidity);\\n        emit MintSync(msg.sender, amountOut, isAnchor);\\n    }\\n\\n    // @notice External Function called to mint pool Token\\n    // @dev Liquidity have to be sent before\\n    // TODO: recheck in dump scenario if sync pool can be blocked\\n\\n    // aka syncMint\\n    function mintPoolTokens(address _to, bool isAnchor) isInitialized nonReentrant external returns (uint liquidity) {\\n        sync();\\n\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves();\\n        (uint _reservePairTranslated0, uint _reservePairTranslated1) = getPairReservesTranslated(0, 0);\\n        uint amountIn;\\n        uint amountOut;\\n        // Minting Pool tokens\\n        if (isAnchor) {\\n            uint balance1 = IERC20Uniswap(pylonToken.anchor).balanceOf(address(this));\\n            amountIn = balance1.sub(_reserve1);\\n\\n            (liquidity, amountOut ) = _mintPoolToken(amountIn, _reserve1, _reservePairTranslated1, anchorPoolTokenAddress, _to, isAnchor);\\n        } else {\\n            uint balance0 = IERC20Uniswap(pylonToken.float).balanceOf(address(this));\\n            amountIn = balance0.sub(_reserve0);\\n            (liquidity, amountOut) = _mintPoolToken(amountIn, _reserve0, _reservePairTranslated0, floatPoolTokenAddress, _to, isAnchor);\\n        }\\n        // Updating VAB & VFB\\n        if(isAnchor) {\\n            virtualAnchorBalance += amountOut;\\n        }else{\\n            virtualFloatBalance += amountOut;\\n        }\\n        //Sends tokens into pool if there is a match\\n        _update();\\n    }\\n\\n\\n    /// @notice Private function that calculates anchor fees to send to energy\\n    /// @dev in case the user adds liquidity in float token it will swap the amount of tokens with the Pair\\n    /// @return amount minus fees payed\\n\\n    //Swapping every time is not ideal for gas, but it will be changed if we ever deploy to a chain like ETH\\n    function payFees(uint amountIn, bool isAnchor) private returns (uint amountOut){\\n        uint fee = amountIn.mul(dynamicFeePercentage)/10000; //1basis point resolution\\n        if (isAnchor) {\\n            _safeTransfer(pylonToken.anchor, energyAddress, fee);\\n        } else {\\n            _safeTransfer(pylonToken.float, pairAddress, fee);\\n            (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n            uint amountSwapped = ZirconLibrary.getAmountOut(fee, _reservePair0, _reservePair1);\\n            IZirconPair(pairAddress).swap(isFloatReserve0 ? 0 : amountSwapped, isFloatReserve0 ? amountSwapped : 0, energyAddress, \\\"\\\");\\n        }\\n        amountOut =  amountIn.sub(fee);\\n    }\\n\\n    /// @notice private function that sends to pair the LP tokens\\n    /// Burns them sending it to the energy address\\n    function payBurnFees(uint amountIn) private returns (uint amountOut) {\\n        uint fee = amountIn.mul(dynamicFeePercentage)/10000;\\n        _safeTransfer(pairAddress, pairAddress, fee);\\n        IZirconPair(pairAddress).burnOneSide(energyAddress, !isFloatReserve0);\\n        amountOut = amountIn.sub(fee);\\n    }\\n\\n    /// @notice private function that calculates fees for Burn Async\\n    /// Fees here are increased depending on current Gamma\\n    /// on unbalanced Gamma, fees are higher\\n    function payBurnAsyncFees(uint amountIn) private returns (uint amountOut) {\\n        uint gammaFee = IZirconEnergy(energyAddress).getFeeByGamma(gammaMulDecimals);\\n        uint fee = amountIn.mul(dynamicFeePercentage + gammaFee/2)/10000;\\n        address revAddress = IZirconPair(pairAddress).energyRevenueAddress();\\n        _safeTransfer(pairAddress, revAddress, amountIn.mul(gammaFee/2)/10000);\\n        IZirconEnergyRevenue(revAddress).calculate();\\n\\n        _safeTransfer(pairAddress, pairAddress, fee);\\n        IZirconPair(pairAddress).burnOneSide(energyAddress, !isFloatReserve0);\\n        amountOut = amountIn.sub(fee);\\n    }\\n\\n\\n    // @notice Mint Async 100 lets you invest in one liquidity\\n    // The difference with Sync Liquidity is that it goes directly to the Pool\\n\\n    function mintAsync100(address to, bool isAnchor) nonReentrant isInitialized external returns (uint liquidity) {\\n        sync();\\n\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves();\\n        uint amountIn;\\n        if (isAnchor) {\\n            uint balance = IERC20Uniswap(pylonToken.anchor).balanceOf(address(this));\\n            amountIn = balance.sub(_reserve1);\\n        }else{\\n            uint balance = IERC20Uniswap(pylonToken.float).balanceOf(address(this));\\n            amountIn = balance.sub(_reserve0);\\n        }\\n\\n        amountIn = payFees(amountIn, isAnchor);\\n        require(amountIn > 0, \\\"ZP: INSUFFICIENT_AMOUNT\\\");\\n        _safeTransfer(isAnchor ? pylonToken.anchor : pylonToken.float, pairAddress, amountIn);\\n        {\\n            (uint a0, uint a1) = _disincorporateAmount(amountIn, isAnchor);\\n\\n            (uint _liquidity, uint amount) = getLiquidityFromPoolTokens(\\n                a0, a1,\\n                isAnchor,\\n                IZirconPoolToken(isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress));\\n\\n            liquidity = _liquidity;\\n            if (isAnchor) {\\n                virtualAnchorBalance += amount;\\n            }else{\\n                virtualFloatBalance += amount;\\n            }\\n\\n            IZirconPair(pairAddress).mintOneSide(address(this), isFloatReserve0 ? !isAnchor : isAnchor);\\n            IZirconPoolToken(isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress).mint(to, liquidity);\\n        }\\n\\n        _updateVariables();\\n        emit MintAsync100(msg.sender, amountIn, isAnchor);\\n    }\\n\\n\\n    // @notice Mint Async lets you invest in both liquidity like you normally do on your DEX\\n    // The difference is that gives you directly with mint one side\\n    // TODO: Transfer first then calculate on basis of pool token share how many share we should give to the user\\n    function mintAsync(address to, bool shouldMintAnchor) external nonReentrant isInitialized returns (uint liquidity){\\n        sync();\\n        address _poolTokenAddress = shouldMintAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress;\\n\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves(); // gas savings\\n        uint amountIn0;\\n        uint amountIn1;\\n        {\\n            uint balance0 = IERC20Uniswap(pylonToken.float).balanceOf(address(this));\\n            uint balance1 = IERC20Uniswap(pylonToken.anchor).balanceOf(address(this));\\n\\n            amountIn0 = balance0.sub(_reserve0);\\n            amountIn1 = balance1.sub(_reserve1);\\n\\n            amountIn0 = payFees(amountIn0, false);\\n            amountIn1 = payFees(amountIn1, true);\\n\\n            (uint _liquidity, uint amount) = getLiquidityFromPoolTokens(amountIn0, amountIn1, shouldMintAnchor, IZirconPoolToken(_poolTokenAddress));\\n            liquidity = _liquidity;\\n            if (shouldMintAnchor) {\\n                virtualAnchorBalance += amount;\\n            } else {\\n                virtualFloatBalance += amount;\\n            }\\n\\n        }\\n\\n        require(amountIn1 > 0 && amountIn0 > 0, \\\"ZirconPylon: Not Enough Liquidity\\\");\\n        _safeTransfer(pylonToken.float, pairAddress, amountIn0);\\n        _safeTransfer(pylonToken.anchor, pairAddress, amountIn1);\\n        IZirconPair(pairAddress).mint(address(this));\\n        // uint deltaSupply = pair.totalSupply().sub(_totalSupply);\\n        //TODO: Change fee\\n        IZirconPoolToken(_poolTokenAddress).mint(to, liquidity);\\n\\n\\n        emit MintAsync(msg.sender, amountIn0, amountIn1);\\n        //console.log(\\\"<<<Pylon:mintAsync::::::::\\\", liquidity);\\n        _updateVariables();\\n    }\\n\\n\\n    /// @notice sync lets you enter with one liquidity getting or anchor or float shares\\n    function sync() private {\\n        // Prevents this from being called while the underlying pool is getting flash loaned\\n        if(msg.sender != pairAddress) { IZirconPair(pairAddress).tryLock(); }\\n\\n        // So this thing needs to get pool reserves, get the price of the float asset in anchor terms\\n        // Then it applies the base formula:\\n        // Adds fees to virtualFloat and virtualAnchor\\n        // And then calculates Gamma so that the proportions are correct according to the formula\\n        (uint112 pairReserve0, uint112 pairReserve1) = getPairReservesNormalized();\\n        (uint112 pylonReserve0, uint112 pylonReserve1,) = getSyncReserves();\\n\\n        // If the current K is equal to the last K, means that we haven't had any updates on the pair level\\n        // So is useless to update any variable because fees on pair haven't changed\\n        uint currentK = uint(pairReserve0).mul(pairReserve1);\\n        if (lastPoolTokens != 0 && pairReserve0 != 0 && pairReserve1 != 0) {\\n\\n            uint poolTokensPrime = IZirconPair(pairAddress).totalSupply();\\n            // Here it is going to be useful to have a Minimum Liquidity\\n            // If not we can have some problems\\n            // uint poolTokenBalance = IZirconPair(pairAddress).balanceOf(address(this));\\n            // Let's get the amount of total pool value own by pylon\\n\\n            // TODO: Add system that accumulates fees to cover insolvent withdrawals (and thus changes ptb)\\n            // TODO: Add impact of Anchor/Float pts\\n\\n            uint totalPoolValueAnchorPrime = translateToPylon(pairReserve1.mul(2), 0);\\n            uint totalPoolValueFloatPrime = translateToPylon(pairReserve0.mul(2), 0);\\n\\n            uint one = 1e18;\\n            uint d = (one).sub((Math.sqrt(lastK)*poolTokensPrime*1e18)/(Math.sqrt(currentK)*lastPoolTokens));\\n\\n            // Getting how much fee value has been created for pylon\\n            uint feeValueAnchor = totalPoolValueAnchorPrime.mul(d)/1e18;\\n            uint feeValueFloat = totalPoolValueFloatPrime.mul(d)/1e18;\\n//            console.log(\\\"sync::anchor::fee\\\", feeValueAnchor);\\n//            console.log(\\\"sync::float::fee\\\", feeValueFloat);\\n\\n            // Calculating gamma, variable used to calculate tokens to mint and withdrawals\\n\\n            // gamma is supposed to always be an accurate reflection of the float share as a percentage of the totalPoolValue\\n            // however vfb also includes the syncPool reserve portion, which is completely outside of the pools.\\n            // Nonetheless, the syncPool is still considered part of the user base/float share.\\n            // This is relevant primarily for fee calculations, but that's already a given: you just use the same proportions.\\n            // In all other places we (should) already account for the sync pool separately.\\n\\n            // When operating on fractional, gamma is higher than it should be compared to ftv + atv.\\n            // This means that anchors get more fees than they \\\"should\\\", which kinda works out because they're at high risk.\\n            // It works as an additional incentive to not withdraw.\\n\\n            virtualAnchorBalance += ((feeValueAnchor.mul(1e18-gammaMulDecimals))/1e18);\\n            virtualFloatBalance += ((gammaMulDecimals).mul(feeValueFloat)/1e18);\\n\\n            if ((virtualAnchorBalance.sub(pylonReserve1)) < totalPoolValueAnchorPrime/2) {\\n                gammaMulDecimals = 1e18 - ((virtualAnchorBalance.sub(pylonReserve1))*1e18 /  totalPoolValueAnchorPrime);\\n            } else {\\n                //TODO: Check that this works and there are no gamma that assume gamma is ftv/atv+ftv\\n                gammaMulDecimals = ((virtualFloatBalance.sub(pylonReserve0)) *1e18) /  totalPoolValueFloatPrime;\\n            }\\n\\n            // TODO: (see if make sense to insert a floor to for example 25/75)\\n            // Sync pool also gets a claim to these\\n            emit PylonSync(virtualAnchorBalance, virtualFloatBalance, gammaMulDecimals);\\n        }\\n    }\\n\\n\\n    /// @notice TODO\\n    function calculateLPTU(bool _isAnchor, uint _liquidity, uint _ptTotalSupply) view private returns (uint claim){\\n        (uint _reserve0, uint _reserve1) = getPairReservesTranslated(1, 1); // gas savings\\n        (uint112 _pylonReserve0, uint112 _pylonReserve1,) = getSyncReserves(); // gas savings\\n        uint pylonShare;\\n        if (_isAnchor) {\\n            pylonShare = (IZirconPair(pairAddress).balanceOf(address(this)).mul(virtualAnchorBalance.sub(_pylonReserve1)))/_reserve1.mul(2);\\n            // Adjustment factor to extract correct amount of liquidity\\n            pylonShare = pylonShare.add(pylonShare.mul(_pylonReserve1)/_reserve1.mul(2));\\n        }else{\\n            pylonShare = ((gammaMulDecimals).mul(IZirconPair(pairAddress).balanceOf(address(this))))/1e18;\\n            pylonShare = pylonShare.add(pylonShare.mul(_pylonReserve0)/_reserve0.mul(2));\\n        }\\n\\n\\n        // Liquidity/pt applies share over pool + reserves to something that is just pool.\\n        // So it gives less liquidity than it should\\n\\n        claim = (_liquidity.mul(pylonShare))/_ptTotalSupply;\\n        require(claim > 0, 'ZP: INSUFFICIENT_LIQUIDITY_BURNED');\\n    }\\n\\n    /// @notice TODO\\n    // Burn Async send both tokens 50-50\\n    // Liquidity has to be sent before\\n    function sendSlashing(uint omegaMulDecimals, uint liquidity) private returns(uint remainingPercentage){\\n        if (omegaMulDecimals < 1e18) {\\n            uint amountToAdd = liquidity.mul(1e18-omegaMulDecimals)/1e18;\\n            // uint energyAnchorBalance = IERC20Uniswap(pylonToken.anchor).balanceOf(energyAddress);\\n            uint energyPTBalance = IERC20Uniswap(pairAddress).balanceOf(energyAddress);\\n            if (amountToAdd < energyPTBalance) {\\n                // Sending PT tokens to Pair because burn one side is going to be called after\\n                _safeTransferFrom(pairAddress, energyAddress, pairAddress, amountToAdd);\\n                remainingPercentage = 0;\\n            } else {\\n                // Sending PT tokens to Pair because burn one side is going to be called after\\n                // @dev if amountToAdd is too small the remainingPercentage will be 0 so that is ok\\n                _safeTransferFrom(pairAddress, energyAddress, pairAddress, energyPTBalance);\\n                remainingPercentage = (amountToAdd.sub(energyPTBalance))/(liquidity);\\n            }\\n        }else{\\n            remainingPercentage = 0;\\n        }\\n    }\\n\\n    /// @notice function that sends tokens to Pair to be burn after\\n    /// this function must be called only before a burn takes place, if not it'll give away tokens\\n    function sendSlashedTokensToUser(uint anchorAmount, uint floatAmount, uint percentage, address _to) private {\\n        if(percentage != 0) {\\n            uint totalAmount = anchorAmount;\\n            if ( floatAmount > 0 ) {\\n                (uint res0, uint res1) = getPairReservesNormalized();\\n                totalAmount += ZirconLibrary.getAmountOut(floatAmount, res0, res1);\\n            }\\n            uint energyAnchorBalance = IERC20Uniswap(pylonToken.anchor).balanceOf(energyAddress);\\n            uint amountToTransfer = totalAmount.mul(percentage);\\n            if(energyAnchorBalance > amountToTransfer ){\\n                _safeTransferFrom(pylonToken.anchor, energyAddress, _to, amountToTransfer);\\n            }\\n            console.log(\\\"Sending slashed Tokens\\\", amountToTransfer);\\n        }\\n    }\\n\\n\\n    /// @notice Burn Async let's you burn your anchor|float shares giving you back both tokens\\n    /// @dev sends to the Pair Contract the PTU equivalent to the Anchor|Float Shares\\n    /// and calls Classic burn\\n    function burnAsync(address _to, bool _isAnchor) external nonReentrant isInitialized returns (uint amount0, uint amount1) {\\n        sync();\\n\\n        IZirconPoolToken pt = IZirconPoolToken(_isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress);\\n        uint liquidity = pt.balanceOf(address(this));\\n        require(liquidity > 0, \\\"ZP: Not enough liquidity inserted\\\");\\n        uint ptTotalSupply = pt.totalSupply();\\n        uint extraPercentage = 0;\\n\\n        {\\n            (uint reserveFloat, uint reserveAnchor,) = getSyncReserves();\\n            (uint pairReserves0,) = getPairReservesTranslated(0, 0);\\n            {\\n                //Calculates max liquidity to avoid withdrawing portion in sync pools\\n                uint maxPoolTokens = _isAnchor ?\\n                ptTotalSupply - ptTotalSupply.mul(reserveAnchor) / virtualAnchorBalance :\\n                ptTotalSupply - ptTotalSupply.mul(reserveFloat) / (pairReserves0.mul(2).mul(gammaMulDecimals) / 1e18).add(reserveFloat);\\n                require(liquidity < maxPoolTokens, \\\"ZP: Exceeded Burn Async limit\\\");\\n            }\\n            uint ptu = calculateLPTU(_isAnchor, liquidity, ptTotalSupply);\\n            ptu = payBurnFees(ptu);\\n            // Anchor slashing logic\\n            if (_isAnchor) {\\n                (ptu, extraPercentage) = handleOmegaSlashing(ptu);\\n            }\\n            _safeTransfer(pairAddress, pairAddress, ptu);\\n        }\\n        // Burning liquidity and sending to user\\n        // The pool tokens sent to the Pair are slashed by omega\\n        (uint amountA, uint amountB) = IZirconPair(pairAddress).burn(_to);\\n        amount0 = isFloatReserve0 ? amountA : amountB;\\n        amount1 = isFloatReserve0 ? amountB : amountA;\\n        sendSlashedTokensToUser(amount0, amount1, extraPercentage, _to);\\n\\n        //Burns the Zircon pool tokens\\n        pt.burn(address(this), liquidity);\\n\\n        // Updating\\n        updateVirtualBalancesBurn(liquidity, ptTotalSupply, _isAnchor);\\n        _update();\\n\\n        // Emiting event on burned async\\n        emit BurnAsync(msg.sender, amount0, amount1);\\n    }\\n\\n    /// @notice function that simples updates both VAB and VFB\\n    function updateVirtualBalancesBurn(uint _liquidity, uint _totalSupply, bool _isAnchor) private {\\n        if(_isAnchor) {\\n            virtualAnchorBalance -= virtualAnchorBalance.mul(_liquidity)/_totalSupply;\\n        }else{\\n            virtualFloatBalance -= virtualFloatBalance.mul(_liquidity)/_totalSupply;\\n        }\\n    }\\n\\n    /// @notice Function That handles the amount of reserves in Float Anchor Shares\\n    /// and the amount of the minimum from liquidity and reserves\\n    /// @dev Helper function for burn\\n    function burnPylonReserves(bool isAnchor, uint _totalSupply, uint _liquidity) view private returns (uint reservePT, uint amount) {\\n        // variables declaration\\n        uint _gamma = gammaMulDecimals;\\n        uint _vab = virtualAnchorBalance;\\n        (uint _reserve0,) = getPairReservesTranslated(0,0); // gas savings\\n        (uint112 _pylonReserve0, uint112 _pylonReserve1,) = getSyncReserves();\\n\\n        //Calculates maxPTs that can be serviced through Pylon Reserves\\n        uint pylonReserve = isAnchor ? _pylonReserve1 : _pylonReserve0;\\n        uint reserve = isAnchor ? reserve1 : _reserve0;\\n        reservePT = ZirconLibrary.calculatePTU(isAnchor, pylonReserve, _totalSupply, reserve, pylonReserve, _gamma, _vab);\\n        amount = ZirconLibrary.calculatePTUToAmount(isAnchor, Math.min(reservePT, _liquidity), _totalSupply,reserve, pylonReserve, _gamma, _vab);\\n    }\\n\\n\\n    /// @notice Omega is the slashing factor. It's always equal to 1 if pool has gamma above 50%\\n    /// If it's below 50%, it begins to go below 1 and thus slash any withdrawal.\\n    /// @dev Note that in practice this system doesn't activate unless the syncReserves are empty.\\n    /// Also note that a dump of 60% only generates about 10% of slashing.\\n    function handleOmegaSlashing(uint ptu) private returns (uint retPtu, uint extraPercentage){\\n        (, uint reserveAnchor,) = getSyncReserves();\\n        (, uint pairReserves1)  = getPairReservesTranslated(0,0);\\n        uint omegaMulDecimals = ZirconLibrary.slashLiabilityOmega(\\n            pairReserves1.mul(2),\\n            reserveAnchor,\\n            gammaMulDecimals,\\n            virtualAnchorBalance);\\n        console.log(\\\"omega slash\\\", omegaMulDecimals);\\n        (extraPercentage) = sendSlashing(omegaMulDecimals, ptu);\\n        retPtu = omegaMulDecimals.mul(ptu)/1e18;\\n    }\\n\\n    // @notice Burn send liquidity back to user burning Pool tokens\\n    // The function first uses the reserves of the Pylon\\n    // If not enough reserves it burns The Pool Tokens of the pylon\\n    // Fees here are\\n    function burn(address _to, bool _isAnchor) external nonReentrant isInitialized returns (uint amount){\\n        sync();\\n        // Selecting the Pool Token class on basis of the requested tranch to burn\\n        IZirconPoolToken pt = IZirconPoolToken(_isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress);\\n        // Let's get how much liquidity was sent to burn\\n        // Outside of scope to be used for vab/vfb adjustment later\\n        uint liquidity = pt.balanceOf(address(this));\\n        require(liquidity > 0, \\\"INSUFFICIENT_LIQUIDITY\\\");\\n        uint _totalSupply = pt.totalSupply();\\n        {\\n            address to = _to;\\n            bool isAnchor = _isAnchor;\\n            address _pairAddress = pairAddress;\\n            // Here we calculate max PTU to extract from sync reserve + amount in reserves\\n            (uint reservePT, uint _amount) = burnPylonReserves(isAnchor, _totalSupply, liquidity);\\n            amount = payFees(_amount, isAnchor);\\n            _safeTransfer(isAnchor ? pylonToken.anchor : pylonToken.float, to, amount);\\n\\n            //In case the reserves weren't able to pay for everything\\n            if (reservePT < liquidity) {\\n                uint adjustedLiquidity = liquidity.sub(reservePT);\\n                uint ptu = calculateLPTU(isAnchor, adjustedLiquidity, _totalSupply);\\n                ptu = payBurnFees(ptu);\\n                uint extraPercentage = 0;\\n                if (isAnchor) { (ptu, extraPercentage) = handleOmegaSlashing(ptu); }\\n                _safeTransfer(_pairAddress, _pairAddress, ptu);\\n                bool isReserve0 = isFloatReserve0 ? !isAnchor : isAnchor;\\n                uint sentAmount = IZirconPair(_pairAddress).burnOneSide(to, isReserve0);  // XOR\\n                amount += sentAmount;\\n                sendSlashedTokensToUser(isReserve0 ? sentAmount : 0, isReserve0 ? 0 : sentAmount, extraPercentage, to);\\n                //Bool combines choice of anchor or float with which token is which in the pool\\n            }\\n            pt.burn(address(this), liquidity); //Should burn unadjusted amount ofc\\n        }\\n\\n        updateVirtualBalancesBurn(liquidity, _totalSupply, _isAnchor);\\n        _update();\\n        emit Burn(msg.sender, amount, _isAnchor);\\n    }\\n}\\n\",\"keccak256\":\"0xa0fe0390a6af045431300a599fc6270d58648aa0e62a68e96db29c9281e9ca0b\"},\"contracts/ZirconPylonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\n//import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport './ZirconPoolToken.sol';\\nimport './ZirconPylon.sol';\\nimport \\\"./energy/interfaces/IZirconEnergyRevenue.sol\\\";\\nimport './energy/interfaces/IZirconEnergyFactory.sol';\\n\\ncontract ZirconPylonFactory is IZirconPylonFactory {\\n    mapping(address => mapping(address => address)) public getPylon;\\n    address[] public allPylons;\\n    address public factory;\\n    address public energyFactory;\\n\\n    uint public maximumPercentageSync;\\n    uint public dynamicFeePercentage;\\n    bytes4 private constant CREATE = bytes4(keccak256(bytes('createEnergy(address,address,address,address)')));\\n\\n    event PylonCreated(address indexed token0, address indexed token1, address poolToken0, address poolToken1, address pylon, address pair);\\n\\n    constructor(address _factory, address _energyFactory) public {\\n        factory = _factory;\\n        energyFactory = _energyFactory;\\n        maximumPercentageSync = 10;\\n        dynamicFeePercentage = 5;\\n    }\\n\\n    function allPylonsLength() external view returns (uint) {\\n        return allPylons.length;\\n    }\\n\\n    function pylonCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(ZirconPylon).creationCode);\\n    }\\n\\n    function createTokenAddress(address _token, address pylonAddress) private returns (address poolToken) {\\n        // Creating Token\\n        bytes memory bytecode = type(ZirconPoolToken).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_token, pylonAddress));\\n        assembly {\\n            poolToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n    }\\n\\n    function createPylon( address _tokenA, address _tokenB, address _pair) private returns (address pylon) {\\n        // Creating Token\\n        bytes memory bytecode = type(ZirconPylon).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_tokenA, _tokenB, _pair));\\n        assembly {\\n            pylon := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n    }\\n    function createEnergy(address _pylonAddress, address _pairAddress, address _tokenA, address _tokenB) private returns (address energy){\\n        energy = IZirconEnergyFactory(energyFactory).createEnergy( _pylonAddress, _pairAddress, _tokenA, _tokenB);\\n        //energyRev = IZirconEnergyFactory(energyFactory).createEnergyRev(_pairAddress, _tokenA, _tokenB, address(this));\\n\\n        //        (bool success, bytes memory data) = energyFactory.call(abi.encodeWithSelector(CREATE, _pylonAddress, _pairAddress, _tokenA, _tokenB));\\n//        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ZP: ENERGY_FAILED_CREATION');\\n    }\\n\\n    // Adding Pylon\\n    // First Token is always the Float and the second one is the Anchor\\n    function addPylon(address _pairAddress, address _tokenA, address _tokenB) external returns (address pylonAddress) {\\n        require(_tokenA != _tokenB, 'ZF: IDENTICAL_ADDRESSES');\\n        require(getPylon[_tokenA][_tokenB] == address(0), 'ZF: PYLON_EXISTS');\\n\\n        pylonAddress = createPylon(_tokenA, _tokenB, _pairAddress);\\n        address poolTokenA = createTokenAddress(_tokenA, pylonAddress); // Float\\n        address poolTokenB = createTokenAddress(_tokenB, pylonAddress); // Anchor\\n\\n        address energy = createEnergy(pylonAddress, _pairAddress, _tokenA, _tokenB);\\n\\n        IZirconPylon(pylonAddress).initialize(poolTokenA, poolTokenB, _tokenA, _tokenB, _pairAddress, factory, energy);\\n\\n        ZirconPoolToken(poolTokenA).initialize(_tokenA, _pairAddress, pylonAddress, false);\\n        ZirconPoolToken(poolTokenB).initialize(_tokenB, _pairAddress, pylonAddress, true);\\n\\n        emit PylonCreated(_tokenA, _tokenB, poolTokenA, poolTokenB, pylonAddress, _pairAddress);\\n\\n\\n        getPylon[_tokenA][_tokenB] = pylonAddress;\\n        allPylons.push(pylonAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xd4553ad93b7779306135439be0e25991a7bb7d649f530889c9a9ed0e858e5a01\"},\"contracts/energy/interfaces/IZirconEnergy.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface IZirconEnergy {\\n    function initialize(address _pylon, address _pair, address _token0, address _token1, uint _insurancePerMille, uint _minFee, uint _maxFee) external;\\n    function breakPiggybank(uint _requestedLiquidity) external returns (uint returnedLiquidity);\\n    function syncPylonFee() external;\\n    function syncPairFee() external;\\n    function getFeeByGamma(uint gammaMulDecimals) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xc39ad17d7b7fbd15e7738ec804d73bdfb7a86e8a153134d41d349c5a90e9e404\"},\"contracts/energy/interfaces/IZirconEnergyFactory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\ninterface IZirconEnergyFactory {\\n\\n    // Variables\\n    function allEnergies(uint p) external view returns (address);\\n    function getEnergy(address _tokenA, address _tokenB) external view returns (address pair);\\n    function allEnergiesLength() external view returns (uint);\\n    function energyCodeHash() external pure returns (bytes32);\\n\\n    // Functions\\n    function createEnergy(address, address, address, address) external returns (address energy);\\n    function createEnergyRev(address, address, address, address) external returns (address energy);\\n\\n}\\n\",\"keccak256\":\"0x4d14cbeaa52c092bd156d65a17d1dc91c6e03de1e7bb7bb8879445eb0c8a43dd\"},\"contracts/energy/interfaces/IZirconEnergyRevenue.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface IZirconEnergyRevenue {\\n    function initialize(address _pair, address _tokenA, address _tokenB, address energy0, address energy1, address pylon0, address pylon1) external;\\n    function calculate() external;\\n}\\n\",\"keccak256\":\"0x2868bbf0cd153241d0a7783b585bd8d55eea76e0505c4a77c8a2af77a2ed5e0c\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Uniswap {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x76866491759a6f069ddc030d52df08d4105a8bcef0e3330dee261cf7ee049b1a\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x70536527029cfe20ea8480101a8a2f9b7730e769c8427054c4e216f6a973f89e\"},\"contracts/interfaces/IZirconPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IZirconPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function energyRevenueAddress() external pure returns (address);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function burnOneSide(address to, bool isReserve0) external returns (uint amount);\\n    function mintOneSide(address to, bool isReserve0) external returns (uint liquidity, uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function tryLock() external;\\n\\n    function initialize(address, address, address) external;\\n}\\n\",\"keccak256\":\"0x613c91ef0eb7a0a24ec10354baee24d9e98040316999dc208cd57c7cb0843ace\"},\"contracts/interfaces/IZirconPoolToken.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IZirconPoolToken {\\n    function factory() external view returns (address);\\n    function isAnchor() external view returns (bool);\\n    function token() external view returns (address);\\n    function pair() external view returns (address);\\n    function pylon() external view returns (address);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    function initialize(address _token0, address _pair, address _pylon, bool _isAnchor) external;\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa5434d77bbd625e666241787ed6fee8198d36766ea5bd6f9cf66001844640db5\"},\"contracts/interfaces/IZirconPylon.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IZirconPylon {\\n\\n    function initialized() external view returns (uint);\\n    function anchorPoolTokenAddress() external view returns (address);\\n    function floatPoolTokenAddress() external view returns (address);\\n    function getSyncReserves() external view returns  (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    // Called once by the factory at time of deployment\\n    // @_floatPoolToken -> Contains Address Of Float PT\\n    // @_anchorPoolToken -> Contains Address Of Anchor PT\\n    // @token0 -> Float token\\n    // @token1 -> Anchor token\\n    function initialize(address, address, address, address, address, address, address) external;\\n    // On init pylon we have to handle two cases\\n    // The first case is when we initialize the pair through the pylon\\n    // And the second one is when initialize the pylon with a pair al ready existing\\n    function initPylon(address _to) external returns (uint floatLiquidity, uint anchorLiquidity);\\n    // External Function called to mint pool Token\\n    // Liquidity have to be sent before\\n    function mintPoolTokens(address to, bool isAnchor) external returns (uint liquidity);\\n    function mintAsync100(address to, bool isAnchor) external returns (uint liquidity);\\n    function mintAsync(address to, bool shouldMintAnchor) external returns (uint liquidity);\\n    // Burn Async send both tokens 50-50\\n    // Liquidity has to be sent before\\n    function burnAsync(address _to, bool _isAnchor) external returns (uint amount0, uint amount1);\\n    // Burn send liquidity back to user burning Pool tokens\\n    // The function first uses the reserves of the Pylon\\n    // If not enough reserves it burns The Pool Tokens of the pylon\\n    function burn(address _to, bool _isAnchor) external returns (uint amount);\\n}\\n\",\"keccak256\":\"0x7fb5df7eedf8773def6c767762ecdce6c36c07b4a0cfbd89e1bd5a05b6534882\"},\"contracts/interfaces/IZirconPylonFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IZirconPylonFactory {\\n    function maximumPercentageSync() external view returns (uint);\\n    function dynamicFeePercentage() external view returns (uint);\\n\\n    function allPylons(uint p) external view returns (address);\\n    function getPylon(address tokenA, address tokenB) external view returns (address pair);\\n    function factory() external view returns (address);\\n    function energyFactory() external view returns (address);\\n    event PylonCreated(address indexed token0, address indexed token1, address poolToken0, address poolToken1, address pylon, address pair);\\n    function allPylonsLength() external view returns (uint);\\n    function pylonCodeHash() external pure returns (bytes32);\\n    // Adding Pylon\\n    // First Token is always the Float and the second one is the Anchor\\n    function addPylon(address _pairAddress, address _tokenA, address _tokenB) external returns (address pylonAddress);\\n}\\n\",\"keccak256\":\"0x838b712ce3eddeb87eb45349679cc3f6452e57ec28adce80eccf102a05ef0ac3\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\n// a library for performing various math operations\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        z = x > y ? x : y;\\n    }\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61c3f60a7c20c5f1a38bc5c4882b4b3f4bf68f08211a7be9e03fc203d749aa70\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xc274a953581254f283cdf1a3da0cf400ed427c3f88d7564174dfacc86c5c4c58\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1ce089a59dbf0939611d747e877d0ef47659a1bd78c1e1414400c8d68b5c6b\"},\"contracts/libraries/ZirconLibrary.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary ZirconLibrary {\\n    using SafeMath for uint256;\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n\\n    // Same Function as Uniswap Library, used here for incompatible solidity versions\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // TODO: check getAmountsOut function of v2 library, they use a slightly different formula\\n    // This function takes two variables and look at the maximum possible with the ration given by the reserves\\n    // @pR0, @pR1 the pair reserves\\n    // @b0, @b1 the balances to calculate\\n    function _getMaximum(uint _reserve0, uint _reserve1, uint _b0, uint _b1) pure internal returns (uint maxX, uint maxY)  {\\n\\n        //Expresses b1 in units of reserve0\\n        uint px = _reserve0.mul(_b1)/_reserve1;\\n\\n        if (px > _b0) {\\n            maxX = _b0;\\n            maxY = _b0.mul(_reserve1)/_reserve0; //b0 in units of reserve1\\n        } else {\\n            maxX = px; //max is b1 but in reserve0 units\\n            maxY = _b1;\\n        }\\n    }\\n\\n\\n    // @notice This function converts amount, specifying which tranch uses with @isAnchor, to pool token share\\n    // @_amount is the quantity to convert\\n    // @_totalSupply is the supply of the pt's tranch\\n    // @reserve0, @_gamma, @vab are the variables needed to the calculation of the amount\\n    function calculatePTU(bool _isAnchor, uint _amount, uint _totalSupply, uint _reserve, uint _reservePylon, uint _gamma, uint _vab) pure internal returns (uint liquidity){\\n        if (_isAnchor) {\\n            liquidity = _amount.mul(_totalSupply)/_vab;\\n        }else {\\n            uint numerator = _amount.mul(_totalSupply);\\n            uint resTranslated = _reserve.mul(_gamma).mul(2)/1e18;\\n            uint denominator = (_reservePylon.add(resTranslated));\\n\\n            liquidity = (numerator/denominator);\\n        }\\n    }\\n\\n    // @notice This function converts pool token share, specifying which tranches with @isAnchor, to token amount\\n    // @_ptuAmount is the quantity to convert\\n    // @_totalSupply is the supply of the pt of the tranches\\n    // @reserve0, @_gamma, @vab are the variables needed to the calculation of the amount\\n    function calculatePTUToAmount(bool _isAnchor, uint _ptuAmount, uint _totalSupply, uint _reserve0, uint _reservePylon0, uint _gamma, uint _vab) pure internal returns (uint amount) {\\n        if (_isAnchor) {\\n            amount = _vab.mul(_ptuAmount)/_totalSupply;\\n        } else {\\n            amount = (((_reserve0.mul(_gamma).mul(2)/1e18).add(_reservePylon0)).mul(_ptuAmount))/_totalSupply;\\n        }\\n    }\\n\\n    function slashLiabilityOmega(uint tpvAnchorTranslated, uint anchorReserve, uint gammaMulDecimals, uint virtualAnchorBalance) view internal returns (uint omegaMulDecimals) {\\n        //Omega is the \\\"survival factor\\\" i.e how much of the anchor balance survives slashing and can be withdrawn.\\n        //It's applied to the user's liquidity tokens to avoid changing other core functions.\\n        //This adjustment is only used for share calculations, the full amount of tokens is removed.\\n        omegaMulDecimals = ((1e18 - gammaMulDecimals).mul(tpvAnchorTranslated))/(virtualAnchorBalance.sub(anchorReserve));\\n    }\\n}\\n\",\"keccak256\":\"0x09814493dd06f595101c59dbc59faf492ab71f13564b64d94abb7edb99cbeb7b\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615d48380380615d488339818101604052604081101561003357600080fd5b508051602090910151600280546001600160a01b039384166001600160a01b03199182161790915560038054939092169216919091179055600a60045560058055615cc5806100836000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806379281abe11610076578063a3ad52b81161005b578063a3ad52b81461015c578063afc3743f14610164578063c45a015514610181576100a3565b806379281abe1461011c578063966545e814610154576100a3565b80630e0f2973146100a857806317d1ff9f146100f25780636c0fb018146100fa57806379186af014610114575b600080fd5b6100d6600480360360408110156100be57600080fd5b506001600160a01b0381358116916020013516610189565b604080516001600160a01b039092168252519081900360200190f35b6100d66101ac565b6101026101bb565b60408051918252519081900360200190f35b6101026101c1565b6100d66004803603606081101561013257600080fd5b506001600160a01b0381358116916020810135821691604090910135166101c7565b610102610574565b6101026105a6565b6100d66004803603602081101561017a57600080fd5b50356105ac565b6100d66105d3565b60006020818152928152604080822090935290815220546001600160a01b031681565b6003546001600160a01b031681565b60015490565b60055481565b6000816001600160a01b0316836001600160a01b03161415610230576040805162461bcd60e51b815260206004820152601760248201527f5a463a204944454e544943414c5f414444524553534553000000000000000000604482015290519081900360640190fd5b6001600160a01b03838116600090815260208181526040808320868516845290915290205416156102a8576040805162461bcd60e51b815260206004820152601060248201527f5a463a2050594c4f4e5f45584953545300000000000000000000000000000000604482015290519081900360640190fd5b6102b38383866105e2565b905060006102c18483610671565b905060006102cf8484610671565b905060006102df8488888861070b565b600254604080517f358764760000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301528a8116604483015289811660648301528b8116608483015292831660a482015282841660c482015290519293509086169163358764769160e48082019260009290919082900301818387803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505060408051633fb3e5cd60e21b81526001600160a01b038a811660048301528b8116602483015288811660448301526000606483018190529251908816945063fecf973493506084808301939282900301818387803b1580156103f057600080fd5b505af1158015610404573d6000803e3d6000fd5b505060408051633fb3e5cd60e21b81526001600160a01b0389811660048301528b811660248301528881166044830152600160648301529151918616935063fecf9734925060848082019260009290919082900301818387803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b5050604080516001600160a01b0387811682528681166020830152888116828401528b811660608301529151828a169450918a1692507fab83557b3a718996d408afe08287d09bafed3590c7ae61a430d518d3199d4590919081900360800190a35050506001600160a01b03928316600090815260208181526040808320948616835293905291822080549382167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516811790915560018054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69092018054909316909117909155919050565b600060405180602001610586906107c3565b6020820181038252601f19601f8201166040525080519060200120905090565b60045481565b600181815481106105b957fe5b6000918252602090912001546001600160a01b0316905081565b6002546001600160a01b031681565b60006060604051806020016105f6906107c3565b601f1982820381018352601f9091011660408181526bffffffffffffffffffffffff19606089811b821660208581019190915289821b831660348601529088901b90911660488401528151603c818503018152605c909301909152815191810191909120825192935091829184016000f59695505050505050565b6000606060405180602001610685906107d0565b6020820181038252601f19601f8201166040525090506000848460405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f595945050505050565b600354604080517f9172e7840000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301528581166044830152848116606483015291516000939290921691639172e7849160848082019260209290919082900301818787803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d60208110156107b857600080fd5b505195945050505050565b614504806107de83390190565b610faf80614ce28339019056fe6080604052662386f26fc10000601155600060125534801561002057600080fd5b506000805460ff19166001179055600480546001600160a01b031916331790556144b58061004f6000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638ffa3236116100ee578063a8b0898211610097578063ba9a7a5611610071578063ba9a7a56146103d2578063c561cf4f146103da578063e845d4e514610421578063f29401c414610429576101a3565b8063a8b089821461036e578063ac9370f314610376578063ba7b3dea146103a4576101a3565b80639892c7f1116100c85780639892c7f1146103565780639ab9f3411461035e578063a3ad52b814610366576101a3565b80638ffa32361461032a578063966dae0e1461034657806397ed64db1461034e576101a3565b806333cdde4e1161015057806379186af01161012a57806379186af0146102ec57806387d9b853146102f45780638d470e22146102fc576101a3565b806333cdde4e146102365780633587647614610264578063402d82c1146102be576101a3565b8063158ef93e11610181578063158ef93e1461020c578063192b65d81461022657806322e489a41461022e576101a3565b806306e53aec146101a857806308acbe82146101cc5780630a22d5f3146101d4575b600080fd5b6101b061044f565b604080516001600160a01b039092168252519081900360200190f35b6101b061045e565b6101dc61046d565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b610214610497565b60408051918252519081900360200190f35b61021461049d565b6101b06104a3565b6102146004803603604081101561024c57600080fd5b506001600160a01b03813516906020013515156104b2565b6102bc600480360360e081101561027a57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c090910135166108ed565b005b6102c6610c2e565b604080516001600160a01b03938416815291909216602082015281519081900390910190f35b610214610c44565b610214610c4a565b6102146004803603604081101561031257600080fd5b506001600160a01b0381351690602001351515610c50565b610332610efa565b604080519115158252519081900360200190f35b6101b0610f0a565b610214610f19565b6101b0610f1f565b610214610f2e565b610214610f34565b6101b0610f3a565b6102146004803603604081101561038c57600080fd5b506001600160a01b0381351690602001351515610f49565b610214600480360360408110156103ba57600080fd5b506001600160a01b03813516906020013515156113f4565b610214611862565b610408600480360360408110156103f057600080fd5b506001600160a01b0381351690602001351515611868565b6040805192835260208301919091528051918290030190f35b610214611d7c565b6104086004803603602081101561043f57600080fd5b50356001600160a01b0316611d82565b6006546001600160a01b031681565b6008546001600160a01b031681565b6010546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60125481565b60095481565b6007546001600160a01b031681565b6000805460ff1661050a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff19169055601254600114610561576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b610569612121565b600082610581576006546001600160a01b031661058e565b6007546001600160a01b03165b905060008061059b61046d565b50600154604080516370a0823160e01b81523060048201529051939550919350600092839283926001600160a01b0316916370a0823191602480820192602092909190829003018186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d602081101561061c57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561066f57600080fd5b505afa158015610683573d6000803e3d6000fd5b505050506040513d602081101561069957600080fd5b505190506106b6826001600160701b03881663ffffffff6124be16565b93506106d1816001600160701b03871663ffffffff6124be16565b92506106de84600061251c565b93506106eb83600161251c565b92506000806106fc86868d8c6126ad565b915091508199508a1561071657600980548201905561071f565b600a8054820190555b505050506000811180156107335750600082115b61076e5760405162461bcd60e51b81526004018080602001828103825260218152602001806143ca6021913960400191505060405180910390fd5b60015460035461078b916001600160a01b039081169116846128a9565b6002546003546107a8916001600160a01b039081169116836128a9565b600354604080516335313c2160e11b815230600482015290516001600160a01b0390921691636a627842916024808201926020929091908290030181600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050506040513d602081101561081f57600080fd5b5050604080516340c10f1960e01b81526001600160a01b038a81166004830152602482018990529151918716916340c10f199160448082019260009290919082900301818387803b15801561087357600080fd5b505af1158015610887573d6000803e3d6000fd5b5050604080513381526020810186905280820185905290517f9a36e9f82fd3ab4ec26a87598c0f7f4519b7895fa6a0bca1968b486ee019b0829350908190036060019150a16108d4612a55565b50506000805460ff191660011790555091949350505050565b60005460ff16610944576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff191690556004546001600160a01b031633146109ad576040805162461bcd60e51b815260206004820152601160248201527f5a6972636f6e3a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b03808a1673ffffffffffffffffffffffffffffffffffffffff19928316179092556007805489841690831617905560038054868416921682179055604080517f0dfe1681000000000000000000000000000000000000000000000000000000008152905192881692630dfe168191600481810192602092909190829003018186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d6020811015610a7057600080fd5b5051600880546040805180820182526001600160a01b038b81168083528b821660209384018190526001805473ffffffffffffffffffffffffffffffffffffffff19908116909317905560028054831690911790556005805482168b84161790557fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90941695811696909614600160a01b0294909417909116858516179091556004805482517fa3ad52b8000000000000000000000000000000000000000000000000000000008152925194169363a3ad52b89383830193909290829003018186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d6020811015610b8957600080fd5b5051600b5560048054604080517f79186af000000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216926379186af0928282019260209290829003018186803b158015610be957600080fd5b505afa158015610bfd573d6000803e3d6000fd5b505050506040513d6020811015610c1357600080fd5b5051600c5550506000805460ff191660011790555050505050565b6001546002546001600160a01b03918216911682565b600c5481565b600e5481565b6000601254600114610c9f576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b60005460ff16610cf6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff19169055610d08612121565b600080610d1361046d565b5091509150600080610d26600080612b21565b915091506000808715610dfa57600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d6020811015610da857600080fd5b50519050610dc5816001600160701b03881663ffffffff6124be16565b600754909350610dee9084906001600160701b0389169087906001600160a01b03168e8e612b66565b9098509150610ebc9050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d6020811015610e6f57600080fd5b50519050610e8c816001600160701b03891663ffffffff6124be16565b600654909350610eb59084906001600160701b038a169088906001600160a01b03168e8e612b66565b9098509150505b8715610ecf576009805482019055610ed8565b600a8054820190555b610ee0612dea565b50506000805460ff19166001179055509295945050505050565b600854600160a01b900460ff1681565b6004546001600160a01b031681565b600d5481565b6005546001600160a01b031681565b600a5481565b600b5481565b6003546001600160a01b031681565b6000805460ff16610fa1576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff19169055601254600114610ff8576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b611000612121565b60008061100b61046d565b5091509150600084156110b257600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561106357600080fd5b505afa158015611077573d6000803e3d6000fd5b505050506040513d602081101561108d57600080fd5b505190506110aa816001600160701b03851663ffffffff6124be16565b915050611148565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156110fd57600080fd5b505afa158015611111573d6000803e3d6000fd5b505050506040513d602081101561112757600080fd5b50519050611144816001600160701b03861663ffffffff6124be16565b9150505b611152818661251c565b9050600081116111a9576040805162461bcd60e51b815260206004820152601760248201527f5a503a20494e53554646494349454e545f414d4f554e54000000000000000000604482015290519081900360640190fd5b6111e1856111c2576001546001600160a01b03166111cf565b6002546001600160a01b03165b6003546001600160a01b0316836128a9565b6000806111ee83886130a6565b9150915060008061122384848b8c611211576006546001600160a01b031661121e565b6007546001600160a01b03165b6126ad565b91509150819750881561123d576009805482019055611246565b600a8054820190555b6003546008546001600160a01b039091169063432275e6903090600160a01b900460ff16611274578b611277565b8b155b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018215151515815260200192505050606060405180830381600087803b1580156112ca57600080fd5b505af11580156112de573d6000803e3d6000fd5b505050506040513d60608110156112f457600080fd5b5089905061130d576006546001600160a01b031661131a565b6007546001600160a01b03165b6001600160a01b03166340c10f198b8a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505050505050505061139d612a55565b60408051338152602081018390528615158183015290517f1889e9c3cb9a926b5ab9da8b1f34e8883f1c84e43a61525a2551c32d779213279181900360600190a150506000805460ff191660011790555092915050565b6000805460ff1661144c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff191690556012546001146114a3576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b6114ab612121565b6000826114c3576006546001600160a01b03166114d0565b6007546001600160a01b03165b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d602081101561154657600080fd5b505190508061159c576040805162461bcd60e51b815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d757600080fd5b505afa1580156115eb573d6000803e3d6000fd5b505050506040513d602081101561160157600080fd5b5051600354909150869086906001600160a01b0316600080611624848789613123565b91509150611632818561251c565b98506116618461164d576001546001600160a01b031661165a565b6002546001600160a01b03165b868b6128a9565b8682101561178d57600061167b888463ffffffff6124be16565b9050600061168a86838a6131c3565b90506116958161342b565b9050600086156116ae576116a882613510565b90925090505b6116b98687846128a9565b600854600090600160a01b900460ff166116d357876116d6565b87155b604080516302ce510960e41b81526001600160a01b038c8116600483015283151560248301529151929350600092918a1691632ce510909160448082019260209290919082900301818787803b15801561172f57600080fd5b505af1158015611743573d6000803e3d6000fd5b505050506040513d602081101561175957600080fd5b50519d8e019d905061178782611770576000611772565b815b8361177d5782611780565b60005b858d6135d5565b50505050505b60408051632770a7eb60e21b81523060048201526024810189905290516001600160a01b038a1691639dc29fac91604480830192600092919082900301818387803b1580156117db57600080fd5b505af11580156117ef573d6000803e3d6000fd5b50505050505050505061180382828761371a565b61180b612dea565b60408051338152602081018690528615158183015290517f5cf7281eb36e25a92ffd0cff3089777ca0cb41d28e8c7158c234b1eae9a07ed29181900360600190a150506000805460ff191660011790555092915050565b6103e881565b60008054819060ff166118c2576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff19169055601254600114611919576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b611921612121565b600083611939576006546001600160a01b0316611946565b6007546001600160a01b03165b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561199257600080fd5b505afa1580156119a6573d6000803e3d6000fd5b505050506040513d60208110156119bc57600080fd5b50519050806119fc5760405162461bcd60e51b81526004018080602001828103825260218152602001806143a96021913960400191505060405180910390fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d6020811015611a6157600080fd5b5051905060008080611a7161046d565b506001600160701b031691506001600160701b031691506000611a95600080612b21565b50905060008a611b0557611ae684670de0b6b3a7640000611ad2600d54611ac660028861377d90919063ffffffff16565b9063ffffffff61377d16565b81611ad957fe5b049063ffffffff6137e916565b611af6878663ffffffff61377d16565b81611afd57fe5b048603611b23565b600954611b18878563ffffffff61377d16565b81611b1f57fe5b0486035b9050808710611b79576040805162461bcd60e51b815260206004820152601d60248201527f5a503a204578636565646564204275726e204173796e63206c696d6974000000604482015290519081900360640190fd5b506000611b878b88886131c3565b9050611b928161342b565b90508a15611ba857611ba381613510565b955090505b600354611bbf906001600160a01b031680836128a9565b5050600354604080517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301528251600096508695509316926389afcb449260248084019391929182900301818787803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b505050506040513d6040811015611c5557600080fd5b5080516020909101516008549193509150600160a01b900460ff16611c7a5780611c7c565b815b600854909850600160a01b900460ff16611c965781611c98565b805b9650611ca68888858d6135d5565b60408051632770a7eb60e21b81523060048201526024810187905290516001600160a01b03881691639dc29fac91604480830192600092919082900301818387803b158015611cf457600080fd5b505af1158015611d08573d6000803e3d6000fd5b50505050611d1785858b61371a565b611d1f612dea565b60408051338152602081018a905280820189905290517fb83dbb1f0386f1b6d6f534f325d617e3f96f2971cca29021702094328c1cb70c9181900360600190a150506000805460ff19166001179055509396929550919350505050565b600f5481565b60008054819060ff16611ddc576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff1916905560125415611e3b576040805162461bcd60e51b815260206004820152601360248201527f416c726561647920496e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e8657600080fd5b505afa158015611e9a573d6000803e3d6000fd5b505050506040513d6020811015611eb057600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b505190508115801590611f405750600081115b611f91576040805162461bcd60e51b815260206004820152601860248201527f5a503a204e6f7420656e6f756768206c69717569646974790000000000000000604482015290519081900360640190fd5b600080611f9c613841565b91509150611fd1612710611fbb600c548761377d90919063ffffffff16565b81611fc257fe5b8691900463ffffffff6124be16565b600a55600c546120069061271090611ff090869063ffffffff61377d16565b81611ff757fe5b8591900463ffffffff6124be16565b6009556001600160701b0382161580159061202a57506000816001600160701b0316115b15612096576000816001600160701b0316612059846001600160701b031660095461377d90919063ffffffff16565b8161206057fe5b04905061207881600a546137e990919063ffffffff16565b600a54670de0b6b3a7640000028161208c57fe5b04600d55506120a3565b6706f05b59d3b20000600d555b6007546120cb9084906000906001600160701b038516906001600160a01b03168b6001612b66565b506006549095506120f69085906000906001600160701b038616906001600160a01b03168b83612b66565b509550612101612dea565b5050600160128190556000805460ff191690911790555091939092509050565b6003546001600160a01b0316331461219c57600360009054906101000a90046001600160a01b03166001600160a01b03166311816b046040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561218357600080fd5b505af1158015612197573d6000803e3d6000fd5b505050505b6000806121a7613841565b915091506000806121b661046d565b50909250905060006121da6001600160701b0386811690861663ffffffff61377d16565b9050600f546000141580156121f757506001600160701b03851615155b801561220b57506001600160701b03841615155b156124b757600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561225557600080fd5b505afa158015612269573d6000803e3d6000fd5b505050506040513d602081101561227f57600080fd5b5051905060006122a96122a26001600160701b038816600263ffffffff61377d16565b600061390a565b905060006122ca6122a26001600160701b038a16600263ffffffff61377d16565b90506000670de0b6b3a764000090506000612318600f546122ea88613a37565b02866122f7600e54613a37565b02670de0b6b3a7640000028161230957fe5b8491900463ffffffff6124be16565b90506000670de0b6b3a7640000612335868463ffffffff61377d16565b8161233c57fe5b0490506000670de0b6b3a764000061235a868563ffffffff61377d16565b8161236157fe5b049050670de0b6b3a764000061238c600d54670de0b6b3a7640000038461377d90919063ffffffff16565b8161239357fe5b60098054929091049091019055600d54670de0b6b3a7640000906123b7908361377d565b816123be57fe5b600a805492909104909101905560095460028704906123ec906001600160701b038c1663ffffffff6124be16565b1015612434576009548690612410906001600160701b038c1663ffffffff6124be16565b670de0b6b3a7640000028161242157fe5b04670de0b6b3a764000003600d55612468565b600a548590612452906001600160701b038d1663ffffffff6124be16565b670de0b6b3a7640000028161246357fe5b04600d555b600954600a54600d5460408051938452602084019290925282820152517f54964c70825f65946c2e16cd62d98784e0536cf3d54b15ce1845f37f325945d29181900360600190a1505050505050505b5050505050565b80820382811115612516576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b600080612710612537600c548661377d90919063ffffffff16565b8161253e57fe5b049050821561256957600254600854612564916001600160a01b039081169116836128a9565b612695565b600154600354612586916001600160a01b039081169116836128a9565b600080612591613841565b9150915060006125b484846001600160701b0316846001600160701b0316613a89565b6003546008549192506001600160a01b03169063022c0d9f90600160a01b900460ff166125e157826125e4565b60005b600854600160a01b900460ff166125fc5760006125fe565b835b600854604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152600481019490945260248401929092526001600160a01b0316604483015260806064830152600060848301819052905160c48084019382900301818387803b15801561267957600080fd5b505af115801561268d573d6000803e3d6000fd5b505050505050505b6126a5848263ffffffff6124be16565b949350505050565b6000806000806126bb613841565b915091506000806126ca61046d565b509150915087156127bd57612721846001600160701b03166127036002611ac6876001600160701b03168f61377d90919063ffffffff16565b8161270a57fe5b0461271c8b600263ffffffff61377d16565b613b79565b94506127b68886896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561276157600080fd5b505afa158015612775573d6000803e3d6000fd5b505050506040513d602081101561278b57600080fd5b50516127a16001600160701b038816600061390a565b856001600160701b0316600d54600954613b8f565b955061289c565b612804836001600160701b03166127eb6002611ac6886001600160701b03168e61377d90919063ffffffff16565b816127f257fe5b0461271c8c600263ffffffff61377d16565b94506128998886896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561284457600080fd5b505afa158015612858573d6000803e3d6000fd5b505050506040513d602081101561286e57600080fd5b50516128846001600160701b038916600061390a565b866001600160701b0316600d54600954613b8f565b95505b5050505094509492505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061296f5780518252601f199092019160209182019101612950565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146129d1576040519150601f19603f3d011682016040523d82523d6000602084013e6129d6565b606091505b5091509150818015612a04575080511580612a045750808060200190516020811015612a0157600080fd5b50515b6124b7576040805162461bcd60e51b815260206004820152601d60248201527f5a6972636f6e2050796c6f6e3a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b600080612a60613841565b91509150600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab257600080fd5b505afa158015612ac6573d6000803e3d6000fd5b505050506040513d6020811015612adc57600080fd5b5051600f55612afd6001600160701b0383811690831663ffffffff61377d16565b600e555050601080546001600160e01b0316600160e01b4263ffffffff1602179055565b600080600080612b2f613841565b91509150612b46826001600160701b03168761390a565b9350612b5b816001600160701b03168661390a565b925050509250929050565b60008060008811612bbe576040805162461bcd60e51b815260206004820152601860248201527f5a503a204e6f7420456e6f756768204c69717569646974790000000000000000604482015290519081900360640190fd5b6000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bf957600080fd5b505afa158015612c0d573d6000803e3d6000fd5b505050506040513d6020811015612c2357600080fd5b5051600d546009549192509082612d0457604080516340c10f1960e01b81526000600482018190526103e8602483015291516001600160a01b038b16926340c10f19926044808201939182900301818387803b158015612c8257600080fd5b505af1158015612c96573d6000803e3d6000fd5b505050508515612cb957612cb28b6103e863ffffffff6124be16565b9450612cff565b612cfc6103e8612cd084600263ffffffff61377d16565b612ce88e670de0b6b3a764000063ffffffff61377d16565b81612cef57fe5b049063ffffffff6124be16565b94505b612d22565b612d0e8b8761251c565b9350612d1f8685858c8e8787613b8f565b94505b5050856001600160a01b03166340c10f1986856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612d8457600080fd5b505af1158015612d98573d6000803e3d6000fd5b505060408051338152602081018690528715158183015290517f19d363807bf5ba06f3320318d009a9851c28f799660016f386c9960478c46ea29350908190036060019150a150965096945050505050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612e3557600080fd5b505afa158015612e49573d6000803e3d6000fd5b505050506040513d6020811015612e5f57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612eb257600080fd5b505afa158015612ec6573d6000803e3d6000fd5b505050506040513d6020811015612edc57600080fd5b50519050600080612eed8484612b21565b9150915060006064612f0a600b548561377d90919063ffffffff16565b81612f1157fe5b04905060006064612f2d600b548561377d90919063ffffffff16565b81612f3457fe5b04905060026001600160701b038316046001600160701b031686118015612f6f575060026001600160701b038216046001600160701b031685115b1561308a57600080612fbd8686612fa460026001600160701b0389165b8d916001600160701b0391041663ffffffff6124be16565b612fb860026001600160701b038916612f8c565b613c24565b9150915081600014612fe657600154600354612fe6916001600160a01b039081169116846128a9565b801561300957600254600354613009916001600160a01b039081169116836128a9565b600354604080516335313c2160e11b815230600482015290516001600160a01b0390921691636a627842916024808201926020929091908290030181600087803b15801561305657600080fd5b505af115801561306a573d6000803e3d6000fd5b505050506040513d602081101561308057600080fd5b5050960395909403935b61309686868484613c7f565b61309e612a55565b505050505050565b6000806000806130b4613841565b9150915084156130e3576130de60028704826001600160701b0316846001600160701b0316613a89565b6130e8565b600286045b9350846131145761310f60028704836001600160701b0316836001600160701b0316613a89565b612b5b565b60028604925050509250929050565b600d546009546000918291826131398180612b21565b50905060008061314761046d565b509150915060008a613159578261315b565b815b6001600160701b0316905060008b6131735784613187565b601054600160701b90046001600160701b03165b90506131988c838d84868c8c613b8f565b98506131b28c6131a88b8d613b79565b8d84868c8c613f3e565b975050505050505050935093915050565b60008060006131d3600180612b21565b915091506000806131e261046d565b5091509150600088156132f75761320084600263ffffffff61377d16565b6009546132a390613220906001600160701b03861663ffffffff6124be16565b600354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561326b57600080fd5b505afa15801561327f573d6000803e3d6000fd5b505050506040513d602081101561329557600080fd5b50519063ffffffff61377d16565b816132aa57fe5b0490506132f06132c185600263ffffffff61377d16565b6132da836001600160701b03861663ffffffff61377d16565b816132e157fe5b8391900463ffffffff6137e916565b90506133c5565b600354604080516370a0823160e01b81523060048201529051670de0b6b3a76400009261338b926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561335057600080fd5b505afa158015613364573d6000803e3d6000fd5b505050506040513d602081101561337a57600080fd5b5051600d549063ffffffff61377d16565b8161339257fe5b0490506133c26133a986600263ffffffff61377d16565b6132da836001600160701b03871663ffffffff61377d16565b90505b866133d6898363ffffffff61377d16565b816133dd57fe5b0495506000861161341f5760405162461bcd60e51b81526004018080602001828103825260218152602001806144356021913960400191505060405180910390fd5b50505050509392505050565b600080612710613446600c548561377d90919063ffffffff16565b8161344d57fe5b6003549190049150613469906001600160a01b031680836128a9565b600354600854604080516302ce510960e41b81526001600160a01b038084166004830152600160a01b90930460ff1615602482015290519190921691632ce510909160448083019260209291908290030181600087803b1580156134cc57600080fd5b505af11580156134e0573d6000803e3d6000fd5b505050506040513d60208110156134f657600080fd5b506135099050838263ffffffff6124be16565b9392505050565b600080600061351d61046d565b506001600160701b03169150506000613537600080612b21565b91506000905061355d61355183600263ffffffff61377d16565b84600d54600954613f90565b905061359e6040518060400160405280600b81526020017f6f6d65676120736c61736800000000000000000000000000000000000000000081525082613fce565b6135a88187614099565b9350670de0b6b3a76400006135c3828863ffffffff61377d16565b816135ca57fe5b049450505050915091565b811561371457838315613615576000806135ed613841565b6001600160701b031691506001600160701b0316915061360e868383613a89565b8301925050505b600254600854604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561366957600080fd5b505afa15801561367d573d6000803e3d6000fd5b505050506040513d602081101561369357600080fd5b5051905060006136a9838663ffffffff61377d16565b9050808211156136d1576002546008546136d1916001600160a01b03908116911686846141cd565b6137106040518060400160405280601681526020017f53656e64696e6720736c617368656420546f6b656e730000000000000000000081525082613fce565b5050505b50505050565b801561374e576009548290613735908563ffffffff61377d16565b8161373c57fe5b60098054929091049091039055613778565b600a548290613763908563ffffffff61377d16565b8161376a57fe5b600a80549290910490910390555b505050565b60008115806137985750508082028282828161379557fe5b04145b612516576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015612516576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b600080600080600360009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561389557600080fd5b505afa1580156138a9573d6000803e3d6000fd5b505050506040513d60608110156138bf57600080fd5b5080516020909101516008549193509150600160a01b900460ff166138e457806138e6565b815b600854909450600160a01b900460ff166139005781613902565b805b925050509091565b600354604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561395a57600080fd5b505afa15801561396e573d6000803e3d6000fd5b505050506040513d602081101561398457600080fd5b5051600354604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156139d157600080fd5b505afa1580156139e5573d6000803e3d6000fd5b505050506040513d60208110156139fb57600080fd5b50519050801580613a0a575081155b613a2c5780613a1f868463ffffffff61377d16565b81613a2657fe5b04613a2e565b835b95945050505050565b60006003821115613a7a575080600160028204015b81811015613a7457809150600281828581613a6357fe5b040181613a6c57fe5b049050613a4c565b50613a84565b8115613a84575060015b919050565b6000808411613ac95760405162461bcd60e51b815260040180806020018281038252602b815260200180614456602b913960400191505060405180910390fd5b600083118015613ad95750600082115b613b145760405162461bcd60e51b81526004018080602001828103825260288152602001806143eb6028913960400191505060405180910390fd5b6000613b28856103e563ffffffff61377d16565b90506000613b3c828563ffffffff61377d16565b90506000613b6283613b56886103e863ffffffff61377d16565b9063ffffffff6137e916565b9050808281613b6d57fe5b04979650505050505050565b6000818310613b885781613509565b5090919050565b60008715613bb75781613ba8888863ffffffff61377d16565b81613baf57fe5b049050613c19565b6000613bc9888863ffffffff61377d16565b90506000670de0b6b3a7640000613beb6002611ac68a8963ffffffff61377d16565b81613bf257fe5b0490506000613c07878363ffffffff6137e916565b9050808381613c1257fe5b0493505050505b979650505050505050565b6000808085613c39888663ffffffff61377d16565b81613c4057fe5b04905084811115613c6e5784925086613c5f848863ffffffff61377d16565b81613c6657fe5b049150613c75565b8092508391505b5094509492505050565b60006001600160701b038316851115613d7d57600154600354613cc7916001600160a01b039081169116613cc2886001600160701b03881663ffffffff6124be16565b6128a9565b600354600854604080516321913af360e11b8152306004820152600160a01b90920460ff1615156024830152516001600160a01b039092169163432275e6916044808201926060929091908290030181600087803b158015613d2857600080fd5b505af1158015613d3c573d6000803e3d6000fd5b505050506040513d6060811015613d5257600080fd5b5051601080546dffffffffffffffffffffffffffff19166001600160701b0386161790559050613da0565b601080546dffffffffffffffffffffffffffff19166001600160701b0387161790555b83826001600160701b03161015613ead57600254600354613de1916001600160a01b039081169116613cc2876001600160701b03871663ffffffff6124be16565b600354600854604080516321913af360e11b8152306004820152600160a01b90920460ff16156024830152516001600160a01b039092169163432275e6916044808201926060929091908290030181600087803b158015613e4157600080fd5b505af1158015613e55573d6000803e3d6000fd5b505050506040513d6060811015613e6b57600080fd5b5051601080547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b6001600160701b038616021790559050613ee7565b601080547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b6001600160701b038716021790555b601054604080516001600160701b038084168252600160701b909304909216602083015280517f1d96001f313f6446e46c7776b79d231589555627a46fa2388f3220937fc79e519281900390910190a15050505050565b60008715613f575785613ba8838963ffffffff61377d16565b85613f7c88611ac687670de0b6b3a7640000611ad26002848d8c63ffffffff61377d16565b81613f8357fe5b0498975050505050505050565b6000613fa2828563ffffffff6124be16565b613fbd670de0b6b3a76400008590038763ffffffff61377d16565b81613fc457fe5b0495945050505050565b61409582826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614019578181015183820152602001614001565b50505050905090810190601f1680156140465780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052935061436292505050565b5050565b6000670de0b6b3a76400008310156141c4576000670de0b6b3a76400006140c88486830363ffffffff61377d16565b816140cf57fe5b600354600854604080516370a0823160e01b81526001600160a01b03928316600482015290519490930494506000939116916370a08231916024808301926020929190829003018186803b15801561412657600080fd5b505afa15801561413a573d6000803e3d6000fd5b505050506040513d602081101561415057600080fd5b50519050808210156141835760035460085461417a916001600160a01b03908116911681856141cd565b600092506141bd565b6003546008546141a1916001600160a01b03908116911681846141cd565b836141b2838363ffffffff6124be16565b816141b957fe5b0492505b5050612516565b50600092915050565b60006060856001600160a01b0316604051806060016040528060258152602001614384602591398051602091820120604080516001600160a01b03808b166024830152891660448201526064808201899052825180830390910181526084909101825292830180516001600160e01b03167fffffffff00000000000000000000000000000000000000000000000000000000909316929092178252518251909182918083835b602083106142925780518252601f199092019160209182019101614273565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146142f4576040519150601f19603f3d011682016040523d82523d6000602084013e6142f9565b606091505b5091509150818015614327575080511580614327575080806020019051602081101561432457600080fd5b50515b61309e5760405162461bcd60e51b81526004018080602001828103825260228152602001806144136022913960400191505060405180910390fd5b80516a636f6e736f6c652e6c6f67602083016000808483855afa505050505056fe7472616e7366657246726f6d28616464726573732c616464726573732c75696e74323536295a503a204e6f7420656e6f756768206c697175696469747920696e7365727465645a6972636f6e50796c6f6e3a204e6f7420456e6f756768204c6971756964697479556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954595a6972636f6e2050796c6f6e3a205452414e534645525f46524f4d5f4641494c45445a503a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a265627a7a723158208fd402355f317f0446a6c94ab9b07f2a3288ef13be90b9b66d3302df23e49fa864736f6c634300051000326080604052600160095534801561001557600080fd5b506040514690806052610f5d823960408051918290036052018220828201825260068352652d34b931b7b760d11b6020938401528151808301835260018152603160f81b908401528151808401919091527f94c6df7cbb14f58e7ac6d9fa315f8346b33ef43dae2423c0e0e94673dd9e65ff818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060045550600780546001600160a01b03191633179055610e5c806101016000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80637ecebe00116100d8578063b89f59ea1161008c578063dd62ed3e11610066578063dd62ed3e1461041e578063fc0c546a1461044c578063fecf97341461045457610177565b8063b89f59ea146103bd578063c45a0155146103c5578063d505accf146103cd57610177565b80639dc29fac116100bd5780639dc29fac1461035d578063a8aa1b3114610389578063a9059cbb1461039157610177565b80637ecebe001461032f57806395d89b411461035557610177565b8063313ce5671161012f57806340c10f191161011457806340c10f19146102b757806346847794146102e557806370a082311461030957610177565b8063313ce567146102915780633644e515146102af57610177565b806318160ddd1161016057806318160ddd1461023957806323b872dd1461025357806330adf81f1461028957610177565b806306fdde031461017c578063095ea7b3146101f9575b600080fd5b610184610492565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101be5781810151838201526020016101a6565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102256004803603604081101561020f57600080fd5b506001600160a01b0381351690602001356104cb565b604080519115158252519081900360200190f35b6102416104e2565b60408051918252519081900360200190f35b6102256004803603606081101561026957600080fd5b506001600160a01b038135811691602081013590911690604001356104e8565b610241610582565b6102996105a6565b6040805160ff9092168252519081900360200190f35b6102416105ab565b6102e3600480360360408110156102cd57600080fd5b506001600160a01b0381351690602001356105b1565b005b6102ed61067f565b604080516001600160a01b039092168252519081900360200190f35b6102416004803603602081101561031f57600080fd5b50356001600160a01b031661068e565b6102416004803603602081101561034557600080fd5b50356001600160a01b03166106a0565b6101846106b2565b6102e36004803603604081101561037357600080fd5b506001600160a01b0381351690602001356106eb565b6102ed6107b0565b610225600480360360408110156103a757600080fd5b506001600160a01b0381351690602001356107bf565b6102256107cc565b6102ed6107dc565b6102e3600480360360e08110156103e357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356107eb565b6102416004803603604081101561043457600080fd5b506001600160a01b0381358116916020013516610a13565b6102ed610a30565b6102e36004803603608081101561046a57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515610a3f565b6040518060400160405280600681526020017f5a6972636f6e000000000000000000000000000000000000000000000000000081525081565b60006104d8338484610b27565b5060015b92915050565b60005481565b6001600160a01b03831660009081526002602090815260408083203384529091528120546000191461056d576001600160a01b0384166000908152600260209081526040808320338452909152902054610548908363ffffffff610b8916565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610578848484610be1565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60045481565b600954600114610608576040805162461bcd60e51b815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b60006009556008546001600160a01b0316331461066c576040805162461bcd60e51b815260206004820152601a60248201527f5a6972636f6e506f6f6c546f6b656e3a20464f5242494444454e000000000000604482015290519081900360640190fd5b6106768282610c9b565b50506001600955565b6008546001600160a01b031681565b60016020526000908152604090205481565b60036020526000908152604090205481565b6040518060400160405280600381526020017f5a5054000000000000000000000000000000000000000000000000000000000081525081565b600954600114610742576040805162461bcd60e51b815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b60006009556008546001600160a01b031633146107a6576040805162461bcd60e51b815260206004820152601a60248201527f5a6972636f6e506f6f6c546f6b656e3a20464f5242494444454e000000000000604482015290519081900360640190fd5b6106768282610d31565b6006546001600160a01b031681565b60006104d8338484610be1565b600654600160a01b900460ff1681565b6007546001600160a01b031681565b42841015610840576040805162461bcd60e51b815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b6004546001600160a01b0380891660008181526003602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015610976573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906109ac5750886001600160a01b0316816001600160a01b0316145b6109fd576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b610a08898989610b27565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b6005546001600160a01b031681565b6007546001600160a01b03163314610a9e576040805162461bcd60e51b815260206004820152601a60248201527f5a6972636f6e506f6f6c546f6b656e3a20464f5242494444454e000000000000604482015290519081900360640190fd5b600580546001600160a01b039586167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560068054921515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff95871693831693909317949094169190911790925560088054919093169116179055565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b808203828111156104dc576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040902054610c0a908263ffffffff610b8916565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610c3f908263ffffffff610dcf16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600054610cae908263ffffffff610dcf16565b60009081556001600160a01b038316815260016020526040902054610cd9908263ffffffff610dcf16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216600090815260016020526040902054610d5a908263ffffffff610b8916565b6001600160a01b03831660009081526001602052604081209190915554610d87908263ffffffff610b8916565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b808201828110156104dc576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfea265627a7a7231582097cfabbd5d0a98c07965e1555459c313940f9decd74fc1447a47d2c5abf7389464736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820cfe58f9aba0a1b9412824e5b131ed61c9188f1de03fbc56ff939eb0b6fe0de7064736f6c63430005100032",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5319,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "getPylon",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 5322,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "allPylons",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5324,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5326,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "energyFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5328,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "maximumPercentageSync",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5330,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "dynamicFeePercentage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
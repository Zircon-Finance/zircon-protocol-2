{
  "address": "0xe36f5fABDA5c5aF8e9aaD6b1371DfddE037aABE5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_energyFactory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolToken0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolToken1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pylon",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "PylonCreated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "addPylon",
      "outputs": [
        {
          "internalType": "address",
          "name": "pylonAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPylons",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPylonsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "deltaGammaMinFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "deltaGammaThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "energyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPylon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maximumPercentageSync",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "muUpdatePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pylonCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deltaGammaMinFee",
          "type": "uint256"
        }
      ],
      "name": "setDeltaGammaMinFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deltaGammaThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDeltaGammaThreshold",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maximumPercentageSync",
          "type": "uint256"
        }
      ],
      "name": "setMaximumPercentageSync",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8415c9a2157bfb5b4d93298d8e24c32331857f69665f0dbaf5dd60a04dc1ba0",
  "receipt": {
    "to": null,
    "from": "0x10AD3b25F0CD7Ed4EA01A95d2f1bf9E4bE987161",
    "contractAddress": "0xe36f5fABDA5c5aF8e9aaD6b1371DfddE037aABE5",
    "transactionIndex": 48,
    "gasUsed": "5445125",
    "logsBloom": "0x
    "blockHash": "0x4317eb1b9b0c76bafd961681cc783155c2d17571ff8a7376b35762ee46ec3767",
    "transactionHash": "0xb8415c9a2157bfb5b4d93298d8e24c32331857f69665f0dbaf5dd60a04dc1ba0",
    "logs": [],
    "blockNumber": 2467638,
    "cumulativeGasUsed": "6689552",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC1113597F0841708518b92b5704C99eAA816Edd9",
    "0xF0e104ad900a52D90e7e737AC6B27a1c201A7640"
  ],
  "numDeployments": 2,
  "solcInputHash": "f48515f8802bde1eee02701e6e31aebc",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_energyFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pylon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PylonCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"addPylon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pylonAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPylons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPylonsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deltaGammaMinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deltaGammaThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"energyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPylon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumPercentageSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"muUpdatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pylonCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deltaGammaMinFee\",\"type\":\"uint256\"}],\"name\":\"setDeltaGammaMinFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deltaGammaThreshold\",\"type\":\"uint256\"}],\"name\":\"setDeltaGammaThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPercentageSync\",\"type\":\"uint256\"}],\"name\":\"setMaximumPercentageSync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ZirconPylonFactory.sol\":\"ZirconPylonFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"contracts/ZirconERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\nimport './libraries/SafeMath.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol';\\n\\ncontract ZirconERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n    // TODO: change name of token\\n    string public constant name = 'Zircon';\\n    string public constant symbol = 'ZPT';\\n    uint8 public constant decimals = 18;\\n    uint public totalSupply;\\n    mapping(address => uint)  public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf8eab8eb108b6d181eb7cee283f845c7a819da59a60c85eb713dff463be775e2\"},\"contracts/ZirconPoolToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\nimport \\\"./ZirconERC20.sol\\\";\\nimport \\\"./interfaces/IZirconPoolToken.sol\\\";\\n\\ncontract ZirconPoolToken is ZirconERC20 {\\n    address public token;\\n    address public pair;\\n    bool public isAnchor;\\n    address public factory;\\n    address public pylon;\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == pylon, 'ZPT: FORBIDDEN');\\n        // sufficient check\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        require(msg.sender == pylon, 'ZPT: FORBIDDEN');\\n        // sufficient check\\n        _burn(account, amount);\\n    }\\n\\n\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _pair, address _pylon, bool _isAnchor) external {\\n        require(msg.sender == factory, 'ZPT: FORBIDDEN');\\n        // sufficient check\\n        token = _token0;\\n        pair = _pair;\\n        isAnchor = _isAnchor;\\n        pylon = _pylon;\\n    }\\n}\\n\",\"keccak256\":\"0xf01ee5968a982f8d7010a0aabec1b47c77cebea3ce5400161dfefdc1a099f79d\"},\"contracts/ZirconPylon.sol\":{\"content\":\"pragma solidity ^0.5.16;\\nimport './libraries/Math.sol';\\nimport './interfaces/IZirconPair.sol';\\nimport './interfaces/IZirconPoolToken.sol';\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./libraries/ZirconLibrary.sol\\\";\\nimport \\\"./interfaces/IZirconPylonFactory.sol\\\";\\nimport \\\"./interfaces/IZirconPylon.sol\\\";\\nimport \\\"./energy/interfaces/IZirconEnergy.sol\\\";\\nimport \\\"./energy/interfaces/IZirconEnergyRevenue.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol';\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ZirconPylon is IZirconPylon, ReentrancyGuard {\\n    // **** Libraries ****\\n    using SafeMath for uint112;\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    // **** STRUCTS *****\\n    struct PylonToken {\\n        address float;\\n        address anchor;\\n    }\\n    PylonToken public pylonToken;\\n    // ***** GLOBAL VARIABLES ******\\n\\n    // ***** The address of the other components ******\\n    address public pairAddress;\\n    address public factoryAddress;\\n    address public pairFactoryAddress;\\n    address public floatPoolTokenAddress;\\n    address public anchorPoolTokenAddress;\\n    address public energyAddress;\\n\\n    // Indicates if in the pair the token0 is float or anchor\\n    bool public isFloatReserve0;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    bytes4 private constant SELECTOR_FROM = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n\\n    // ***** Variables for calculations *****\\n    uint public virtualAnchorBalance;\\n    //uint public dynamicFeePercentage; //Uses basis points (0.01%, /10000)\\n    uint public gammaMulDecimals; // Percentage of float over total pool value. Name represents the fact that this is always the numerator of a fraction with 10**18 as denominator.\\n    uint public muMulDecimals; // A \\\"permanence\\\" factor that is used to adjust fee redistribution. Stored as mu + 1 because unsigned math\\n\\n    uint public gammaEMA; //A moving average of the gamma used to make price manipulation vastly more complex\\n    uint public thisBlockEMA; //A storage var for this block's changes.\\n    uint public EMASamples;\\n\\n    uint public EMABlockNumber; //Last block height of the EMA update\\n    uint public muBlockNumber; //block height of last mu update\\n    uint public muOldGamma; //gamma value at last mu update\\n    //uint public muUpdatePeriod; //parameter to set frequency of mu snapshots. We don't want to capture too much noise\\n\\n    //uint public deltaGammaThreshold; //Shouldn't be unreasonably low. A 3-4% change in a single block should be large enough to detect manipulation attempts.\\n    //uint public deltaGammaMinFee;\\n\\n    uint public lastK;\\n    uint public lastPoolTokens;\\n\\n    uint112 private reserve0;// uses single storage slot, accessible via getReserves (always anchor)\\n    uint112 private reserve1;// us es single storage slot, accessible via getReserves (always float)\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    // global variable used for testing\\n    uint private testMultiplier = 1e16;\\n\\n    // **** MODIFIERS *****\\n    uint public initialized = 0;\\n    modifier isInitialized() {\\n        require(initialized == 1, 'ZP: NOT INITIALIZED');\\n        _;\\n    }\\n\\n    // Calls dummy function with lock modifier\\n    //    modifier pairUnlocked() {\\n    //        IZirconPair(pairAddress).tryLock();\\n    //        _;\\n    //    }\\n\\n    //    modifier blockRecursion() {\\n    //        // TODO: Should do some kind of block height check to ensure this user hasn't\\n    //        // already called any of these functions\\n    //        _;\\n    //    }\\n\\n    // **** EVENTS ****\\n    event PylonUpdate(uint _reserve0, uint _reserve1);\\n    event PylonSync(uint _vab, uint _gamma);\\n\\n    // Transform in just one event\\n    event MintSync(address sender, uint aIn0, bool isAnchor);\\n    event MintAsync(address sender, uint aIn0, uint aIn1);\\n    event MintAsync100(address sender, uint aIn0, bool isAnchor);\\n    event Burn(address sender, uint aIn0, bool isAnchor);\\n    event BurnAsync(address sender, uint aIn0, uint aIn1);\\n    event Excess(uint aIn0, bool isAnchor);\\n    event DeltaTax(uint aIn0, bool applied);\\n\\n    // ****** CONSTRUCTOR ******\\n    constructor() public {\\n        factoryAddress = msg.sender;\\n    }\\n\\n    // ****** HELPER FUNCTIONS *****\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ZP: TRANSFER_FAILED');\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR_FROM, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ZP: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function getSyncReserves()  public view returns  (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    /// @notice Private function to get pair reserves normalized on float and anchor\\n    // @return _reserve0 -> float\\n    // @return _reserve1 -> Anchor\\n    function getPairReservesNormalized()  private view returns  (uint112 _reserve0, uint112 _reserve1) {\\n        (uint112 _reservePair0, uint112 _reservePair1,) = IZirconPair(pairAddress).getReserves();\\n        _reserve0 = isFloatReserve0 ? _reservePair0 : _reservePair1;\\n        _reserve1 = isFloatReserve0 ? _reservePair1 : _reservePair0;\\n    }\\n\\n    /// @notice Function that returns pair reserves translated to pylon\\n    /// @return Float -> _reserve0\\n    /// @dev Anchor -> _reserve1\\n    function getPairReservesTranslated(uint error0, uint error1)  private view returns  (uint _reserve0, uint _reserve1) {\\n        (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n        _reserve0 = translateToPylon(uint(_reservePair0), error0);\\n        _reserve1 = translateToPylon(uint(_reservePair1), error1);\\n    }\\n\\n    /// @notice Function to obtain Pair Reserves on Pylon Basis\\n    /// In case PTT Or PTB are null it will @return errorReturn\\n    function translateToPylon(uint toConvert, uint errorReturn) view private returns (uint amount){\\n        uint ptb = IZirconPair(pairAddress).balanceOf(address(this));\\n        uint ptt = IZirconPair(pairAddress).totalSupply();\\n        amount =  (ptt == 0 || ptb == 0) ? errorReturn : toConvert.mul(ptb)/ptt;\\n    }\\n\\n\\n    /// @notice Helper function to calculate slippage-adjusted share of pool\\n    function _disincorporateAmount(uint _amountIn, bool isAnchor) private view returns (uint amount0, uint amount1) {\\n        (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n        amount0 = !isAnchor ? _amountIn/2 : ZirconLibrary.getAmountOut(_amountIn/2, _reservePair1, _reservePair0);\\n        amount1 = isAnchor ? _amountIn/2 : ZirconLibrary.getAmountOut(_amountIn/2, _reservePair0, _reservePair1);\\n    }\\n\\n    function getLiquidityFromPoolTokens(uint amountIn0, uint amountIn1,  bool shouldMintAnchor, IZirconPoolToken pt) private view returns (uint liquidity, uint amountInAdjusted){\\n        (uint112 _pairReserve0, uint112 _pairReserve1) = getPairReservesNormalized();\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves(); // gas savings\\n\\n        if (shouldMintAnchor) {\\n            amountInAdjusted = Math.min((amountIn0.mul(_pairReserve1).mul(2))/_pairReserve0, amountIn1.mul(2)); //Adjust AmountIn0 to its value in Anchor tokens\\n            liquidity = ZirconLibrary.calculatePTU(shouldMintAnchor, amountInAdjusted, pt.totalSupply(), translateToPylon(_pairReserve1, 0), _reserve1, gammaMulDecimals, virtualAnchorBalance);\\n        }else{\\n            amountInAdjusted = Math.min((amountIn1.mul(_pairReserve0).mul(2))/_pairReserve1, amountIn0.mul(2)); //Adjust AmountIn1 to its value in Float tokens\\n            liquidity = ZirconLibrary.calculatePTU(shouldMintAnchor, amountInAdjusted, pt.totalSupply(), translateToPylon(_pairReserve0, 0), _reserve0, gammaMulDecimals, virtualAnchorBalance);\\n        }\\n    }\\n\\n    // ***** INIT ******\\n    // @notice Called once by the factory at time of deployment\\n    // @_floatPoolTokenAddress -> Contains Address Of Float PT\\n    // @_anchorPoolTokenAddress -> Contains Address Of Anchor PT\\n    // @floatToken -> Float token\\n    // @anchorToken -> Anchor token\\n    function initialize(address _floatPoolTokenAddress, address _anchorPoolTokenAddress, address _floatToken, address _anchorToken, address _pairAddress, address _pairFactoryAddress, address _energy) external nonReentrant {\\n        require(msg.sender == factoryAddress, 'ZP: FORBIDDEN'); // sufficient check\\n        floatPoolTokenAddress = _floatPoolTokenAddress;\\n        anchorPoolTokenAddress = _anchorPoolTokenAddress;\\n        pairAddress = _pairAddress;\\n        isFloatReserve0 = IZirconPair(_pairAddress).token0() == _floatToken;\\n        pylonToken = PylonToken(_floatToken, _anchorToken);\\n        pairFactoryAddress = _pairFactoryAddress;\\n        energyAddress = _energy;\\n    }\\n\\n    // @notice On init pylon we have to handle two cases\\n    // The first case is when we initialize the pair through the pylon\\n    // And the second one is when initialize the pylon with a pair already existing\\n    function initPylon(address _to) external nonReentrant returns (uint floatLiquidity, uint anchorLiquidity) {\\n        require(initialized == 0, \\\"Already initialized\\\");\\n        uint balance0 = IUniswapV2ERC20(pylonToken.float).balanceOf(address(this));\\n        uint balance1 = IUniswapV2ERC20(pylonToken.anchor).balanceOf(address(this));\\n        require(balance0 > 0 && balance1 > 0, \\\"ZP: NOT_ENOUGH\\\");\\n\\n        // Let's get the balances so we can see what the user send us\\n        // As we are initializing the reserves are going to be null\\n\\n\\n        // Let's see if the pair contains some reserves\\n        (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n        // If pair contains reserves we have to use the ratio of the Pair so...\\n        virtualAnchorBalance = balance1;\\n\\n        if (_reservePair0 > 0 && _reservePair1 > 0) {\\n            uint tpvAnchorPrime = (virtualAnchorBalance.add(balance0.mul(_reservePair1)/_reservePair0));\\n\\n            if (virtualAnchorBalance < tpvAnchorPrime/2) {\\n                gammaMulDecimals = 1e18 - (virtualAnchorBalance.mul(1e18)/(tpvAnchorPrime));\\n            } else {\\n                gammaMulDecimals = tpvAnchorPrime.mul(1e18)/(virtualAnchorBalance.mul(4)); // Subflow already checked by if statement\\n            }\\n            // This is gamma formula when FTV <= 50%\\n        } else {\\n            // When Pair is not initialized let's start gamma to 0.5\\n            gammaMulDecimals = 500000000000000000;\\n        }\\n\\n\\n        // Time to mint some tokens\\n\\n        (anchorLiquidity,) = _mintPoolToken(balance1, 0, _reservePair1, anchorPoolTokenAddress, _to, true);\\n        (floatLiquidity,) = _mintPoolToken(balance0, 0, _reservePair0, floatPoolTokenAddress, _to, false);\\n\\n        muMulDecimals = gammaMulDecimals; //Starts as gamma, diversifies over time. Used to calculate fee distribution\\n\\n        //Here it updates the state and throws liquidity into the pool if possible\\n        _update();\\n        initialized = 1;\\n    }\\n\\n\\n    // ***** EXCESS RESERVES ******\\n\\n\\n    // This function takes\\n    // @balance0 & @balance1 -> The New Balances After A Sync Update\\n    // @max0 & @max1 -> The maximum that we can save on the reserves\\n    // If we have any excess reserves we donate them to the pool\\n    //TODO:- Function should be fine although the mintOneSide usage could be dangerous\\n    //TODO:- But we need to check how we use it.\\n    function updateReservesRemovingExcess(uint newReserve0, uint newReserve1, uint112 max0, uint112 max1) private {\\n        uint ptl = 0;\\n        if (max0 < newReserve0) {\\n            _safeTransfer(pylonToken.float, pairAddress, newReserve0.sub(max0));\\n            (ptl,,) = IZirconPair(pairAddress).mintOneSide(address(this), isFloatReserve0);\\n            reserve0 = max0;\\n        } else {\\n            reserve0 = uint112(newReserve0);\\n        }\\n        if (max1 < newReserve1) {\\n\\n            _safeTransfer(pylonToken.anchor, pairAddress, newReserve1.sub(max1));\\n            (ptl,,) = IZirconPair(pairAddress).mintOneSide(address(this), !isFloatReserve0);\\n            reserve1 = max1;\\n        }else{\\n            reserve1 = uint112(newReserve1);\\n        }\\n        emit PylonUpdate(reserve0, reserve1);\\n    }\\n\\n\\n\\n    // ****** UPDATE ********\\n\\n    // Update reserves and, on the first call per block, price accumulator\\n    // Any excess of balance is going to be donated to the pair\\n    // So... here we get the maximum off both tokens and we mint Pool Tokens\\n\\n    // Sends pylonReserves to pool if there is a match\\n    function _update() private {\\n        // Let's take the current balances\\n        uint balance0 = IUniswapV2ERC20(pylonToken.float).balanceOf(address(this));\\n        uint balance1 = IUniswapV2ERC20(pylonToken.anchor).balanceOf(address(this));\\n\\n        // Intializing the variables, (Maybe gas consuming let's see how to sort out this\\n        // Getting pair reserves and updating variables before minting\\n        // Max0 and Max1 are two variables representing the maximum that can be minted on sync\\n        // Min0/2 & Min1/2 remain as reserves on the pylon\\n        // In the case the pair hasn't been initialized pair reserves will be 0 so we take our current balance as the maximum\\n        (uint reservesTranslated0, uint reservesTranslated1) = getPairReservesTranslated(balance0, balance1);\\n        uint maximumPercentageSync = IZirconPylonFactory(factoryAddress).maximumPercentageSync();\\n\\n        uint112 max0 = uint112(reservesTranslated0.mul(maximumPercentageSync)/100);\\n        uint112 max1 = uint112(reservesTranslated1.mul(maximumPercentageSync)/100);\\n        // Pylon Update Minting\\n        if (balance0 > max0/2 && balance1 > max1/2) {\\n\\n            // Get Maximum simple gets the maximum quantity of token that we can mint\\n            (uint px, uint py) = ZirconLibrary._getMaximum(\\n                reservesTranslated0,\\n                reservesTranslated1,\\n                balance0.sub(max0/2), balance1.sub(max1/2));\\n\\n            // Transferring tokens to pair and minting\\n            if(px != 0) _safeTransfer(pylonToken.float, pairAddress, px);\\n            if(py != 0) _safeTransfer(pylonToken.anchor, pairAddress, py);\\n            IZirconPair(pairAddress).mint(address(this));\\n            balance0 -= px;\\n            balance1 -= py;\\n\\n        }\\n        // Let's remove the tokens that are above max0 and max1, and donate them to the pool\\n        // This is for cases where somebody just donates tokens to pylon; tx reverts if this done via core functions\\n        //Todo: This is likely also invoked if the price dumps and the sync pool is suddenly above max, not ideal behavior...\\n        _updateVariables();\\n        updateReservesRemovingExcess(balance0, balance1, max0, max1);\\n    }\\n    // @notice This Function is called to update some variables needed for calculation\\n    function _updateVariables() private {\\n        (uint112 _pairReserve0, uint112 _pairReserve1) = getPairReservesNormalized();\\n        lastPoolTokens = IZirconPair(pairAddress).totalSupply();\\n        lastK = uint(_pairReserve0).mul(_pairReserve1);\\n\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        //uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        blockTimestampLast = blockTimestamp;\\n    }\\n\\n\\n\\n    /// @dev Mu is the fee factor that is used to distribute the pot between anchors and floats.\\n    /// It is largely based off gamma fluctuations (the losing side will get more fees)\\n    /// but there is a dampenening factor that allows the fee equilibrium point to be different than a 50/50 split\\n    /// The rationale for this is that there will be many pools, such as coin <> stablecoin, where a\\n    /// 50/50 distribution is achieved by an imbalanced fee redistribution (e.g. 80-20).\\n    /// This because you accept much less yield on your stablecoins, so it's fair that stablecoins consistently get a lower share of the yield\\n\\n    /// @dev The way this is achieved in practice is by defining when gamma is moving \\\"outside\\\" of the halfway point\\n    /// and when it's moving \\\"towards\\\" the halfway point (0.5)\\n    /// When moving outside it grows/reduces at a rate equal to deltagamma\\n    /// When moving inside the change rate is reduced by its closeness to the halfway point (changes very little if gamma is 50%)\\n\\n    function _updateMu() private {\\n        uint _newBlockHeight = block.number; // t2\\n        uint _lastBlockHeight = muBlockNumber; // t1\\n        uint muUpdatePeriod = IZirconPylonFactory(factoryAddress).muUpdatePeriod();\\n\\n\\n        //We only go ahead with this if a sufficient amount of time passes\\n        //This is primarily to reduce noise, we want to capture sweeping changes over fairly long periods\\n        if((_lastBlockHeight - _newBlockHeight) > muUpdatePeriod) { //reasonable to assume it won't subflow\\n            uint _newGamma = gammaMulDecimals; //y2\\n            uint _oldGamma = muOldGamma; //y1\\n\\n\\n            bool deltaGammaIsPositive = _newGamma >= _oldGamma;\\n\\n            bool gammaIsOver50 = _newGamma >= 5e17;\\n\\n            // This the part that measures if gamma is going outside (to the extremes) or to the inside (0.5 midpoint)\\n            // It uses an XOR between current gamma and its delta\\n            // If delta is positive when above 50%, means it's moving to the outside\\n            // If delta is negative when below 50%, that also means it's going to the outside\\n\\n            // In other scenarios it's going to the inside, which is why we use the XOR\\n            if(deltaGammaIsPositive != gammaIsOver50) { // != with booleans is an XOR\\n                uint absoluteGammaDeviation;\\n\\n                if(gammaIsOver50) {\\n                    absoluteGammaDeviation = gammaMulDecimals - 5e17;\\n                } else {\\n                    absoluteGammaDeviation = 5e17 - gammaMulDecimals;\\n                }\\n\\n                // This block assigns the dampened delta gamma to mu and checks that it's between 0 and 1\\n                // Due to uint math we can't do this in one line\\n                if (deltaGammaIsPositive) {\\n                    uint deltaMu = (_newGamma - _oldGamma).mul(absoluteGammaDeviation);\\n                    if (deltaMu + muMulDecimals <= 1e18) {\\n                        // Only updates if the result doesn't go above 1.\\n                        muMulDecimals += deltaMu;\\n                    }\\n\\n                } else {\\n                    uint deltaMu = (_oldGamma - _newGamma).mul(absoluteGammaDeviation);\\n                    // Sublow check\\n                    if(deltaMu <= muMulDecimals) {\\n                        muMulDecimals -= deltaMu;\\n                    }\\n                }\\n\\n            } else {\\n                //Here, gamma is moving to the extremes\\n\\n                //We simply assign the change in gamma 1:1 to mu. Again uint math so we need an if else block\\n                if (deltaGammaIsPositive) {\\n                    uint deltaMu = (_newGamma - _oldGamma);\\n                    if (deltaMu + muMulDecimals <= 1e18) {\\n                        //Only updates if the result doesn't go above 1.\\n                        muMulDecimals += deltaMu;\\n                    }\\n\\n                } else {\\n                    uint deltaMu = (_oldGamma - _newGamma);\\n\\n                    if(deltaMu <= muMulDecimals) {\\n                        muMulDecimals -= deltaMu;\\n                    }\\n                }\\n            }\\n\\n            //update variables for next step\\n            muOldGamma = _newGamma;\\n            muBlockNumber = _newBlockHeight;\\n        }\\n\\n\\n    }\\n\\n\\n    // ***** MINTING *****\\n\\n    // @notice Mint Pool Token\\n    // @_balance -> Balance OF PT\\n    // @_pylonReserve -> Reserves of PT on Pylon\\n    //Internal helper function that calculates the amount of Pylon pool tokens to mint\\n    function _mintPoolToken(\\n        uint amountIn,\\n        uint _pylonReserve,\\n        uint _pairReserveTranslated,\\n        address _poolTokenAddress,\\n        address _to,\\n        bool isAnchor) private returns (uint liquidity, uint amountOut) {\\n        require(amountIn > 0, \\\"ZP: NOT_ENOUGH\\\");\\n        // Taking the fee out in tokens\\n\\n        uint pts = IZirconPoolToken(_poolTokenAddress).totalSupply();\\n        {\\n            uint _gamma = gammaMulDecimals;\\n            uint _vab = virtualAnchorBalance;\\n\\n            if (pts == 0) {\\n                //TODO: Double check if we can start the pool with no fees\\n                IZirconPoolToken(_poolTokenAddress).mint(address(0), MINIMUM_LIQUIDITY);\\n                if (isAnchor) {\\n                    liquidity = amountIn.sub(MINIMUM_LIQUIDITY);\\n                }else{\\n                    liquidity = (amountIn.mul(1e18)/_gamma.mul(2)).sub(MINIMUM_LIQUIDITY);\\n                }\\n            } else {\\n                // Paying fees only on not init call\\n                amountOut = payFees(amountIn, isAnchor);\\n                liquidity = ZirconLibrary.calculatePTU(isAnchor, amountOut, pts, _pairReserveTranslated, _pylonReserve, _gamma, _vab);\\n\\n            }\\n        }\\n\\n        IZirconPoolToken(_poolTokenAddress).mint(_to, liquidity);\\n        emit MintSync(msg.sender, amountOut, isAnchor);\\n    }\\n\\n    // @notice External Function called to mint pool Token\\n    // @dev Liquidity have to be sent before\\n    // TODO: recheck in dump scenario if sync pool can be blocked\\n\\n    // aka syncMint\\n    function mintPoolTokens(address _to, bool isAnchor) isInitialized nonReentrant external returns (uint liquidity) {\\n        sync();\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves();\\n        //console.log(\\\"Solidity: got sync reserves\\\");\\n        (uint _reservePairTranslated0, uint _reservePairTranslated1) = getPairReservesTranslated(0, 0);\\n\\n        uint amountIn;\\n        uint amountOut;\\n        // Minting Pool tokens\\n        if (isAnchor) {\\n            //console.log(\\\"Solidity: before balance\\\");\\n            uint balance1 = IUniswapV2ERC20(pylonToken.anchor).balanceOf(address(this));\\n            //console.log(\\\"Solidity: before .sub\\\");\\n            amountIn = balance1.sub(_reserve1);\\n            //console.log(\\\"Solidity: after .sub\\\");\\n            (liquidity, amountOut) = _mintPoolToken(amountIn, _reserve1, _reservePairTranslated1, anchorPoolTokenAddress, _to, isAnchor);\\n\\n        } else {\\n            uint balance0 = IUniswapV2ERC20(pylonToken.float).balanceOf(address(this));\\n            amountIn = balance0.sub(_reserve0);\\n            (liquidity, amountOut) = _mintPoolToken(amountIn, _reserve0, _reservePairTranslated0, floatPoolTokenAddress, _to, isAnchor);\\n        }\\n        // Updating VAB & VFB\\n        if(isAnchor) {\\n            virtualAnchorBalance += amountOut;\\n        }\\n        //Sends tokens into pool if there is a match\\n        _update();\\n    }\\n\\n\\n    /// @notice Private function that calculates anchor fees to send to energy\\n    /// @dev in case the user adds liquidity in float token it will swap the amount of tokens with the Pair\\n    /// @return amount minus fees payed\\n\\n    //Swapping every time is not ideal for gas, but it will be changed if we ever deploy to a chain like ETH\\n    //We care about amassing Anchor assets, holding pool tokens isn't ideal.\\n    function payFees(uint amountIn, bool isAnchor) private returns (uint amountOut){\\n        (uint fee, ) = applyDeltaTax(amountIn);\\n        console.log(\\\"Solidity: fee: \\\", fee);\\n        // TODO: This should never go above the balcance\\n        if (isAnchor) {\\n            _safeTransfer(pylonToken.anchor, energyAddress, fee);\\n        } else {\\n            _safeTransfer(pylonToken.float, pairAddress, fee);\\n            (uint112 _reservePair0, uint112 _reservePair1) = getPairReservesNormalized();\\n            uint amountSwapped = ZirconLibrary.getAmountOut(fee, _reservePair0, _reservePair1);\\n            IZirconPair(pairAddress).swap(isFloatReserve0 ? 0 : amountSwapped, isFloatReserve0 ? amountSwapped : 0, energyAddress, \\\"\\\");\\n        }\\n        amountOut =  amountIn.sub(fee);\\n    }\\n\\n    /// @notice private function that sends to pair the LP tokens\\n    /// Burns them sending it to the energy address\\n    function payBurnFees(uint amountIn) private returns (uint amountOut) {\\n        (uint fee, ) = applyDeltaTax(amountIn);\\n\\n\\n        _safeTransfer(pairAddress, pairAddress, fee);\\n        IZirconPair(pairAddress).burnOneSide(energyAddress, !isFloatReserve0);\\n        amountOut = amountIn.sub(fee);\\n    }\\n\\n    /// @notice private function that calculates fees for Burn Async\\n    /// Fees here are increased depending on current Gamma\\n    /// on unbalanced Gamma, fees are higher\\n\\n\\n    //Unnecessary with Delta Tax.\\n    //    function payBurnAsyncFees(uint amountIn) private returns (uint amountOut) {\\n    //        (uint fee, ) = applyDeltaTax(amountIn);\\n    //\\n    //        uint gammaFee = IZirconEnergy(energyAddress).getFeeByGamma(gammaMulDecimals);\\n    //        uint fee = amountIn.mul(dynamicFeePercentage + gammaFee/2)/10000; //TODO: Fix this up\\n    //        address revAddress = IZirconPair(pairAddress).energyRevenueAddress();\\n    //        _safeTransfer(pairAddress, revAddress, amountIn.mul(gammaFee/2)/10000);\\n    //        IZirconEnergyRevenue(revAddress).calculate();\\n    //\\n    //        _safeTransfer(pairAddress, pairAddress, fee);\\n    //        IZirconPair(pairAddress).burnOneSide(energyAddress, !isFloatReserve0);\\n    //        amountOut = amountIn.sub(fee);\\n    //    }\\n\\n    //Anti-exploit measure applying extra fees for any mint/burn operation that occurs after a massive gamma change.\\n    //In principle classic \\\"oracle\\\" exploits merely speed up/force natural outcomes.\\n    //E.g. Maker's Black Thursday is functionally the same as a lending protocol \\\"hack\\\"\\n    //Same (sometimes) applies here if you move prices very fast. This fee is designed to make this unprofitable\\n    function applyDeltaTax(uint amountIn) private returns (uint fee, bool applied) {\\n\\n        uint maxDerivative = Math.max(gammaEMA, thisBlockEMA);\\n        uint deltaGammaThreshold = IZirconPylonFactory(factoryAddress).deltaGammaThreshold();\\n        uint deltaGammaMinFee = IZirconPylonFactory(factoryAddress).deltaGammaMinFee();\\n\\n        if (maxDerivative >= deltaGammaThreshold) {\\n            applied = true;\\n            uint feeBps = (maxDerivative - deltaGammaThreshold).mul(10000)/deltaGammaThreshold + deltaGammaMinFee;\\n            feeBps = feeBps.add(IZirconEnergy(energyAddress).getFeeByGamma(gammaMulDecimals));\\n\\n            require(feeBps < 10000, \\\"ZP: Fee too high\\\");\\n            fee = amountIn.mul(feeBps)/10000;\\n        }\\n        //Base case where the threshold isn't passed\\n        else {\\n            applied = false;\\n            fee = IZirconEnergy(energyAddress).getFeeByGamma(gammaMulDecimals);\\n        }\\n        emit DeltaTax(fee, applied);\\n    }\\n\\n\\n    // @notice Mint Async 100 lets you invest in one liquidity\\n    // The difference with Sync Liquidity is that it goes directly to the Pool\\n\\n    function mintAsync100(address to, bool isAnchor) nonReentrant isInitialized external returns (uint liquidity) {\\n        sync();\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves();\\n        uint amountIn;\\n        if (isAnchor) {\\n            uint balance = IUniswapV2ERC20(pylonToken.anchor).balanceOf(address(this));\\n            amountIn = balance.sub(_reserve1);\\n        }else{\\n            uint balance = IUniswapV2ERC20(pylonToken.float).balanceOf(address(this));\\n            amountIn = balance.sub(_reserve0);\\n        }\\n        amountIn = payFees(amountIn, isAnchor);\\n\\n        require(amountIn > 0, \\\"ZP: INSUFFICIENT_AMOUNT\\\");\\n\\n        _safeTransfer(isAnchor ? pylonToken.anchor : pylonToken.float, pairAddress, amountIn);\\n\\n        {\\n\\n            (uint a0, uint a1) = _disincorporateAmount(amountIn, isAnchor);\\n\\n            (uint _liquidity, uint amount) = getLiquidityFromPoolTokens(\\n                a0, a1,\\n                isAnchor,\\n                IZirconPoolToken(isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress));\\n\\n            liquidity = _liquidity;\\n            if (isAnchor) {\\n                virtualAnchorBalance += amount;\\n            }\\n            IZirconPair(pairAddress).mintOneSide(address(this), isFloatReserve0 ? !isAnchor : isAnchor);\\n            IZirconPoolToken(isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress).mint(to, liquidity);\\n        }\\n        _updateVariables();\\n        emit MintAsync100(msg.sender, amountIn, isAnchor);\\n    }\\n\\n\\n    // @notice Mint Async lets you invest in both liquidity like you normally do on your DEX\\n    // The difference is that gives you directly with mint one side\\n    // TODO: Transfer first then calculate on basis of pool token share how many share we should give to the user\\n    function mintAsync(address to, bool shouldMintAnchor) external nonReentrant isInitialized returns (uint liquidity){\\n        sync();\\n        address _poolTokenAddress = shouldMintAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress;\\n\\n        (uint112 _reserve0, uint112 _reserve1,) = getSyncReserves(); // gas savings\\n        uint amountIn0;\\n        uint amountIn1;\\n        {\\n            uint balance0 = IUniswapV2ERC20(pylonToken.float).balanceOf(address(this));\\n            uint balance1 = IUniswapV2ERC20(pylonToken.anchor).balanceOf(address(this));\\n\\n            amountIn0 = balance0.sub(_reserve0);\\n            amountIn1 = balance1.sub(_reserve1);\\n\\n            amountIn0 = payFees(amountIn0, false);\\n            amountIn1 = payFees(amountIn1, true);\\n\\n            (uint _liquidity, uint amount) = getLiquidityFromPoolTokens(amountIn0, amountIn1, shouldMintAnchor, IZirconPoolToken(_poolTokenAddress));\\n            liquidity = _liquidity;\\n            if (shouldMintAnchor) {\\n                virtualAnchorBalance += amount;\\n            }\\n\\n        }\\n\\n        require(amountIn1 > 0 && amountIn0 > 0, \\\"ZP: NOT_ENOUGH\\\");\\n        _safeTransfer(pylonToken.float, pairAddress, amountIn0);\\n        _safeTransfer(pylonToken.anchor, pairAddress, amountIn1);\\n        IZirconPair(pairAddress).mint(address(this));\\n        // uint deltaSupply = pair.totalSupply().sub(_totalSupply);\\n        //TODO: Change fee\\n        IZirconPoolToken(_poolTokenAddress).mint(to, liquidity);\\n\\n\\n        emit MintAsync(msg.sender, amountIn0, amountIn1);\\n        //console.log(\\\"<<<Pylon:mintAsync::::::::\\\", liquidity);\\n        _updateVariables();\\n    }\\n\\n\\n    /// @notice Master update function. Syncs up the vault's state with the pool and any price/fee changes\\n    function sync() private {\\n        // Prevents this from being called while the underlying pool is getting flash loaned\\n        if(msg.sender != pairAddress) { IZirconPair(pairAddress).tryLock(); }\\n\\n        // So this thing needs to get pool reserves, get the price of the float asset in anchor terms\\n        // Then it applies the base formula:\\n        // Adds fees to virtualFloat and virtualAnchor\\n        // And then calculates Gamma so that the proportions are correct according to the formula\\n        (uint112 pairReserve0, uint112 pairReserve1) = getPairReservesNormalized();\\n        (uint112 pylonReserve0, uint112 pylonReserve1,) = getSyncReserves();\\n\\n        uint oldGamma = gammaMulDecimals;\\n\\n        // If the current K is equal to the last K, means that we haven't had any updates on the pair level\\n        // So is useless to update any variable because fees on pair haven't changed\\n        uint currentK = uint(pairReserve0).mul(pairReserve1);\\n        if (lastPoolTokens != 0 && pairReserve0 != 0 && pairReserve1 != 0) {\\n\\n            uint poolTokensPrime = IZirconPair(pairAddress).totalSupply();\\n            // Here it is going to be useful to have a Minimum Liquidity\\n            // If not we can have some problems\\n            // uint poolTokenBalance = IZirconPair(pairAddress).balanceOf(address(this));\\n            // Let's get the amount of total pool value own by pylon\\n\\n            uint totalPoolValueAnchorPrime = translateToPylon(pairReserve1.mul(2), 0);\\n            //uint totalPoolValueFloatPrime = translateToPylon(pairReserve0.mul(2), 0);\\n\\n            //Fee value/total pool value ratio, modified implementation of Uniswap's mintFee formula\\n            uint one = 1e18;\\n            uint d = (one).sub((Math.sqrt(lastK)*poolTokensPrime*1e18)/(Math.sqrt(currentK)*lastPoolTokens));\\n            // Multiply by total pool value to get fee value in native units\\n            uint feeValueAnchor = totalPoolValueAnchorPrime.mul(d)/1e18;\\n            // uint feeValueFloat = totalPoolValueFloatPrime.mul(d)/1e18;\\n            // console.log(\\\"sync::anchor::fee\\\", feeValueAnchor);\\n            // console.log(\\\"sync::float::fee\\\", feeValueFloat);\\n\\n            // Calculating gamma, variable used to calculate tokens to mint and withdrawals\\n\\n            // gamma is supposed to always be an accurate reflection of the float share as a percentage of the totalPoolValue\\n            // however the virtual anchor balance also includes the syncPool reserve portion, which is completely outside of the pools.\\n\\n            // When operating on fractional (anchor withdrawals get slashed if there is no money in energy),\\n            //gamma is higher than it should be compared to ftv + atv.\\n            // This means that anchors get more fees than they \\\"should\\\", which kinda works out because they're at high risk.\\n            // It works as an additional incentive to not withdraw.\\n\\n            //VFB is no longer relevant, so it's commented out for now\\n\\n            //Mu mostly follows gamma but it's designed to find an equilibrium point different from 50/50\\n            //More on this in the function itself;\\n\\n            _updateMu();\\n\\n            virtualAnchorBalance += ((feeValueAnchor.mul(1e18-muMulDecimals))/1e18);\\n            //Fees to floats are automatically assigned due to dTPV > dVAB\\n            //virtualFloatBalance += ((gammaMulDecimals).mul(feeValueFloat)/1e18);\\n            //            console.log(\\\"sync::gamma\\\", d, muMulDecimals);\\n\\n            if ((virtualAnchorBalance.sub(pylonReserve1)) < totalPoolValueAnchorPrime/2) {\\n\\n                //Here gamma is simply a variation of tpv - vab\\n\\n                gammaMulDecimals = 1e18 - ((virtualAnchorBalance.sub(pylonReserve1))*1e18 /  totalPoolValueAnchorPrime);\\n            } else {\\n\\n                //Here gamma fixes the amount of float assets and lets anchors get slashed\\n\\n                //This is a heavily simplified expression of a \\\"derived\\\" virtual Float balance (quantity of float asset supplied)\\n                //The formula assumes that the virtual anchor balance was once matched with an equal value of float assets\\n                //It then assumes that this point had the same k as now. Simplify a lot and suddenly there's no k in the formula :)\\n                //The derived vfb shifts when new assets are supplied to ensure there are no gaps between the two gamma formulas\\n\\n                //This shift in the vfb means that the pool has a collective break even point that moves around.\\n                //Supplying anchors moves the break even higher. This can massively reduce IL for very strong pumps.\\n                //The flipside is that float LPs can lose more on a redump.\\n                //Supplying floats moves the breakeven lower, so floats lose less, useful to preserve the pool in downturns.\\n\\n                gammaMulDecimals = totalPoolValueAnchorPrime.mul(1e18)/((virtualAnchorBalance.sub(pylonReserve0)).mul(4));\\n            }\\n\\n\\n            //updateDelta()\\n\\n            //Calculates a \\\"delta gamma\\\" EMA which is used to \\\"lock down\\\" the pool.\\n            //Above a threshold, fees get absurdly high and make it very difficult to complete price manipulation cycles (like in exploits).\\n            //The initial \\\"trigger\\\" that pumps the EMA is not taxed, to allow for legitimate whales to come in.\\n\\n            //Using an EMA makes it more resilient, as otherwise an attacker could just wait out the sampling period to eliminate the outlier.\\n\\n            //Block numbers are overall harder to manipulate and more relevant for our purposes.\\n            //There is some variability due to block time, it would make sense to tune the number of samples for each chain.\\n\\n            uint blockDiff = block.number.sub(EMABlockNumber);\\n            if (blockDiff != 0) {\\n\\n                //Using past average means that delta spikes stay embedded in it for a while\\n\\n                gammaEMA = (gammaEMA.mul(EMASamples).add(thisBlockEMA))/(EMASamples.add(blockDiff));\\n\\n                //Resets thisBlock values\\n\\n                thisBlockEMA = ZirconLibrary.absoluteDiff(gammaMulDecimals, oldGamma);\\n                EMABlockNumber = block.number;\\n            } else {\\n\\n                //Adds any delta change if it's in the same block.\\n                thisBlockEMA = thisBlockEMA.add(ZirconLibrary.absoluteDiff(gammaMulDecimals, oldGamma));\\n            }\\n\\n\\n            // TODO: permanence factor for fees\\n            // Sync pool also gets a claim to these\\n            /// @notice event no longer has vfb\\n            emit PylonSync(virtualAnchorBalance, gammaMulDecimals);\\n        }\\n        //        console.log(\\\"sync::gamma\\\", gammaMulDecimals);\\n    }\\n\\n\\n    /// @notice TODO\\n    function calculateLPTU(bool _isAnchor, uint _liquidity, uint _ptTotalSupply) view private returns (uint claim){\\n        (uint _reserve0, uint _reserve1) = getPairReservesTranslated(1, 1); // gas savings\\n        (uint112 _pylonReserve0, uint112 _pylonReserve1,) = getSyncReserves(); // gas savings\\n        uint pylonShare;\\n        if (_isAnchor) {\\n            pylonShare = (IZirconPair(pairAddress).balanceOf(address(this)).mul(virtualAnchorBalance.sub(_pylonReserve1)))/_reserve1.mul(2);\\n            // Adjustment factor to extract correct amount of liquidity\\n            pylonShare = pylonShare.add(pylonShare.mul(_pylonReserve1)/_reserve1.mul(2));\\n        }else{\\n            pylonShare = ((gammaMulDecimals).mul(IZirconPair(pairAddress).balanceOf(address(this))))/1e18;\\n            pylonShare = pylonShare.add(pylonShare.mul(_pylonReserve0)/_reserve0.mul(2));\\n        }\\n\\n\\n        // Liquidity/pt applies share over pool + reserves to something that is just pool.\\n        // So it gives less liquidity than it should\\n\\n        claim = (_liquidity.mul(pylonShare))/_ptTotalSupply;\\n        require(claim > 0, 'ZP: INSUFFICIENT_LIQUIDITY_BURNED');\\n    }\\n\\n    /// @notice TODO\\n    // Burn Async send both tokens 50-50\\n    // Liquidity has to be sent before\\n    function sendSlashing(uint omegaMulDecimals, uint liquidity) private returns(uint remainingPercentage){\\n        if (omegaMulDecimals < 1e18) {\\n            uint amountToAdd = liquidity.mul(1e18-omegaMulDecimals)/1e18;\\n            // uint energyAnchorBalance = IUniswapV2ERC20(pylonToken.anchor).balanceOf(energyAddress);\\n            uint energyPTBalance = IUniswapV2ERC20(pairAddress).balanceOf(energyAddress);\\n            if (amountToAdd < energyPTBalance) {\\n                // Sending PT tokens to Pair because burn one side is going to be called after\\n                _safeTransferFrom(pairAddress, energyAddress, pairAddress, amountToAdd);\\n                remainingPercentage = 0;\\n            } else {\\n                // Sending PT tokens to Pair because burn one side is going to be called after\\n                // @dev if amountToAdd is too small the remainingPercentage will be 0 so that is ok\\n                _safeTransferFrom(pairAddress, energyAddress, pairAddress, energyPTBalance);\\n                remainingPercentage = (amountToAdd.sub(energyPTBalance))/(liquidity);\\n            }\\n        } else {\\n            remainingPercentage = 0;\\n        }\\n    }\\n\\n    /// @notice function that sends tokens to Pair to be burn after\\n    /// this function must be called only before a burn takes place, if not it'll give away tokens\\n    function sendSlashedTokensToUser(uint anchorAmount, uint floatAmount, uint percentage, address _to) private {\\n        if(percentage != 0) {\\n            uint totalAmount = anchorAmount;\\n            if ( floatAmount > 0 ) {\\n                (uint res0, uint res1) = getPairReservesNormalized();\\n                totalAmount += ZirconLibrary.getAmountOut(floatAmount, res0, res1);\\n            }\\n            uint energyAnchorBalance = IUniswapV2ERC20(pylonToken.anchor).balanceOf(energyAddress);\\n            uint amountToTransfer = totalAmount.mul(percentage);\\n            if(energyAnchorBalance > amountToTransfer ){\\n                _safeTransferFrom(pylonToken.anchor, energyAddress, _to, amountToTransfer);\\n            }\\n        }\\n    }\\n\\n\\n    /// @notice Burn Async let's you burn your anchor|float shares giving you back both tokens\\n    /// @dev sends to the Pair Contract the PTU equivalent to the Anchor|Float Shares\\n    /// and calls Classic burn\\n    function burnAsync(address _to, bool _isAnchor) external nonReentrant isInitialized returns (uint amount0, uint amount1) {\\n        sync();\\n\\n        IZirconPoolToken pt = IZirconPoolToken(_isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress);\\n        uint liquidity = pt.balanceOf(address(this));\\n        require(liquidity > 0, \\\"ZP: NOT_ENOUGH\\\");\\n        uint ptTotalSupply = pt.totalSupply();\\n        uint extraPercentage = 0;\\n\\n        {\\n            (uint reserveFloat, uint reserveAnchor,) = getSyncReserves();\\n            (uint pairReserves0,) = getPairReservesTranslated(0, 0);\\n            {\\n                //Calculates max liquidity to avoid withdrawing portion in sync pools\\n                uint maxPoolTokens = _isAnchor ?\\n                ptTotalSupply - ptTotalSupply.mul(reserveAnchor) / virtualAnchorBalance :\\n                ptTotalSupply - ptTotalSupply.mul(reserveFloat) / (pairReserves0.mul(2).mul(gammaMulDecimals) / 1e18).add(reserveFloat);\\n                require(liquidity < maxPoolTokens, \\\"ZP: EXCEED\\\");\\n            }\\n            uint ptu = calculateLPTU(_isAnchor, liquidity, ptTotalSupply);\\n            ptu = payBurnFees(ptu);\\n            // Anchor slashing logic\\n            if (_isAnchor) {\\n                (ptu, extraPercentage) = handleOmegaSlashing(ptu); //This one retrieves tokens from ZirconEnergy if available\\n            }\\n            _safeTransfer(pairAddress, pairAddress, ptu);\\n        }\\n        // Burning liquidity and sending to user\\n        // The pool tokens sent to the Pair are slashed by omega\\n        (uint amountA, uint amountB) = IZirconPair(pairAddress).burn(_to);\\n        amount0 = isFloatReserve0 ? amountA : amountB;\\n        amount1 = isFloatReserve0 ? amountB : amountA;\\n        sendSlashedTokensToUser(amount0, amount1, extraPercentage, _to);\\n\\n        //Burns the Zircon pool tokens\\n        pt.burn(address(this), liquidity);\\n\\n        // Updating\\n        if(_isAnchor) {\\n            virtualAnchorBalance -= virtualAnchorBalance.mul(liquidity)/ptTotalSupply;\\n        }\\n        _update();\\n        // Emiting event on burned async\\n        emit BurnAsync(msg.sender, amount0, amount1);\\n    }\\n\\n    /// @notice Function That handles the amount of reserves in Float Anchor Shares\\n    /// and the amount of the minimum from liquidity and reserves\\n    /// @dev Helper function for burn\\n    function burnPylonReserves(bool isAnchor, uint _totalSupply, uint _liquidity) view private returns (uint reservePT, uint amount) {\\n        // variables declaration\\n        uint _gamma = gammaMulDecimals;\\n        uint _vab = virtualAnchorBalance;\\n        (uint _reserve0,) = getPairReservesTranslated(0,0); // gas savings\\n        (uint112 _pylonReserve0, uint112 _pylonReserve1,) = getSyncReserves();\\n\\n        //Calculates maxPTs that can be serviced through Pylon Reserves\\n        uint pylonReserve = isAnchor ? _pylonReserve1 : _pylonReserve0;\\n        uint reserve = isAnchor ? reserve1 : _reserve0;\\n        reservePT = ZirconLibrary.calculatePTU(isAnchor, pylonReserve, _totalSupply, reserve, pylonReserve, _gamma, _vab);\\n        amount = ZirconLibrary.calculatePTUToAmount(isAnchor, Math.min(reservePT, _liquidity), _totalSupply,reserve, pylonReserve, _gamma, _vab);\\n    }\\n\\n\\n    /// @notice Omega is the slashing factor. It's always equal to 1 if pool has gamma above 50%\\n    /// If it's below 50%, it begins to go below 1 and thus slash any withdrawal.\\n    /// @dev Note that in practice this system doesn't activate unless the syncReserves are empty.\\n    /// Also note that a dump of 60% only generates about 10% of slashing.\\n    function handleOmegaSlashing(uint ptu) private returns (uint retPtu, uint extraPercentage){\\n        (, uint reserveAnchor,) = getSyncReserves();\\n        (, uint pairReserves1)  = getPairReservesTranslated(0,0);\\n        uint omegaMulDecimals = ZirconLibrary.slashLiabilityOmega(\\n            pairReserves1.mul(2),\\n            reserveAnchor,\\n            gammaMulDecimals,\\n            virtualAnchorBalance);\\n        //console.log(\\\"omega slash\\\", omegaMulDecimals);\\n        (extraPercentage) = sendSlashing(omegaMulDecimals, ptu);\\n        retPtu = omegaMulDecimals.mul(ptu)/1e18;\\n    }\\n\\n    // @notice Burn send liquidity back to user burning Pool tokens\\n    // The function first uses the reserves of the Pylon\\n    // If not enough reserves it burns The Pool Tokens of the pylon\\n    // Fees here are\\n    function burn(address _to, bool _isAnchor) external nonReentrant isInitialized returns (uint amount){\\n        sync();\\n        //        console.log(\\\"Finished sync in burn\\\");\\n        // Selecting the Pool Token class on basis of the requested tranch to burn\\n        IZirconPoolToken pt = IZirconPoolToken(_isAnchor ? anchorPoolTokenAddress : floatPoolTokenAddress);\\n        // Let's get how much liquidity was sent to burn\\n        // Outside of scope to be used for vab/vfb adjustment later\\n        uint liquidity = pt.balanceOf(address(this));\\n        require(liquidity > 0, \\\"INSUFFICIENT_LIQUIDITY\\\");\\n        uint _totalSupply = pt.totalSupply();\\n        {\\n            address to = _to;\\n            bool isAnchor = _isAnchor;\\n            address _pairAddress = pairAddress;\\n            // Here we calculate max PTU to extract from sync reserve + amount in reserves\\n            (uint reservePT, uint _amount) = burnPylonReserves(isAnchor, _totalSupply, liquidity);\\n\\n\\n            amount = payFees(_amount, isAnchor);\\n            _safeTransfer(isAnchor ? pylonToken.anchor : pylonToken.float, to, amount);\\n            //In case the reserves weren't able to pay for everything\\n            if (reservePT < liquidity) {\\n                uint adjustedLiquidity = liquidity.sub(reservePT);\\n                uint ptu = calculateLPTU(isAnchor, adjustedLiquidity, _totalSupply);\\n                ptu = payBurnFees(ptu);\\n                uint extraPercentage = 0;\\n                if (isAnchor) { (ptu, extraPercentage) = handleOmegaSlashing(ptu); }\\n                _safeTransfer(_pairAddress, _pairAddress, ptu);\\n                bool isReserve0 = isFloatReserve0 ? !isAnchor : isAnchor;\\n                uint sentAmount = IZirconPair(_pairAddress).burnOneSide(to, isReserve0);  // XOR\\n                amount += sentAmount;\\n                sendSlashedTokensToUser(isReserve0 ? sentAmount : 0, isReserve0 ? 0 : sentAmount, extraPercentage, to);\\n                //Bool combines choice of anchor or float with which token is which in the pool\\n            }\\n            pt.burn(address(this), liquidity); //Should burn unadjusted amount ofc\\n        }\\n\\n        if(_isAnchor) {\\n            virtualAnchorBalance -= virtualAnchorBalance.mul(liquidity)/_totalSupply;\\n        }\\n        _update();\\n        emit Burn(msg.sender, amount, _isAnchor);\\n    }\\n}\\n\",\"keccak256\":\"0x469f866ffe674b16531464d824ead99eb6911b1efd7c9506f90a44282ee40f4c\"},\"contracts/ZirconPylonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\n// import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport './ZirconPoolToken.sol';\\nimport './ZirconPylon.sol';\\nimport \\\"./energy/interfaces/IZirconEnergyRevenue.sol\\\";\\nimport './energy/interfaces/IZirconEnergyFactory.sol';\\n\\ncontract ZirconPylonFactory is IZirconPylonFactory {\\n    mapping(address => mapping(address => address)) public getPylon;\\n    address[] public allPylons;\\n    address public factory;\\n    address public energyFactory;\\n    address public feeToSetter;\\n\\n    uint public maximumPercentageSync;\\n\\n    uint public deltaGammaThreshold;\\n    uint public deltaGammaMinFee;\\n\\n    uint public muUpdatePeriod;\\n    //bytes4 private constant CREATE = bytes4(keccak256(bytes('createEnergy(address,address,address,address)')));\\n    event PylonCreated(address indexed token0, address indexed token1, address poolToken0, address poolToken1, address pylon, address pair);\\n    constructor(address _factory, address _energyFactory) public {\\n        factory = _factory;\\n        energyFactory = _energyFactory;\\n\\n        // Starting Variables\\n        maximumPercentageSync = 10;\\n        deltaGammaThreshold = 4 * 1e16; // 4%\\n        deltaGammaMinFee = 1500; // 15%\\n        muUpdatePeriod = 240; // number of blocks; 1 hour on Ethereum and Moonbeam/river\\n    }\\n\\n    function allPylonsLength() external view returns (uint) {\\n        return allPylons.length;\\n    }\\n\\n    function pylonCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(ZirconPylon).creationCode);\\n    }\\n\\n    function createTokenAddress(address _token, address pylonAddress) private returns (address poolToken) {\\n        // Creating Token\\n        bytes memory bytecode = type(ZirconPoolToken).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_token, pylonAddress));\\n        assembly {\\n            poolToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n    }\\n\\n    function createPylon( address _tokenA, address _tokenB, address _pair) private returns (address pylon) {\\n        // Creating Token\\n        bytes memory bytecode = type(ZirconPylon).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_tokenA, _tokenB, _pair));\\n        assembly {\\n            pylon := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n    }\\n    function createEnergy(address _pylonAddress, address _pairAddress, address _tokenA, address _tokenB) private returns (address energy){\\n        energy = IZirconEnergyFactory(energyFactory).createEnergy( _pylonAddress, _pairAddress, _tokenA, _tokenB);\\n        //energyRev = IZirconEnergyFactory(energyFactory).createEnergyRev(_pairAddress, _tokenA, _tokenB, address(this));\\n\\n        //(bool success, bytes memory data) = energyFactory.call(abi.encodeWithSelector(CREATE, _pylonAddress, _pairAddress, _tokenA, _tokenB));\\n        //require(success && (data.length == 0 || abi.decode(data, (bool))), 'ZP: ENERGY_FAILED_CREATION');\\n    }\\n\\n    // Adding PYLON\\n    // First Token is always the Float and the second one is the Anchor\\n    function addPylon(address _pairAddress, address _tokenA, address _tokenB) external returns (address pylonAddress) {\\n        require(_tokenA != _tokenB, 'ZF: IDENTICAL_ADDRESSES');\\n        require(getPylon[_tokenA][_tokenB] == address(0), 'ZF: PYLON_EXISTS');\\n\\n        pylonAddress = createPylon(_tokenA, _tokenB, _pairAddress);\\n        address poolTokenA = createTokenAddress(_tokenA, pylonAddress); // FLOAT\\n        address poolTokenB = createTokenAddress(_tokenB, pylonAddress); // ANCHOR\\n\\n        address energy = createEnergy(pylonAddress, _pairAddress, _tokenA, _tokenB);\\n\\n        IZirconPylon(pylonAddress).initialize(poolTokenA, poolTokenB, _tokenA, _tokenB, _pairAddress, factory, energy);\\n\\n        ZirconPoolToken(poolTokenA).initialize(_tokenA, _pairAddress, pylonAddress, false);\\n        ZirconPoolToken(poolTokenB).initialize(_tokenB, _pairAddress, pylonAddress, true);\\n\\n        emit PylonCreated(_tokenA, _tokenB, poolTokenA, poolTokenB, pylonAddress, _pairAddress);\\n\\n        getPylon[_tokenA][_tokenB] = pylonAddress;\\n        allPylons.push(pylonAddress);\\n    }\\n\\n    function setMaximumPercentageSync(uint _maximumPercentageSync) external {\\n        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n        maximumPercentageSync = _maximumPercentageSync;\\n    }\\n\\n    function setDeltaGammaThreshold(uint _deltaGammaThreshold) external {\\n        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n        deltaGammaThreshold = _deltaGammaThreshold;\\n    }\\n    function setDeltaGammaMinFee(uint _deltaGammaMinFee) external {\\n        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n        deltaGammaMinFee = _deltaGammaMinFee;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external  {\\n        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    //    function setMigrator(address _migrator) external {\\n    //        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n    //        migrator = _migrator;\\n    //    }\\n}\\n\",\"keccak256\":\"0x4a40b620314bebdb844caf88d48ac8681b31218610fbf3dca4e0cdd2cd85720d\"},\"contracts/energy/interfaces/IZirconEnergy.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface IZirconEnergy {\\n    function initialize(address _pylon, address _pair, address _token0, address _token1, uint _insurancePerMille, uint _minFee, uint _maxFee) external;\\n    function breakPiggybank(uint _requestedLiquidity) external returns (uint returnedLiquidity);\\n    function syncPylonFee() external;\\n    function syncPairFee() external;\\n    function getFeeByGamma(uint gammaMulDecimals) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xc39ad17d7b7fbd15e7738ec804d73bdfb7a86e8a153134d41d349c5a90e9e404\"},\"contracts/energy/interfaces/IZirconEnergyFactory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\ninterface IZirconEnergyFactory {\\n\\n    // Variables\\n    function allEnergies(uint p) external view returns (address);\\n    function getEnergy(address _tokenA, address _tokenB) external view returns (address pair);\\n    function allEnergiesLength() external view returns (uint);\\n    function energyCodeHash() external pure returns (bytes32);\\n\\n    // Functions\\n    function createEnergy(address, address, address, address) external returns (address energy);\\n    function createEnergyRev(address, address, address, address) external returns (address energy);\\n\\n}\\n\",\"keccak256\":\"0x4d14cbeaa52c092bd156d65a17d1dc91c6e03de1e7bb7bb8879445eb0c8a43dd\"},\"contracts/energy/interfaces/IZirconEnergyRevenue.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface IZirconEnergyRevenue {\\n    function initialize(address _pair, address _tokenA, address _tokenB, address energy0, address energy1, address pylon0, address pylon1) external;\\n    function calculate() external;\\n}\\n\",\"keccak256\":\"0x2868bbf0cd153241d0a7783b585bd8d55eea76e0505c4a77c8a2af77a2ed5e0c\"},\"contracts/interfaces/IZirconPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IZirconPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function energyRevenueAddress() external pure returns (address);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function burnOneSide(address to, bool isReserve0) external returns (uint amount);\\n    function mintOneSide(address to, bool isReserve0) external returns (uint liquidity, uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function tryLock() external;\\n\\n    function initialize(address, address, address) external;\\n}\\n\",\"keccak256\":\"0x613c91ef0eb7a0a24ec10354baee24d9e98040316999dc208cd57c7cb0843ace\"},\"contracts/interfaces/IZirconPoolToken.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IZirconPoolToken {\\n    function factory() external view returns (address);\\n    function isAnchor() external view returns (bool);\\n    function token() external view returns (address);\\n    function pair() external view returns (address);\\n    function pylon() external view returns (address);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    function initialize(address _token0, address _pair, address _pylon, bool _isAnchor) external;\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa5434d77bbd625e666241787ed6fee8198d36766ea5bd6f9cf66001844640db5\"},\"contracts/interfaces/IZirconPylon.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IZirconPylon {\\n    function initialized() external view returns (uint);\\n    function anchorPoolTokenAddress() external view returns (address);\\n    function floatPoolTokenAddress() external view returns (address);\\n    function getSyncReserves() external view returns  (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    // Called once by the factory at time of deployment\\n    // @_floatPoolToken -> Contains Address Of Float PT\\n    // @_anchorPoolToken -> Contains Address Of Anchor PT\\n    // @token0 -> Float token\\n    // @token1 -> Anchor token\\n    function initialize(address, address, address, address, address, address, address) external;\\n    // On init pylon we have to handle two cases\\n    // The first case is when we initialize the pair through the pylon\\n    // And the second one is when initialize the pylon with a pair al ready existing\\n    function initPylon(address _to) external returns (uint floatLiquidity, uint anchorLiquidity);\\n    // External Function called to mint pool Token\\n    // Liquidity have to be sent before\\n    function mintPoolTokens(address to, bool isAnchor) external returns (uint liquidity);\\n    function mintAsync100(address to, bool isAnchor) external returns (uint liquidity);\\n    function mintAsync(address to, bool shouldMintAnchor) external returns (uint liquidity);\\n    // Burn Async send both tokens 50-50\\n    // Liquidity has to be sent before\\n    function burnAsync(address _to, bool _isAnchor) external returns (uint amount0, uint amount1);\\n    // Burn send liquidity back to user burning Pool tokens\\n    // The function first uses the reserves of the Pylon\\n    // If not enough reserves it burns The Pool Tokens of the pylon\\n    function burn(address _to, bool _isAnchor) external returns (uint amount);\\n}\\n\",\"keccak256\":\"0x2c726cc87ca67baad8968763d5b38229e5443075ebe2f0bcf108770066d016c8\"},\"contracts/interfaces/IZirconPylonFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IZirconPylonFactory {\\n    function maximumPercentageSync() external view returns (uint);\\n\\n    function deltaGammaThreshold() external view returns (uint);\\n    function deltaGammaMinFee() external view returns (uint);\\n    function muUpdatePeriod() external view returns (uint);\\n\\n    function allPylons(uint p) external view returns (address);\\n    function getPylon(address tokenA, address tokenB) external view returns (address pair);\\n    function factory() external view returns (address);\\n    function energyFactory() external view returns (address);\\n    event PylonCreated(address indexed token0, address indexed token1, address poolToken0, address poolToken1, address pylon, address pair);\\n    function allPylonsLength() external view returns (uint);\\n    function pylonCodeHash() external pure returns (bytes32);\\n    // Adding Pylon\\n    // First Token is always the Float and the second one is the Anchor\\n    function addPylon(address _pairAddress, address _tokenA, address _tokenB) external returns (address pylonAddress);\\n\\n    function setFeeToSetter(address) external;\\n    function setMaximumPercentageSync(uint _maximumPercentageSync) external;\\n    function setDeltaGammaThreshold(uint _deltaGammaThreshold) external;\\n    function setDeltaGammaMinFee(uint _deltaGammaMinFee) external;\\n}\\n\",\"keccak256\":\"0x7da79ff385043e3f1881c9f404a99158a0bc8018e9137c24a02862ec13a1c54e\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\n// a library for performing various math operations\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        z = x > y ? x : y;\\n    }\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61c3f60a7c20c5f1a38bc5c4882b4b3f4bf68f08211a7be9e03fc203d749aa70\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xc274a953581254f283cdf1a3da0cf400ed427c3f88d7564174dfacc86c5c4c58\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1ce089a59dbf0939611d747e877d0ef47659a1bd78c1e1414400c8d68b5c6b\"},\"contracts/libraries/ZirconLibrary.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./SafeMath.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary ZirconLibrary {\\n    using SafeMath for uint256;\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n\\n    // Same Function as Uniswap Library, used here for incompatible solidity versions\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // TODO: check getAmountsOut function of v2 library, they use a slightly different formula\\n    // This function takes two variables and look at the maximum possible with the ration given by the reserves\\n    // @pR0, @pR1 the pair reserves\\n    // @b0, @b1 the balances to calculate\\n    function _getMaximum(uint _reserve0, uint _reserve1, uint _b0, uint _b1) pure internal returns (uint maxX, uint maxY)  {\\n\\n        //Expresses b1 in units of reserve0\\n        uint px = _reserve0.mul(_b1)/_reserve1;\\n\\n        if (px > _b0) {\\n            maxX = _b0;\\n            maxY = _b0.mul(_reserve1)/_reserve0; //b0 in units of reserve1\\n        } else {\\n            maxX = px; //max is b1 but in reserve0 units\\n            maxY = _b1;\\n        }\\n    }\\n\\n    // @notice This function converts amount, specifying which tranch uses with @isAnchor, to pool token share\\n    // @_amount is the quantity to convert\\n    // @_totalSupply is the supply of the pt's tranch\\n    // @reserve0, @_gamma, @vab are the variables needed to the calculation of the amount\\n    function calculatePTU(bool _isAnchor, uint _amount, uint _totalSupply, uint _reserve, uint _reservePylon, uint _gamma, uint _vab) pure internal returns (uint liquidity){\\n        if (_isAnchor) {\\n            liquidity = _amount.mul(_totalSupply)/_vab;\\n        }else {\\n            uint numerator = _amount.mul(_totalSupply);\\n            uint resTranslated = _reserve.mul(_gamma).mul(2)/1e18;\\n            uint denominator = (_reservePylon.add(resTranslated));\\n\\n            liquidity = (numerator/denominator);\\n        }\\n    }\\n\\n    // @notice This function converts pool token share, specifying which tranches with @isAnchor, to token amount\\n    // @_ptuAmount is the quantity to convert\\n    // @_totalSupply is the supply of the pt of the tranches\\n    // @reserve0, @_gamma, @vab are the variables needed to the calculation of the amount\\n    function calculatePTUToAmount(bool _isAnchor, uint _ptuAmount, uint _totalSupply, uint _reserve0, uint _reservePylon0, uint _gamma, uint _vab) pure internal returns (uint amount) {\\n        if (_isAnchor) {\\n            amount = _vab.mul(_ptuAmount)/_totalSupply;\\n        } else {\\n            amount = (((_reserve0.mul(_gamma).mul(2)/1e18).add(_reservePylon0)).mul(_ptuAmount))/_totalSupply;\\n        }\\n    }\\n\\n    function slashLiabilityOmega(uint tpvAnchorTranslated, uint anchorReserve, uint gammaMulDecimals, uint virtualAnchorBalance) pure internal returns (uint omegaMulDecimals) {\\n        //Omega is the \\\"survival factor\\\" i.e how much of the anchor balance survives slashing and can be withdrawn.\\n        //It's applied to the user's liquidity tokens to avoid changing other core functions.\\n        //This adjustment is only used for share calculations, the full amount of tokens is removed.\\n        omegaMulDecimals = ((1e18 - gammaMulDecimals).mul(tpvAnchorTranslated))/(virtualAnchorBalance.sub(anchorReserve));\\n    }\\n\\n    function calculateDeltaGamma(uint oldGamma, uint newGamma) pure internal returns (uint average) {\\n\\n    }\\n\\n    function absoluteDiff(uint value1, uint value2) pure internal returns (uint abs) {\\n        if (value1 >= value2) {\\n            abs = value1 - value2;\\n        } else {\\n            abs = value2 - value1;\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xdad3d8d019f9bd731645ed51d1ec48a139457ab31c313afe7d7d2519b0a6cd90\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615fac380380615fac8339818101604052604081101561003357600080fd5b508051602090910151600280546001600160a01b039384166001600160a01b03199182161790915560038054939092169216919091179055600a600555668e1bc9bf0400006006556105dc60075560f0600855615f17806100956000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806379281abe11610097578063a3ad52b811610066578063a3ad52b814610233578063afc3743f1461023b578063be25db5a14610258578063c45a01551461027557610100565b806379281abe146101c557806379459801146101fd578063966545e814610205578063a2e74af61461020d57610100565b80635942f95e116100d35780635942f95e146101795780635d58ab44146101815780636c0fb018146101a0578063734e3912146101a857610100565b8063094b7415146101055780630e0f29731461012957806317d1ff9f146101575780632be90b321461015f575b600080fd5b61010d61027d565b604080516001600160a01b039092168252519081900360200190f35b61010d6004803603604081101561013f57600080fd5b506001600160a01b038135811691602001351661028c565b61010d6102af565b6101676102be565b60408051918252519081900360200190f35b6101676102c4565b61019e6004803603602081101561019757600080fd5b50356102ca565b005b61016761031e565b61019e600480360360208110156101be57600080fd5b5035610324565b61010d600480360360608110156101db57600080fd5b506001600160a01b038135811691602081013582169160409091013516610378565b6101676106e7565b6101676106ed565b61019e6004803603602081101561022357600080fd5b50356001600160a01b031661071f565b610167610790565b61010d6004803603602081101561025157600080fd5b5035610796565b61019e6004803603602081101561026e57600080fd5b50356107bd565b61010d610811565b6004546001600160a01b031681565b60006020818152928152604080822090935290815220546001600160a01b031681565b6003546001600160a01b031681565b60075481565b60065481565b6004546001600160a01b03163314610319576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600555565b60015490565b6004546001600160a01b03163314610373576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600655565b6000816001600160a01b0316836001600160a01b031614156103e1576040805162461bcd60e51b815260206004820152601760248201527f5a463a204944454e544943414c5f414444524553534553000000000000000000604482015290519081900360640190fd5b6001600160a01b038381166000908152602081815260408083208685168452909152902054161561044c576040805162461bcd60e51b815260206004820152601060248201526f5a463a2050594c4f4e5f45584953545360801b604482015290519081900360640190fd5b610457838386610820565b9050600061046584836108af565b9050600061047384846108af565b9050600061048384888888610949565b60025460408051631ac3b23b60e11b81526001600160a01b03878116600483015286811660248301528a8116604483015289811660648301528b8116608483015292831660a482015282841660c482015290519293509086169163358764769160e48082019260009290919082900301818387803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b505060408051633fb3e5cd60e21b81526001600160a01b038a811660048301528b8116602483015288811660448301526000606483018190529251908816945063fecf973493506084808301939282900301818387803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505060408051633fb3e5cd60e21b81526001600160a01b0389811660048301528b811660248301528881166044830152600160648301529151918616935063fecf9734925060848082019260009290919082900301818387803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b5050604080516001600160a01b0387811682528681166020830152888116828401528b811660608301529151828a169450918a1692507fab83557b3a718996d408afe08287d09bafed3590c7ae61a430d518d3199d4590919081900360800190a35050506001600160a01b03928316600090815260208181526040808320948616835293905291822080549382166001600160a01b0319948516811790915560018054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69092018054909316909117909155919050565b60085481565b6000604051806020016106ff906109e8565b6020820181038252601f19601f8201166040525080519060200120905090565b6004546001600160a01b0316331461076e576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60055481565b600181815481106107a357fe5b6000918252602090912001546001600160a01b0316905081565b6004546001600160a01b0316331461080c576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600755565b6002546001600160a01b031681565b6000606060405180602001610834906109e8565b601f1982820381018352601f9091011660408181526bffffffffffffffffffffffff19606089811b821660208581019190915289821b831660348601529088901b90911660488401528151603c818503018152605c909301909152815191810191909120825192935091829184016000f59695505050505050565b60006060604051806020016108c3906109f5565b6020820181038252601f19601f8201166040525090506000848460405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f595945050505050565b6003546040805163245cb9e160e21b81526001600160a01b03878116600483015286811660248301528581166044830152848116606483015291516000939290921691639172e7849160848082019260209290919082900301818787803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b505050506040513d60208110156109dd57600080fd5b505195945050505050565b6146fb80610a0383390190565b610de5806150fe8339019056fe6080604052662386f26fc10000601555600060165534801561002057600080fd5b506000805460ff19166001179055600480546001600160a01b031916331790556146ac8061004f6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063966dae0e11610104578063ba7b3dea116100a2578063ed6b92cd11610071578063ed6b92cd1461045d578063efefd9f914610465578063f29401c41461046d578063fef9349214610493576101cf565b8063ba7b3dea146103d8578063ba9a7a5614610406578063c561cf4f1461040e578063e845d4e514610455576101cf565b8063a8b08982116100de578063a8b0898214610392578063ac9370f31461039a578063b32b3d92146103c8578063b7073003146103d0576101cf565b8063966dae0e1461037a57806397ed64db146103825780639892c7f11461038a576101cf565b806333cdde4e11610171578063590f921d1161014b578063590f921d1461032057806387d9b853146103285780638d470e22146103305780638ffa32361461035e576101cf565b806333cdde4e1461026a5780633587647614610298578063402d82c1146102f2576101cf565b8063158ef93e116101ad578063158ef93e14610238578063192b65d81461025257806322e489a41461025a5780633339dc1a14610262576101cf565b806306e53aec146101d457806308acbe82146101f85780630a22d5f314610200575b600080fd5b6101dc61049b565b604080516001600160a01b039092168252519081900360200190f35b6101dc6104aa565b6102086104b9565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6102406104e3565b60408051918252519081900360200190f35b6102406104e9565b6101dc6104ef565b6102406104fe565b6102406004803603604081101561028057600080fd5b506001600160a01b0381351690602001351515610504565b6102f0600480360360e08110156102ae57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c09091013516610927565b005b6102fa610aef565b604080516001600160a01b03938416815291909216602082015281519081900390910190f35b610240610b05565b610240610b0b565b6102406004803603604081101561034657600080fd5b506001600160a01b0381351690602001351515610b11565b610366610d9c565b604080519115158252519081900360200190f35b6101dc610dac565b610240610dbb565b6101dc610dc1565b6101dc610dd0565b610240600480360360408110156103b057600080fd5b506001600160a01b0381351690602001351515610ddf565b61024061126b565b610240611271565b610240600480360360408110156103ee57600080fd5b506001600160a01b0381351690602001351515611277565b6102406116f1565b61043c6004803603604081101561042457600080fd5b506001600160a01b03813516906020013515156116f7565b6040805192835260208301919091528051918290030190f35b610240611bf9565b610240611bff565b610240611c05565b61043c6004803603602081101561048357600080fd5b50356001600160a01b0316611c0b565b610240611f82565b6006546001600160a01b031681565b6008546001600160a01b031681565b6014546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60165481565b60095481565b6007546001600160a01b031681565b600c5481565b6000805460ff1661054a576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff191690556016546001146105a1576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b6105a9611f88565b6000826105c1576006546001600160a01b03166105ce565b6007546001600160a01b03165b90506000806105db6104b9565b50600154604080516370a0823160e01b81523060048201529051939550919350600092839283926001600160a01b0316916370a0823191602480820192602092909190829003018186803b15801561063257600080fd5b505afa158015610646573d6000803e3d6000fd5b505050506040513d602081101561065c57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b505050506040513d60208110156106d957600080fd5b505190506106f6826001600160701b03881663ffffffff61236e16565b9350610711816001600160701b03871663ffffffff61236e16565b925061071e8460006123c4565b935061072b8360016123c4565b925060008061073c86868d8c612558565b915091508199508a156107525760098054820190555b505050506000811180156107665750600082115b6107a8576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b6001546003546107c5916001600160a01b03908116911684612754565b6002546003546107e2916001600160a01b03908116911683612754565b600354604080516335313c2160e11b815230600482015290516001600160a01b0390921691636a627842916024808201926020929091908290030181600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b505050506040513d602081101561085957600080fd5b5050604080516340c10f1960e01b81526001600160a01b038a81166004830152602482018990529151918716916340c10f199160448082019260009290919082900301818387803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b5050604080513381526020810186905280820185905290517f9a36e9f82fd3ab4ec26a87598c0f7f4519b7895fa6a0bca1968b486ee019b0829350908190036060019150a161090e6128e4565b50506000805460ff191660011790555091949350505050565b60005460ff1661096c576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff191690556004546001600160a01b031633146109c5576040805162461bcd60e51b815260206004820152600d60248201526c2d281d102327a92124a22222a760991b604482015290519081900360640190fd5b600680546001600160a01b03808a166001600160a01b031992831617909255600780548984169083161790556003805486841692168217905560408051630dfe168160e01b8152905192881692630dfe168191600481810192602092909190829003018186803b158015610a3857600080fd5b505afa158015610a4c573d6000803e3d6000fd5b505050506040513d6020811015610a6257600080fd5b505160088054604080518082019091526001600160a01b03998a16808252988a166020909101819052600180546001600160a01b0319908116909a178155600280548b16909217909155600580548a16978b169790971790965560ff60a01b191691881692909214600160a01b0217909416941693909317909155506000805460ff191690911790555050565b6001546002546001600160a01b03918216911682565b60105481565b60125481565b6000601654600114610b60576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b60005460ff16610ba5576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055610bb7611f88565b600080610bc26104b9565b5091509150600080610bd56000806129b0565b915091506000808715610ca957600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b50519050610c74816001600160701b03881663ffffffff61236e16565b600754909350610c9d9084906001600160701b0389169087906001600160a01b03168e8e6129f5565b9098509150610d6b9050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610cf457600080fd5b505afa158015610d08573d6000803e3d6000fd5b505050506040513d6020811015610d1e57600080fd5b50519050610d3b816001600160701b03891663ffffffff61236e16565b600654909350610d649084906001600160701b038a169088906001600160a01b03168e8e6129f5565b9098509150505b8715610d7a5760098054820190555b610d82612c6a565b50506000805460ff19166001179055509295945050505050565b600854600160a01b900460ff1681565b6004546001600160a01b031681565b600a5481565b6005546001600160a01b031681565b6003546001600160a01b031681565b6000805460ff16610e25576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055601654600114610e7c576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b610e84611f88565b600080610e8f6104b9565b509150915060008415610f3657600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ee757600080fd5b505afa158015610efb573d6000803e3d6000fd5b505050506040513d6020811015610f1157600080fd5b50519050610f2e816001600160701b03851663ffffffff61236e16565b915050610fcc565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b50519050610fc8816001600160701b03861663ffffffff61236e16565b9150505b610fd681866123c4565b90506000811161102d576040805162461bcd60e51b815260206004820152601760248201527f5a503a20494e53554646494349454e545f414d4f554e54000000000000000000604482015290519081900360640190fd5b61106585611046576001546001600160a01b0316611053565b6002546001600160a01b03165b6003546001600160a01b031683612754565b6000806110728388612f9b565b915091506000806110a784848b8c611095576006546001600160a01b03166110a2565b6007546001600160a01b03165b612558565b9150915081975088156110bd5760098054820190555b6003546008546001600160a01b039091169063432275e6903090600160a01b900460ff166110eb578b6110ee565b8b155b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018215151515815260200192505050606060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050506040513d606081101561116b57600080fd5b50899050611184576006546001600160a01b0316611191565b6007546001600160a01b03165b6001600160a01b03166340c10f198b8a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156111f057600080fd5b505af1158015611204573d6000803e3d6000fd5b50505050505050506112146128e4565b60408051338152602081018390528615158183015290517f1889e9c3cb9a926b5ab9da8b1f34e8883f1c84e43a61525a2551c32d779213279181900360600190a150506000805460ff191660011790555092915050565b60115481565b600d5481565b6000805460ff166112bd576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055601654600114611314576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b61131c611f88565b600082611334576006546001600160a01b0316611341565b6007546001600160a01b03165b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051905080611406576040805162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b604482015290519081900360640190fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d602081101561146b57600080fd5b5051600354909150869086906001600160a01b031660008061148e848789613018565b9150915061149c81856123c4565b98506114cb846114b7576001546001600160a01b03166114c4565b6002546001600160a01b03165b868b612754565b868210156115f75760006114e5888463ffffffff61236e16565b905060006114f486838a6130b8565b90506114ff81613320565b90506000861561151857611512826133ee565b90925090505b611523868784612754565b600854600090600160a01b900460ff1661153d5787611540565b87155b604080516302ce510960e41b81526001600160a01b038c8116600483015283151560248301529151929350600092918a1691632ce510909160448082019260209290919082900301818787803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050506040513d60208110156115c357600080fd5b50519d8e019d90506115f1826115da5760006115dc565b815b836115e757826115ea565b60005b858d613474565b50505050505b60408051632770a7eb60e21b81523060048201526024810189905290516001600160a01b038a1691639dc29fac91604480830192600092919082900301818387803b15801561164557600080fd5b505af1158015611659573d6000803e3d6000fd5b505050505050505050841561169257600954819061167d908463ffffffff61357616565b8161168457fe5b600980549290910490910390555b61169a612c6a565b60408051338152602081018690528615158183015290517f5cf7281eb36e25a92ffd0cff3089777ca0cb41d28e8c7158c234b1eae9a07ed29181900360600190a150506000805460ff191660011790555092915050565b6103e881565b60008054819060ff1661173f576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055601654600114611796576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b61179e611f88565b6000836117b6576006546001600160a01b03166117c3565b6007546001600160a01b03165b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561180f57600080fd5b505afa158015611823573d6000803e3d6000fd5b505050506040513d602081101561183957600080fd5b5051905080611880576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b50519050600080806118f56104b9565b506001600160701b031691506001600160701b0316915060006119196000806129b0565b50905060008a6119895761196a84670de0b6b3a7640000611956600a5461194a60028861357690919063ffffffff16565b9063ffffffff61357616565b8161195d57fe5b049063ffffffff6135d916565b61197a878663ffffffff61357616565b8161198157fe5b0486036119a7565b60095461199c878563ffffffff61357616565b816119a357fe5b0486035b90508087106119ea576040805162461bcd60e51b815260206004820152600a60248201526916940e88115610d1515160b21b604482015290519081900360640190fd5b5060006119f88b88886130b8565b9050611a0381613320565b90508a15611a1957611a14816133ee565b955090505b600354611a30906001600160a01b03168083612754565b50506003546040805163226bf2d160e21b81526001600160a01b038d811660048301528251600096508695509316926389afcb449260248084019391929182900301818787803b158015611a8357600080fd5b505af1158015611a97573d6000803e3d6000fd5b505050506040513d6040811015611aad57600080fd5b5080516020909101516008549193509150600160a01b900460ff16611ad25780611ad4565b815b600854909850600160a01b900460ff16611aee5781611af0565b805b9650611afe8888858d613474565b60408051632770a7eb60e21b81523060048201526024810187905290516001600160a01b03881691639dc29fac91604480830192600092919082900301818387803b158015611b4c57600080fd5b505af1158015611b60573d6000803e3d6000fd5b505050508815611b94576009548490611b7f908763ffffffff61357616565b81611b8657fe5b600980549290910490910390555b611b9c612c6a565b60408051338152602081018a905280820189905290517fb83dbb1f0386f1b6d6f534f325d617e3f96f2971cca29021702094328c1cb70c9181900360600190a150506000805460ff19166001179055509396929550919350505050565b60135481565b600e5481565b600f5481565b60008054819060ff16611c53576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff1916905560165415611ca8576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d6020811015611d1d57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d7057600080fd5b505afa158015611d84573d6000803e3d6000fd5b505050506040513d6020811015611d9a57600080fd5b505190508115801590611dad5750600081115b611def576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b600080611dfa613628565b600985905590925090506001600160701b03821615801590611e2557506000816001600160701b0316115b15611ef1576000611e6d836001600160701b0316611e55846001600160701b03168861357690919063ffffffff16565b81611e5c57fe5b60095491900463ffffffff6135d916565b9050600281046009541015611eb3576009548190611e9990670de0b6b3a764000063ffffffff61357616565b81611ea057fe5b04670de0b6b3a764000003600a55611eeb565b600954611ec790600463ffffffff61357616565b611edf82670de0b6b3a764000063ffffffff61357616565b81611ee657fe5b04600a555b50611efe565b6706f05b59d3b20000600a555b600754611f269084906000906001600160701b038516906001600160a01b03168b60016129f5565b50600654909550611f519085906000906001600160701b038616906001600160a01b03168b836129f5565b50600a54600b559550611f62612c6a565b5050600160168190556000805460ff191690911790555091939092509050565b600b5481565b6003546001600160a01b0316331461200357600360009054906101000a90046001600160a01b03166001600160a01b03166311816b046040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611fea57600080fd5b505af1158015611ffe573d6000803e3d6000fd5b505050505b60008061200e613628565b9150915060008061201d6104b9565b50600a54919350915060006120446001600160701b0387811690871663ffffffff61357616565b905060135460001415801561206157506001600160701b03861615155b801561207557506001600160701b03851615155b1561236657600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156120bf57600080fd5b505afa1580156120d3573d6000803e3d6000fd5b505050506040513d60208110156120e957600080fd5b50519050600061211361210c6001600160701b038916600263ffffffff61357616565b60006136f1565b90506000670de0b6b3a7640000905060006121616013546121338761381e565b028561214060125461381e565b02670de0b6b3a7640000028161215257fe5b8491900463ffffffff61236e16565b90506000670de0b6b3a764000061217e858463ffffffff61357616565b8161218557fe5b049050612190613870565b670de0b6b3a76400006121b8600b54670de0b6b3a7640000038361357690919063ffffffff16565b816121bf57fe5b60098054929091049091019081905560028504906121ec906001600160701b038b1663ffffffff61236e16565b1015612234576009548490612210906001600160701b038b1663ffffffff61236e16565b670de0b6b3a7640000028161222157fe5b04670de0b6b3a764000003600a5561227b565b612257600461194a8b6001600160701b031660095461236e90919063ffffffff16565b61226f85670de0b6b3a764000063ffffffff61357616565b8161227657fe5b04600a555b6000612292600f544361236e90919063ffffffff16565b905080156122fa57600e546122ad908263ffffffff6135d916565b6122d6600d546122ca600e54600c5461357690919063ffffffff16565b9063ffffffff6135d916565b816122dd57fe5b04600c55600a546122ee90896139fd565b600d5543600f5561231c565b612318612309600a548a6139fd565b600d549063ffffffff6135d916565b600d555b7f72ff579f9fee6120ee4fa25381562f2fb89e34ebedaf4180032d16db57237b55600954600a54604051808381526020018281526020019250505060405180910390a15050505050505b505050505050565b808203828111156123be576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b92915050565b6000806123d084613a14565b5090506124046040518060400160405280600f81526020016e029b7b634b234ba3c9d103332b29d1608d1b81525082613d14565b821561242c57600254600854612427916001600160a01b03908116911683612754565b612540565b600154600354612449916001600160a01b03908116911683612754565b600080612454613628565b91509150600061247784846001600160701b0316846001600160701b0316613dc6565b6003546008549192506001600160a01b03169063022c0d9f90600160a01b900460ff166124a457826124a7565b60005b600854600160a01b900460ff166124bf5760006124c1565b835b600854604080516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b0316604483015260806064830152600060848301819052905160c48084019382900301818387803b15801561252457600080fd5b505af1158015612538573d6000803e3d6000fd5b505050505050505b612550848263ffffffff61236e16565b949350505050565b600080600080612566613628565b915091506000806125756104b9565b50915091508715612668576125cc846001600160701b03166125ae600261194a876001600160701b03168f61357690919063ffffffff16565b816125b557fe5b046125c78b600263ffffffff61357616565b613eaa565b94506126618886896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561260c57600080fd5b505afa158015612620573d6000803e3d6000fd5b505050506040513d602081101561263657600080fd5b505161264c6001600160701b03881660006136f1565b856001600160701b0316600a54600954613ec0565b9550612747565b6126af836001600160701b0316612696600261194a886001600160701b03168e61357690919063ffffffff16565b8161269d57fe5b046125c78c600263ffffffff61357616565b94506127448886896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d602081101561271957600080fd5b505161272f6001600160701b03891660006136f1565b866001600160701b0316600a54600954613ec0565b95505b5050505094509492505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106128015780518252601f1990920191602091820191016127e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612863576040519150601f19603f3d011682016040523d82523d6000602084013e612868565b606091505b5091509150818015612896575080511580612896575080806020019051602081101561289357600080fd5b50515b6128dd576040805162461bcd60e51b815260206004820152601360248201527216940e881514905394d1915497d19052531151606a1b604482015290519081900360640190fd5b5050505050565b6000806128ef613628565b91509150600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294157600080fd5b505afa158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505160135561298c6001600160701b0383811690831663ffffffff61357616565b6012555050601480546001600160e01b0316600160e01b4263ffffffff1602179055565b6000806000806129be613628565b915091506129d5826001600160701b0316876136f1565b93506129ea816001600160701b0316866136f1565b925050509250929050565b60008060008811612a3e576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b6000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7957600080fd5b505afa158015612a8d573d6000803e3d6000fd5b505050506040513d6020811015612aa357600080fd5b5051600a546009549192509082612b8457604080516340c10f1960e01b81526000600482018190526103e8602483015291516001600160a01b038b16926340c10f19926044808201939182900301818387803b158015612b0257600080fd5b505af1158015612b16573d6000803e3d6000fd5b505050508515612b3957612b328b6103e863ffffffff61236e16565b9450612b7f565b612b7c6103e8612b5084600263ffffffff61357616565b612b688e670de0b6b3a764000063ffffffff61357616565b81612b6f57fe5b049063ffffffff61236e16565b94505b612ba2565b612b8e8b876123c4565b9350612b9f8685858c8e8787613ec0565b94505b5050856001600160a01b03166340c10f1986856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612c0457600080fd5b505af1158015612c18573d6000803e3d6000fd5b505060408051338152602081018690528715158183015290517f19d363807bf5ba06f3320318d009a9851c28f799660016f386c9960478c46ea29350908190036060019150a150965096945050505050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612d3257600080fd5b505afa158015612d46573d6000803e3d6000fd5b505050506040513d6020811015612d5c57600080fd5b50519050600080612d6d84846129b0565b915091506000600460009054906101000a90046001600160a01b03166001600160a01b031663a3ad52b86040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc157600080fd5b505afa158015612dd5573d6000803e3d6000fd5b505050506040513d6020811015612deb57600080fd5b5051905060006064612e03858463ffffffff61357616565b81612e0a57fe5b04905060006064612e21858563ffffffff61357616565b81612e2857fe5b04905060026001600160701b038316046001600160701b031687118015612e63575060026001600160701b038216046001600160701b031686115b15612f7e57600080612eb18787612e9860026001600160701b0389165b8e916001600160701b0391041663ffffffff61236e16565b612eac60026001600160701b038916612e80565b613f55565b9150915081600014612eda57600154600354612eda916001600160a01b03908116911684612754565b8015612efd57600254600354612efd916001600160a01b03908116911683612754565b600354604080516335313c2160e11b815230600482015290516001600160a01b0390921691636a627842916024808201926020929091908290030181600087803b158015612f4a57600080fd5b505af1158015612f5e573d6000803e3d6000fd5b505050506040513d6020811015612f7457600080fd5b5050970396909503945b612f866128e4565b612f9287878484613fb0565b50505050505050565b600080600080612fa9613628565b915091508415612fd857612fd360028704826001600160701b0316846001600160701b0316613dc6565b612fdd565b600286045b9350846130095761300460028704836001600160701b0316836001600160701b0316613dc6565b6129ea565b60028604925050509250929050565b600a5460095460009182918261302e81806129b0565b50905060008061303c6104b9565b509150915060008a61304e5782613050565b815b6001600160701b0316905060008b613068578461307c565b601454600160701b90046001600160701b03165b905061308d8c838d84868c8c613ec0565b98506130a78c61309d8b8d613eaa565b8d84868c8c614237565b975050505050505050935093915050565b60008060006130c86001806129b0565b915091506000806130d76104b9565b5091509150600088156131ec576130f584600263ffffffff61357616565b60095461319890613115906001600160701b03861663ffffffff61236e16565b600354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561316057600080fd5b505afa158015613174573d6000803e3d6000fd5b505050506040513d602081101561318a57600080fd5b50519063ffffffff61357616565b8161319f57fe5b0490506131e56131b685600263ffffffff61357616565b6131cf836001600160701b03861663ffffffff61357616565b816131d657fe5b8391900463ffffffff6135d916565b90506132ba565b600354604080516370a0823160e01b81523060048201529051670de0b6b3a764000092613280926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561324557600080fd5b505afa158015613259573d6000803e3d6000fd5b505050506040513d602081101561326f57600080fd5b5051600a549063ffffffff61357616565b8161328757fe5b0490506132b761329e86600263ffffffff61357616565b6131cf836001600160701b03871663ffffffff61357616565b90505b866132cb898363ffffffff61357616565b816132d257fe5b049550600086116133145760405162461bcd60e51b815260040180806020018281038252602181526020018061462c6021913960400191505060405180910390fd5b50505050509392505050565b60008061332c83613a14565b50600354909150613347906001600160a01b03168083612754565b600354600854604080516302ce510960e41b81526001600160a01b038084166004830152600160a01b90930460ff1615602482015290519190921691632ce510909160448083019260209291908290030181600087803b1580156133aa57600080fd5b505af11580156133be573d6000803e3d6000fd5b505050506040513d60208110156133d457600080fd5b506133e79050838263ffffffff61236e16565b9392505050565b60008060006133fb6104b9565b506001600160701b031691505060006134156000806129b0565b91506000905061343b61342f83600263ffffffff61357616565b84600a54600954614289565b905061344781876142c7565b9350670de0b6b3a7640000613462828863ffffffff61357616565b8161346957fe5b049450505050915091565b8115613570578383156134b45760008061348c613628565b6001600160701b031691506001600160701b031691506134ad868383613dc6565b8301925050505b600254600854604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561350857600080fd5b505afa15801561351c573d6000803e3d6000fd5b505050506040513d602081101561353257600080fd5b505190506000613548838663ffffffff61357616565b905080821115612f9257600254600854612f92916001600160a01b03908116911686846143fb565b50505050565b60008115806135915750508082028282828161358e57fe5b04145b6123be576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b808201828110156123be576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b600080600080600360009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561367c57600080fd5b505afa158015613690573d6000803e3d6000fd5b505050506040513d60608110156136a657600080fd5b5080516020909101516008549193509150600160a01b900460ff166136cb57806136cd565b815b600854909450600160a01b900460ff166136e757816136e9565b805b925050509091565b600354604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561374157600080fd5b505afa158015613755573d6000803e3d6000fd5b505050506040513d602081101561376b57600080fd5b5051600354604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156137b857600080fd5b505afa1580156137cc573d6000803e3d6000fd5b505050506040513d60208110156137e257600080fd5b505190508015806137f1575081155b6138135780613806868463ffffffff61357616565b8161380d57fe5b04613815565b835b95945050505050565b60006003821115613861575080600160028204015b8181101561385b5780915060028182858161384a57fe5b04018161385357fe5b049050613833565b5061386b565b811561386b575060015b919050565b6010546004805460408051637945980160e01b815290514394936000936001600160a01b03169263794598019281830192602092829003018186803b1580156138b857600080fd5b505afa1580156138cc573d6000803e3d6000fd5b505050506040513d60208110156138e257600080fd5b505190508282038110156139f857600a54601154808210156706f05b59d3b200008310158082146139a757600081156139295750600a546706f05b59d3b1ffff1901613938565b50600a546706f05b59d3b20000035b82156139765760006139528587038363ffffffff61357616565b9050670de0b6b3a7640000600b5482011161397057600b8054820190555b506139a1565b600061398a8686038363ffffffff61357616565b9050600b54811161399f57600b805482900390555b505b506139ec565b81156139d357600b5483850390670de0b6b3a7640000908201116139a157600b805482019055506139ec565b600b548484039081116139ea57600b805482900390555b505b50505060115560108390555b505050565b6000818310613a0f57508082036123be565b500390565b6000806000613a27600c54600d5461458e565b90506000600460009054906101000a90046001600160a01b03166001600160a01b0316635942f95e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613a7957600080fd5b505afa158015613a8d573d6000803e3d6000fd5b505050506040513d6020811015613aa357600080fd5b505160048054604080516315f4859960e11b815290519394506000936001600160a01b0390921692632be90b32928282019260209290829003018186803b158015613aed57600080fd5b505afa158015613b01573d6000803e3d6000fd5b505050506040513d6020811015613b1757600080fd5b50519050818310613c4e576001935060008183613b3e81870361271063ffffffff61357616565b81613b4557fe5b04019050613be0600860009054906101000a90046001600160a01b03166001600160a01b0316630269b9ca600a546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613ba757600080fd5b505afa158015613bbb573d6000803e3d6000fd5b505050506040513d6020811015613bd157600080fd5b5051829063ffffffff6135d916565b90506127108110613c2b576040805162461bcd60e51b815260206004820152601060248201526f0b4a074408ccaca40e8dede40d0d2ced60831b604482015290519081900360640190fd5b612710613c3e888363ffffffff61357616565b81613c4557fe5b04955050613cd0565b600854600a5460408051630134dce560e11b8152600481019290925251600096506001600160a01b0390921691630269b9ca91602480820192602092909190829003018186803b158015613ca157600080fd5b505afa158015613cb5573d6000803e3d6000fd5b505050506040513d6020811015613ccb57600080fd5b505194505b60408051868152851515602082015281517f3e2f131ffe50fecbee1df82d56b70021104f94a384c753f5f1022ab9b24c2eb3929181900390910190a1505050915091565b613dc282826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613d5f578181015183820152602001613d47565b50505050905090810190601f168015613d8c5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052935061459d92505050565b5050565b6000808411613e065760405162461bcd60e51b815260040180806020018281038252602b81526020018061464d602b913960400191505060405180910390fd5b600083118015613e165750600082115b613e515760405162461bcd60e51b81526004018080602001828103825260288152602001806146046028913960400191505060405180910390fd5b6000613e65856103e563ffffffff61357616565b90506000613e79828563ffffffff61357616565b90506000613e93836122ca886103e863ffffffff61357616565b9050808281613e9e57fe5b04979650505050505050565b6000818310613eb957816133e7565b5090919050565b60008715613ee85781613ed9888863ffffffff61357616565b81613ee057fe5b049050613f4a565b6000613efa888863ffffffff61357616565b90506000670de0b6b3a7640000613f1c600261194a8a8963ffffffff61357616565b81613f2357fe5b0490506000613f38878363ffffffff6135d916565b9050808381613f4357fe5b0493505050505b979650505050505050565b6000808085613f6a888663ffffffff61357616565b81613f7157fe5b04905084811115613f9f5784925086613f90848863ffffffff61357616565b81613f9757fe5b049150613fa6565b8092508391505b5094509492505050565b60006001600160701b0383168511156140a757600154600354613ff8916001600160a01b039081169116613ff3886001600160701b03881663ffffffff61236e16565b612754565b600354600854604080516321913af360e11b8152306004820152600160a01b90920460ff1615156024830152516001600160a01b039092169163432275e6916044808201926060929091908290030181600087803b15801561405957600080fd5b505af115801561406d573d6000803e3d6000fd5b505050506040513d606081101561408357600080fd5b5051601480546001600160701b0319166001600160701b03861617905590506140c3565b601480546001600160701b0319166001600160701b0387161790555b83826001600160701b031610156141bb57600254600354614104916001600160a01b039081169116613ff3876001600160701b03871663ffffffff61236e16565b600354600854604080516321913af360e11b8152306004820152600160a01b90920460ff16156024830152516001600160a01b039092169163432275e6916044808201926060929091908290030181600087803b15801561416457600080fd5b505af1158015614178573d6000803e3d6000fd5b505050506040513d606081101561418e57600080fd5b505160148054600160701b600160e01b031916600160701b6001600160701b0386160217905590506141e0565b60148054600160701b600160e01b031916600160701b6001600160701b038716021790555b601454604080516001600160701b038084168252600160701b909304909216602083015280517f1d96001f313f6446e46c7776b79d231589555627a46fa2388f3220937fc79e519281900390910190a15050505050565b600087156142505785613ed9838963ffffffff61357616565b856142758861194a87670de0b6b3a76400006119566002848d8c63ffffffff61357616565b8161427c57fe5b0498975050505050505050565b600061429b828563ffffffff61236e16565b6142b6670de0b6b3a76400008590038763ffffffff61357616565b816142bd57fe5b0495945050505050565b6000670de0b6b3a76400008310156143f2576000670de0b6b3a76400006142f68486830363ffffffff61357616565b816142fd57fe5b600354600854604080516370a0823160e01b81526001600160a01b03928316600482015290519490930494506000939116916370a08231916024808301926020929190829003018186803b15801561435457600080fd5b505afa158015614368573d6000803e3d6000fd5b505050506040513d602081101561437e57600080fd5b50519050808210156143b1576003546008546143a8916001600160a01b03908116911681856143fb565b600092506143eb565b6003546008546143cf916001600160a01b03908116911681846143fb565b836143e0838363ffffffff61236e16565b816143e757fe5b0492505b50506123be565b50600092915050565b60006060856001600160a01b03166040518060600160405280602581526020016145df602591398051602091820120604080516001600160a01b03808b166024830152891660448201526064808201899052825180830390910181526084909101825292830180516001600160e01b03166001600160e01b0319909316929092178252518251909182918083835b602083106144a85780518252601f199092019160209182019101614489565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461450a576040519150601f19603f3d011682016040523d82523d6000602084013e61450f565b606091505b509150915081801561453d57508051158061453d575080806020019051602081101561453a57600080fd5b50515b612366576040805162461bcd60e51b815260206004820152601860248201527f5a503a205452414e534645525f46524f4d5f4641494c45440000000000000000604482015290519081900360640190fd5b6000818311613eb957816133e7565b80516a636f6e736f6c652e6c6f67602083016000808483855afa505050505056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c007472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954595a503a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a265627a7a723158209a65a7071da4c8948522ff321672fa81b11843af23da1390f64714e6552f2a7664736f6c63430005100032608060405234801561001057600080fd5b506040514690806052610d93823960408051918290036052018220828201825260068352652d34b931b7b760d11b6020938401528151808301835260018152603160f81b908401528151808401919091527f94c6df7cbb14f58e7ac6d9fa315f8346b33ef43dae2423c0e0e94673dd9e65ff818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060045550600780546001600160a01b03191633179055610c97806100fc6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637ecebe00116100b8578063b89f59ea1161007c578063b89f59ea1461037d578063c45a015514610385578063d505accf1461038d578063dd62ed3e146103de578063fc0c546a1461040c578063fecf97341461041457610137565b80637ecebe00146102ef57806395d89b41146103155780639dc29fac1461031d578063a8aa1b3114610349578063a9059cbb1461035157610137565b8063313ce567116100ff578063313ce567146102515780633644e5151461026f57806340c10f191461027757806346847794146102a557806370a08231146102c957610137565b806306fdde031461013c578063095ea7b3146101b957806318160ddd146101f957806323b872dd1461021357806330adf81f14610249575b600080fd5b610144610452565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017e578181015183820152602001610166565b50505050905090810190601f1680156101ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e5600480360360408110156101cf57600080fd5b506001600160a01b038135169060200135610474565b604080519115158252519081900360200190f35b61020161048b565b60408051918252519081900360200190f35b6101e56004803603606081101561022957600080fd5b506001600160a01b03813581169160208101359091169060400135610491565b61020161052b565b61025961054f565b6040805160ff9092168252519081900360200190f35b610201610554565b6102a36004803603604081101561028d57600080fd5b506001600160a01b03813516906020013561055a565b005b6102ad6105b8565b604080516001600160a01b039092168252519081900360200190f35b610201600480360360208110156102df57600080fd5b50356001600160a01b03166105c7565b6102016004803603602081101561030557600080fd5b50356001600160a01b03166105d9565b6101446105eb565b6102a36004803603604081101561033357600080fd5b506001600160a01b03813516906020013561060a565b6102ad610664565b6101e56004803603604081101561036757600080fd5b506001600160a01b038135169060200135610673565b6101e5610680565b6102ad610690565b6102a3600480360360e08110156103a357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561069f565b610201600480360360408110156103f457600080fd5b506001600160a01b03813581169160200135166108a1565b6102ad6108be565b6102a36004803603608081101561042a57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156108cd565b604051806040016040528060068152602001652d34b931b7b760d11b81525081565b6000610481338484610973565b5060015b92915050565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610516576001600160a01b03841660009081526002602090815260408083203384529091529020546104f1908363ffffffff6109d516565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610521848484610a25565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60045481565b6008546001600160a01b031633146105aa576040805162461bcd60e51b815260206004820152600e60248201526d2d282a1d102327a92124a22222a760911b604482015290519081900360640190fd5b6105b48282610adf565b5050565b6008546001600160a01b031681565b60016020526000908152604090205481565b60036020526000908152604090205481565b6040518060400160405280600381526020016216941560ea1b81525081565b6008546001600160a01b0316331461065a576040805162461bcd60e51b815260206004820152600e60248201526d2d282a1d102327a92124a22222a760911b604482015290519081900360640190fd5b6105b48282610b75565b6006546001600160a01b031681565b6000610481338484610a25565b600654600160a01b900460ff1681565b6007546001600160a01b031681565b428410156106e9576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6004546001600160a01b0380891660008181526003602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015610804573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061083a5750886001600160a01b0316816001600160a01b0316145b61088b576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b610896898989610973565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b6005546001600160a01b031681565b6007546001600160a01b0316331461091d576040805162461bcd60e51b815260206004820152600e60248201526d2d282a1d102327a92124a22222a760911b604482015290519081900360640190fd5b600580546001600160a01b039586166001600160a01b03199182161790915560068054921515600160a01b0260ff60a01b1995871693831693909317949094169190911790925560088054919093169116179055565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b80820382811115610485576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040902054610a4e908263ffffffff6109d516565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610a83908263ffffffff610c1316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600054610af2908263ffffffff610c1316565b60009081556001600160a01b038316815260016020526040902054610b1d908263ffffffff610c1316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216600090815260016020526040902054610b9e908263ffffffff6109d516565b6001600160a01b03831660009081526001602052604081209190915554610bcb908263ffffffff6109d516565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b80820182811015610485576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfea265627a7a7231582002ceb966122a24d9f2f6ab3c93019ed2fbdf23fcb16a009b7fe0e8476c0130df64736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158203c94068666e7380113662aa2d527d37fef2cc47902470382a20bbb4f8250b8bd64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806379281abe11610097578063a3ad52b811610066578063a3ad52b814610233578063afc3743f1461023b578063be25db5a14610258578063c45a01551461027557610100565b806379281abe146101c557806379459801146101fd578063966545e814610205578063a2e74af61461020d57610100565b80635942f95e116100d35780635942f95e146101795780635d58ab44146101815780636c0fb018146101a0578063734e3912146101a857610100565b8063094b7415146101055780630e0f29731461012957806317d1ff9f146101575780632be90b321461015f575b600080fd5b61010d61027d565b604080516001600160a01b039092168252519081900360200190f35b61010d6004803603604081101561013f57600080fd5b506001600160a01b038135811691602001351661028c565b61010d6102af565b6101676102be565b60408051918252519081900360200190f35b6101676102c4565b61019e6004803603602081101561019757600080fd5b50356102ca565b005b61016761031e565b61019e600480360360208110156101be57600080fd5b5035610324565b61010d600480360360608110156101db57600080fd5b506001600160a01b038135811691602081013582169160409091013516610378565b6101676106e7565b6101676106ed565b61019e6004803603602081101561022357600080fd5b50356001600160a01b031661071f565b610167610790565b61010d6004803603602081101561025157600080fd5b5035610796565b61019e6004803603602081101561026e57600080fd5b50356107bd565b61010d610811565b6004546001600160a01b031681565b60006020818152928152604080822090935290815220546001600160a01b031681565b6003546001600160a01b031681565b60075481565b60065481565b6004546001600160a01b03163314610319576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600555565b60015490565b6004546001600160a01b03163314610373576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600655565b6000816001600160a01b0316836001600160a01b031614156103e1576040805162461bcd60e51b815260206004820152601760248201527f5a463a204944454e544943414c5f414444524553534553000000000000000000604482015290519081900360640190fd5b6001600160a01b038381166000908152602081815260408083208685168452909152902054161561044c576040805162461bcd60e51b815260206004820152601060248201526f5a463a2050594c4f4e5f45584953545360801b604482015290519081900360640190fd5b610457838386610820565b9050600061046584836108af565b9050600061047384846108af565b9050600061048384888888610949565b60025460408051631ac3b23b60e11b81526001600160a01b03878116600483015286811660248301528a8116604483015289811660648301528b8116608483015292831660a482015282841660c482015290519293509086169163358764769160e48082019260009290919082900301818387803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b505060408051633fb3e5cd60e21b81526001600160a01b038a811660048301528b8116602483015288811660448301526000606483018190529251908816945063fecf973493506084808301939282900301818387803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505060408051633fb3e5cd60e21b81526001600160a01b0389811660048301528b811660248301528881166044830152600160648301529151918616935063fecf9734925060848082019260009290919082900301818387803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b5050604080516001600160a01b0387811682528681166020830152888116828401528b811660608301529151828a169450918a1692507fab83557b3a718996d408afe08287d09bafed3590c7ae61a430d518d3199d4590919081900360800190a35050506001600160a01b03928316600090815260208181526040808320948616835293905291822080549382166001600160a01b0319948516811790915560018054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69092018054909316909117909155919050565b60085481565b6000604051806020016106ff906109e8565b6020820181038252601f19601f8201166040525080519060200120905090565b6004546001600160a01b0316331461076e576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60055481565b600181815481106107a357fe5b6000918252602090912001546001600160a01b0316905081565b6004546001600160a01b0316331461080c576040805162461bcd60e51b815260206004820152600d60248201526c2d231d102327a92124a22222a760991b604482015290519081900360640190fd5b600755565b6002546001600160a01b031681565b6000606060405180602001610834906109e8565b601f1982820381018352601f9091011660408181526bffffffffffffffffffffffff19606089811b821660208581019190915289821b831660348601529088901b90911660488401528151603c818503018152605c909301909152815191810191909120825192935091829184016000f59695505050505050565b60006060604051806020016108c3906109f5565b6020820181038252601f19601f8201166040525090506000848460405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f595945050505050565b6003546040805163245cb9e160e21b81526001600160a01b03878116600483015286811660248301528581166044830152848116606483015291516000939290921691639172e7849160848082019260209290919082900301818787803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b505050506040513d60208110156109dd57600080fd5b505195945050505050565b6146fb80610a0383390190565b610de5806150fe8339019056fe6080604052662386f26fc10000601555600060165534801561002057600080fd5b506000805460ff19166001179055600480546001600160a01b031916331790556146ac8061004f6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063966dae0e11610104578063ba7b3dea116100a2578063ed6b92cd11610071578063ed6b92cd1461045d578063efefd9f914610465578063f29401c41461046d578063fef9349214610493576101cf565b8063ba7b3dea146103d8578063ba9a7a5614610406578063c561cf4f1461040e578063e845d4e514610455576101cf565b8063a8b08982116100de578063a8b0898214610392578063ac9370f31461039a578063b32b3d92146103c8578063b7073003146103d0576101cf565b8063966dae0e1461037a57806397ed64db146103825780639892c7f11461038a576101cf565b806333cdde4e11610171578063590f921d1161014b578063590f921d1461032057806387d9b853146103285780638d470e22146103305780638ffa32361461035e576101cf565b806333cdde4e1461026a5780633587647614610298578063402d82c1146102f2576101cf565b8063158ef93e116101ad578063158ef93e14610238578063192b65d81461025257806322e489a41461025a5780633339dc1a14610262576101cf565b806306e53aec146101d457806308acbe82146101f85780630a22d5f314610200575b600080fd5b6101dc61049b565b604080516001600160a01b039092168252519081900360200190f35b6101dc6104aa565b6102086104b9565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6102406104e3565b60408051918252519081900360200190f35b6102406104e9565b6101dc6104ef565b6102406104fe565b6102406004803603604081101561028057600080fd5b506001600160a01b0381351690602001351515610504565b6102f0600480360360e08110156102ae57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c09091013516610927565b005b6102fa610aef565b604080516001600160a01b03938416815291909216602082015281519081900390910190f35b610240610b05565b610240610b0b565b6102406004803603604081101561034657600080fd5b506001600160a01b0381351690602001351515610b11565b610366610d9c565b604080519115158252519081900360200190f35b6101dc610dac565b610240610dbb565b6101dc610dc1565b6101dc610dd0565b610240600480360360408110156103b057600080fd5b506001600160a01b0381351690602001351515610ddf565b61024061126b565b610240611271565b610240600480360360408110156103ee57600080fd5b506001600160a01b0381351690602001351515611277565b6102406116f1565b61043c6004803603604081101561042457600080fd5b506001600160a01b03813516906020013515156116f7565b6040805192835260208301919091528051918290030190f35b610240611bf9565b610240611bff565b610240611c05565b61043c6004803603602081101561048357600080fd5b50356001600160a01b0316611c0b565b610240611f82565b6006546001600160a01b031681565b6008546001600160a01b031681565b6014546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60165481565b60095481565b6007546001600160a01b031681565b600c5481565b6000805460ff1661054a576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff191690556016546001146105a1576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b6105a9611f88565b6000826105c1576006546001600160a01b03166105ce565b6007546001600160a01b03165b90506000806105db6104b9565b50600154604080516370a0823160e01b81523060048201529051939550919350600092839283926001600160a01b0316916370a0823191602480820192602092909190829003018186803b15801561063257600080fd5b505afa158015610646573d6000803e3d6000fd5b505050506040513d602081101561065c57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b505050506040513d60208110156106d957600080fd5b505190506106f6826001600160701b03881663ffffffff61236e16565b9350610711816001600160701b03871663ffffffff61236e16565b925061071e8460006123c4565b935061072b8360016123c4565b925060008061073c86868d8c612558565b915091508199508a156107525760098054820190555b505050506000811180156107665750600082115b6107a8576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b6001546003546107c5916001600160a01b03908116911684612754565b6002546003546107e2916001600160a01b03908116911683612754565b600354604080516335313c2160e11b815230600482015290516001600160a01b0390921691636a627842916024808201926020929091908290030181600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b505050506040513d602081101561085957600080fd5b5050604080516340c10f1960e01b81526001600160a01b038a81166004830152602482018990529151918716916340c10f199160448082019260009290919082900301818387803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b5050604080513381526020810186905280820185905290517f9a36e9f82fd3ab4ec26a87598c0f7f4519b7895fa6a0bca1968b486ee019b0829350908190036060019150a161090e6128e4565b50506000805460ff191660011790555091949350505050565b60005460ff1661096c576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff191690556004546001600160a01b031633146109c5576040805162461bcd60e51b815260206004820152600d60248201526c2d281d102327a92124a22222a760991b604482015290519081900360640190fd5b600680546001600160a01b03808a166001600160a01b031992831617909255600780548984169083161790556003805486841692168217905560408051630dfe168160e01b8152905192881692630dfe168191600481810192602092909190829003018186803b158015610a3857600080fd5b505afa158015610a4c573d6000803e3d6000fd5b505050506040513d6020811015610a6257600080fd5b505160088054604080518082019091526001600160a01b03998a16808252988a166020909101819052600180546001600160a01b0319908116909a178155600280548b16909217909155600580548a16978b169790971790965560ff60a01b191691881692909214600160a01b0217909416941693909317909155506000805460ff191690911790555050565b6001546002546001600160a01b03918216911682565b60105481565b60125481565b6000601654600114610b60576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b60005460ff16610ba5576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055610bb7611f88565b600080610bc26104b9565b5091509150600080610bd56000806129b0565b915091506000808715610ca957600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b50519050610c74816001600160701b03881663ffffffff61236e16565b600754909350610c9d9084906001600160701b0389169087906001600160a01b03168e8e6129f5565b9098509150610d6b9050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610cf457600080fd5b505afa158015610d08573d6000803e3d6000fd5b505050506040513d6020811015610d1e57600080fd5b50519050610d3b816001600160701b03891663ffffffff61236e16565b600654909350610d649084906001600160701b038a169088906001600160a01b03168e8e6129f5565b9098509150505b8715610d7a5760098054820190555b610d82612c6a565b50506000805460ff19166001179055509295945050505050565b600854600160a01b900460ff1681565b6004546001600160a01b031681565b600a5481565b6005546001600160a01b031681565b6003546001600160a01b031681565b6000805460ff16610e25576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055601654600114610e7c576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b610e84611f88565b600080610e8f6104b9565b509150915060008415610f3657600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ee757600080fd5b505afa158015610efb573d6000803e3d6000fd5b505050506040513d6020811015610f1157600080fd5b50519050610f2e816001600160701b03851663ffffffff61236e16565b915050610fcc565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b50519050610fc8816001600160701b03861663ffffffff61236e16565b9150505b610fd681866123c4565b90506000811161102d576040805162461bcd60e51b815260206004820152601760248201527f5a503a20494e53554646494349454e545f414d4f554e54000000000000000000604482015290519081900360640190fd5b61106585611046576001546001600160a01b0316611053565b6002546001600160a01b03165b6003546001600160a01b031683612754565b6000806110728388612f9b565b915091506000806110a784848b8c611095576006546001600160a01b03166110a2565b6007546001600160a01b03165b612558565b9150915081975088156110bd5760098054820190555b6003546008546001600160a01b039091169063432275e6903090600160a01b900460ff166110eb578b6110ee565b8b155b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018215151515815260200192505050606060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050506040513d606081101561116b57600080fd5b50899050611184576006546001600160a01b0316611191565b6007546001600160a01b03165b6001600160a01b03166340c10f198b8a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156111f057600080fd5b505af1158015611204573d6000803e3d6000fd5b50505050505050506112146128e4565b60408051338152602081018390528615158183015290517f1889e9c3cb9a926b5ab9da8b1f34e8883f1c84e43a61525a2551c32d779213279181900360600190a150506000805460ff191660011790555092915050565b60115481565b600d5481565b6000805460ff166112bd576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055601654600114611314576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b61131c611f88565b600082611334576006546001600160a01b0316611341565b6007546001600160a01b03165b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051905080611406576040805162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b604482015290519081900360640190fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d602081101561146b57600080fd5b5051600354909150869086906001600160a01b031660008061148e848789613018565b9150915061149c81856123c4565b98506114cb846114b7576001546001600160a01b03166114c4565b6002546001600160a01b03165b868b612754565b868210156115f75760006114e5888463ffffffff61236e16565b905060006114f486838a6130b8565b90506114ff81613320565b90506000861561151857611512826133ee565b90925090505b611523868784612754565b600854600090600160a01b900460ff1661153d5787611540565b87155b604080516302ce510960e41b81526001600160a01b038c8116600483015283151560248301529151929350600092918a1691632ce510909160448082019260209290919082900301818787803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050506040513d60208110156115c357600080fd5b50519d8e019d90506115f1826115da5760006115dc565b815b836115e757826115ea565b60005b858d613474565b50505050505b60408051632770a7eb60e21b81523060048201526024810189905290516001600160a01b038a1691639dc29fac91604480830192600092919082900301818387803b15801561164557600080fd5b505af1158015611659573d6000803e3d6000fd5b505050505050505050841561169257600954819061167d908463ffffffff61357616565b8161168457fe5b600980549290910490910390555b61169a612c6a565b60408051338152602081018690528615158183015290517f5cf7281eb36e25a92ffd0cff3089777ca0cb41d28e8c7158c234b1eae9a07ed29181900360600190a150506000805460ff191660011790555092915050565b6103e881565b60008054819060ff1661173f576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff19169055601654600114611796576040805162461bcd60e51b815260206004820152601360248201527216940e881393d5081253925512505312569151606a1b604482015290519081900360640190fd5b61179e611f88565b6000836117b6576006546001600160a01b03166117c3565b6007546001600160a01b03165b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561180f57600080fd5b505afa158015611823573d6000803e3d6000fd5b505050506040513d602081101561183957600080fd5b5051905080611880576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b50519050600080806118f56104b9565b506001600160701b031691506001600160701b0316915060006119196000806129b0565b50905060008a6119895761196a84670de0b6b3a7640000611956600a5461194a60028861357690919063ffffffff16565b9063ffffffff61357616565b8161195d57fe5b049063ffffffff6135d916565b61197a878663ffffffff61357616565b8161198157fe5b0486036119a7565b60095461199c878563ffffffff61357616565b816119a357fe5b0486035b90508087106119ea576040805162461bcd60e51b815260206004820152600a60248201526916940e88115610d1515160b21b604482015290519081900360640190fd5b5060006119f88b88886130b8565b9050611a0381613320565b90508a15611a1957611a14816133ee565b955090505b600354611a30906001600160a01b03168083612754565b50506003546040805163226bf2d160e21b81526001600160a01b038d811660048301528251600096508695509316926389afcb449260248084019391929182900301818787803b158015611a8357600080fd5b505af1158015611a97573d6000803e3d6000fd5b505050506040513d6040811015611aad57600080fd5b5080516020909101516008549193509150600160a01b900460ff16611ad25780611ad4565b815b600854909850600160a01b900460ff16611aee5781611af0565b805b9650611afe8888858d613474565b60408051632770a7eb60e21b81523060048201526024810187905290516001600160a01b03881691639dc29fac91604480830192600092919082900301818387803b158015611b4c57600080fd5b505af1158015611b60573d6000803e3d6000fd5b505050508815611b94576009548490611b7f908763ffffffff61357616565b81611b8657fe5b600980549290910490910390555b611b9c612c6a565b60408051338152602081018a905280820189905290517fb83dbb1f0386f1b6d6f534f325d617e3f96f2971cca29021702094328c1cb70c9181900360600190a150506000805460ff19166001179055509396929550919350505050565b60135481565b600e5481565b600f5481565b60008054819060ff16611c53576040805162461bcd60e51b815260206004820152601f60248201526000805160206145bf833981519152604482015290519081900360640190fd5b6000805460ff1916905560165415611ca8576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d6020811015611d1d57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d7057600080fd5b505afa158015611d84573d6000803e3d6000fd5b505050506040513d6020811015611d9a57600080fd5b505190508115801590611dad5750600081115b611def576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b600080611dfa613628565b600985905590925090506001600160701b03821615801590611e2557506000816001600160701b0316115b15611ef1576000611e6d836001600160701b0316611e55846001600160701b03168861357690919063ffffffff16565b81611e5c57fe5b60095491900463ffffffff6135d916565b9050600281046009541015611eb3576009548190611e9990670de0b6b3a764000063ffffffff61357616565b81611ea057fe5b04670de0b6b3a764000003600a55611eeb565b600954611ec790600463ffffffff61357616565b611edf82670de0b6b3a764000063ffffffff61357616565b81611ee657fe5b04600a555b50611efe565b6706f05b59d3b20000600a555b600754611f269084906000906001600160701b038516906001600160a01b03168b60016129f5565b50600654909550611f519085906000906001600160701b038616906001600160a01b03168b836129f5565b50600a54600b559550611f62612c6a565b5050600160168190556000805460ff191690911790555091939092509050565b600b5481565b6003546001600160a01b0316331461200357600360009054906101000a90046001600160a01b03166001600160a01b03166311816b046040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611fea57600080fd5b505af1158015611ffe573d6000803e3d6000fd5b505050505b60008061200e613628565b9150915060008061201d6104b9565b50600a54919350915060006120446001600160701b0387811690871663ffffffff61357616565b905060135460001415801561206157506001600160701b03861615155b801561207557506001600160701b03851615155b1561236657600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156120bf57600080fd5b505afa1580156120d3573d6000803e3d6000fd5b505050506040513d60208110156120e957600080fd5b50519050600061211361210c6001600160701b038916600263ffffffff61357616565b60006136f1565b90506000670de0b6b3a7640000905060006121616013546121338761381e565b028561214060125461381e565b02670de0b6b3a7640000028161215257fe5b8491900463ffffffff61236e16565b90506000670de0b6b3a764000061217e858463ffffffff61357616565b8161218557fe5b049050612190613870565b670de0b6b3a76400006121b8600b54670de0b6b3a7640000038361357690919063ffffffff16565b816121bf57fe5b60098054929091049091019081905560028504906121ec906001600160701b038b1663ffffffff61236e16565b1015612234576009548490612210906001600160701b038b1663ffffffff61236e16565b670de0b6b3a7640000028161222157fe5b04670de0b6b3a764000003600a5561227b565b612257600461194a8b6001600160701b031660095461236e90919063ffffffff16565b61226f85670de0b6b3a764000063ffffffff61357616565b8161227657fe5b04600a555b6000612292600f544361236e90919063ffffffff16565b905080156122fa57600e546122ad908263ffffffff6135d916565b6122d6600d546122ca600e54600c5461357690919063ffffffff16565b9063ffffffff6135d916565b816122dd57fe5b04600c55600a546122ee90896139fd565b600d5543600f5561231c565b612318612309600a548a6139fd565b600d549063ffffffff6135d916565b600d555b7f72ff579f9fee6120ee4fa25381562f2fb89e34ebedaf4180032d16db57237b55600954600a54604051808381526020018281526020019250505060405180910390a15050505050505b505050505050565b808203828111156123be576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b92915050565b6000806123d084613a14565b5090506124046040518060400160405280600f81526020016e029b7b634b234ba3c9d103332b29d1608d1b81525082613d14565b821561242c57600254600854612427916001600160a01b03908116911683612754565b612540565b600154600354612449916001600160a01b03908116911683612754565b600080612454613628565b91509150600061247784846001600160701b0316846001600160701b0316613dc6565b6003546008549192506001600160a01b03169063022c0d9f90600160a01b900460ff166124a457826124a7565b60005b600854600160a01b900460ff166124bf5760006124c1565b835b600854604080516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b0316604483015260806064830152600060848301819052905160c48084019382900301818387803b15801561252457600080fd5b505af1158015612538573d6000803e3d6000fd5b505050505050505b612550848263ffffffff61236e16565b949350505050565b600080600080612566613628565b915091506000806125756104b9565b50915091508715612668576125cc846001600160701b03166125ae600261194a876001600160701b03168f61357690919063ffffffff16565b816125b557fe5b046125c78b600263ffffffff61357616565b613eaa565b94506126618886896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561260c57600080fd5b505afa158015612620573d6000803e3d6000fd5b505050506040513d602081101561263657600080fd5b505161264c6001600160701b03881660006136f1565b856001600160701b0316600a54600954613ec0565b9550612747565b6126af836001600160701b0316612696600261194a886001600160701b03168e61357690919063ffffffff16565b8161269d57fe5b046125c78c600263ffffffff61357616565b94506127448886896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d602081101561271957600080fd5b505161272f6001600160701b03891660006136f1565b866001600160701b0316600a54600954613ec0565b95505b5050505094509492505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106128015780518252601f1990920191602091820191016127e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612863576040519150601f19603f3d011682016040523d82523d6000602084013e612868565b606091505b5091509150818015612896575080511580612896575080806020019051602081101561289357600080fd5b50515b6128dd576040805162461bcd60e51b815260206004820152601360248201527216940e881514905394d1915497d19052531151606a1b604482015290519081900360640190fd5b5050505050565b6000806128ef613628565b91509150600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294157600080fd5b505afa158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505160135561298c6001600160701b0383811690831663ffffffff61357616565b6012555050601480546001600160e01b0316600160e01b4263ffffffff1602179055565b6000806000806129be613628565b915091506129d5826001600160701b0316876136f1565b93506129ea816001600160701b0316866136f1565b925050509250929050565b60008060008811612a3e576040805162461bcd60e51b815260206004820152600e60248201526d0b4a074409c9ea8be8a9c9eaa8e960931b604482015290519081900360640190fd5b6000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7957600080fd5b505afa158015612a8d573d6000803e3d6000fd5b505050506040513d6020811015612aa357600080fd5b5051600a546009549192509082612b8457604080516340c10f1960e01b81526000600482018190526103e8602483015291516001600160a01b038b16926340c10f19926044808201939182900301818387803b158015612b0257600080fd5b505af1158015612b16573d6000803e3d6000fd5b505050508515612b3957612b328b6103e863ffffffff61236e16565b9450612b7f565b612b7c6103e8612b5084600263ffffffff61357616565b612b688e670de0b6b3a764000063ffffffff61357616565b81612b6f57fe5b049063ffffffff61236e16565b94505b612ba2565b612b8e8b876123c4565b9350612b9f8685858c8e8787613ec0565b94505b5050856001600160a01b03166340c10f1986856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612c0457600080fd5b505af1158015612c18573d6000803e3d6000fd5b505060408051338152602081018690528715158183015290517f19d363807bf5ba06f3320318d009a9851c28f799660016f386c9960478c46ea29350908190036060019150a150965096945050505050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612d3257600080fd5b505afa158015612d46573d6000803e3d6000fd5b505050506040513d6020811015612d5c57600080fd5b50519050600080612d6d84846129b0565b915091506000600460009054906101000a90046001600160a01b03166001600160a01b031663a3ad52b86040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc157600080fd5b505afa158015612dd5573d6000803e3d6000fd5b505050506040513d6020811015612deb57600080fd5b5051905060006064612e03858463ffffffff61357616565b81612e0a57fe5b04905060006064612e21858563ffffffff61357616565b81612e2857fe5b04905060026001600160701b038316046001600160701b031687118015612e63575060026001600160701b038216046001600160701b031686115b15612f7e57600080612eb18787612e9860026001600160701b0389165b8e916001600160701b0391041663ffffffff61236e16565b612eac60026001600160701b038916612e80565b613f55565b9150915081600014612eda57600154600354612eda916001600160a01b03908116911684612754565b8015612efd57600254600354612efd916001600160a01b03908116911683612754565b600354604080516335313c2160e11b815230600482015290516001600160a01b0390921691636a627842916024808201926020929091908290030181600087803b158015612f4a57600080fd5b505af1158015612f5e573d6000803e3d6000fd5b505050506040513d6020811015612f7457600080fd5b5050970396909503945b612f866128e4565b612f9287878484613fb0565b50505050505050565b600080600080612fa9613628565b915091508415612fd857612fd360028704826001600160701b0316846001600160701b0316613dc6565b612fdd565b600286045b9350846130095761300460028704836001600160701b0316836001600160701b0316613dc6565b6129ea565b60028604925050509250929050565b600a5460095460009182918261302e81806129b0565b50905060008061303c6104b9565b509150915060008a61304e5782613050565b815b6001600160701b0316905060008b613068578461307c565b601454600160701b90046001600160701b03165b905061308d8c838d84868c8c613ec0565b98506130a78c61309d8b8d613eaa565b8d84868c8c614237565b975050505050505050935093915050565b60008060006130c86001806129b0565b915091506000806130d76104b9565b5091509150600088156131ec576130f584600263ffffffff61357616565b60095461319890613115906001600160701b03861663ffffffff61236e16565b600354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561316057600080fd5b505afa158015613174573d6000803e3d6000fd5b505050506040513d602081101561318a57600080fd5b50519063ffffffff61357616565b8161319f57fe5b0490506131e56131b685600263ffffffff61357616565b6131cf836001600160701b03861663ffffffff61357616565b816131d657fe5b8391900463ffffffff6135d916565b90506132ba565b600354604080516370a0823160e01b81523060048201529051670de0b6b3a764000092613280926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561324557600080fd5b505afa158015613259573d6000803e3d6000fd5b505050506040513d602081101561326f57600080fd5b5051600a549063ffffffff61357616565b8161328757fe5b0490506132b761329e86600263ffffffff61357616565b6131cf836001600160701b03871663ffffffff61357616565b90505b866132cb898363ffffffff61357616565b816132d257fe5b049550600086116133145760405162461bcd60e51b815260040180806020018281038252602181526020018061462c6021913960400191505060405180910390fd5b50505050509392505050565b60008061332c83613a14565b50600354909150613347906001600160a01b03168083612754565b600354600854604080516302ce510960e41b81526001600160a01b038084166004830152600160a01b90930460ff1615602482015290519190921691632ce510909160448083019260209291908290030181600087803b1580156133aa57600080fd5b505af11580156133be573d6000803e3d6000fd5b505050506040513d60208110156133d457600080fd5b506133e79050838263ffffffff61236e16565b9392505050565b60008060006133fb6104b9565b506001600160701b031691505060006134156000806129b0565b91506000905061343b61342f83600263ffffffff61357616565b84600a54600954614289565b905061344781876142c7565b9350670de0b6b3a7640000613462828863ffffffff61357616565b8161346957fe5b049450505050915091565b8115613570578383156134b45760008061348c613628565b6001600160701b031691506001600160701b031691506134ad868383613dc6565b8301925050505b600254600854604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561350857600080fd5b505afa15801561351c573d6000803e3d6000fd5b505050506040513d602081101561353257600080fd5b505190506000613548838663ffffffff61357616565b905080821115612f9257600254600854612f92916001600160a01b03908116911686846143fb565b50505050565b60008115806135915750508082028282828161358e57fe5b04145b6123be576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b808201828110156123be576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b600080600080600360009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561367c57600080fd5b505afa158015613690573d6000803e3d6000fd5b505050506040513d60608110156136a657600080fd5b5080516020909101516008549193509150600160a01b900460ff166136cb57806136cd565b815b600854909450600160a01b900460ff166136e757816136e9565b805b925050509091565b600354604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561374157600080fd5b505afa158015613755573d6000803e3d6000fd5b505050506040513d602081101561376b57600080fd5b5051600354604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156137b857600080fd5b505afa1580156137cc573d6000803e3d6000fd5b505050506040513d60208110156137e257600080fd5b505190508015806137f1575081155b6138135780613806868463ffffffff61357616565b8161380d57fe5b04613815565b835b95945050505050565b60006003821115613861575080600160028204015b8181101561385b5780915060028182858161384a57fe5b04018161385357fe5b049050613833565b5061386b565b811561386b575060015b919050565b6010546004805460408051637945980160e01b815290514394936000936001600160a01b03169263794598019281830192602092829003018186803b1580156138b857600080fd5b505afa1580156138cc573d6000803e3d6000fd5b505050506040513d60208110156138e257600080fd5b505190508282038110156139f857600a54601154808210156706f05b59d3b200008310158082146139a757600081156139295750600a546706f05b59d3b1ffff1901613938565b50600a546706f05b59d3b20000035b82156139765760006139528587038363ffffffff61357616565b9050670de0b6b3a7640000600b5482011161397057600b8054820190555b506139a1565b600061398a8686038363ffffffff61357616565b9050600b54811161399f57600b805482900390555b505b506139ec565b81156139d357600b5483850390670de0b6b3a7640000908201116139a157600b805482019055506139ec565b600b548484039081116139ea57600b805482900390555b505b50505060115560108390555b505050565b6000818310613a0f57508082036123be565b500390565b6000806000613a27600c54600d5461458e565b90506000600460009054906101000a90046001600160a01b03166001600160a01b0316635942f95e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613a7957600080fd5b505afa158015613a8d573d6000803e3d6000fd5b505050506040513d6020811015613aa357600080fd5b505160048054604080516315f4859960e11b815290519394506000936001600160a01b0390921692632be90b32928282019260209290829003018186803b158015613aed57600080fd5b505afa158015613b01573d6000803e3d6000fd5b505050506040513d6020811015613b1757600080fd5b50519050818310613c4e576001935060008183613b3e81870361271063ffffffff61357616565b81613b4557fe5b04019050613be0600860009054906101000a90046001600160a01b03166001600160a01b0316630269b9ca600a546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613ba757600080fd5b505afa158015613bbb573d6000803e3d6000fd5b505050506040513d6020811015613bd157600080fd5b5051829063ffffffff6135d916565b90506127108110613c2b576040805162461bcd60e51b815260206004820152601060248201526f0b4a074408ccaca40e8dede40d0d2ced60831b604482015290519081900360640190fd5b612710613c3e888363ffffffff61357616565b81613c4557fe5b04955050613cd0565b600854600a5460408051630134dce560e11b8152600481019290925251600096506001600160a01b0390921691630269b9ca91602480820192602092909190829003018186803b158015613ca157600080fd5b505afa158015613cb5573d6000803e3d6000fd5b505050506040513d6020811015613ccb57600080fd5b505194505b60408051868152851515602082015281517f3e2f131ffe50fecbee1df82d56b70021104f94a384c753f5f1022ab9b24c2eb3929181900390910190a1505050915091565b613dc282826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613d5f578181015183820152602001613d47565b50505050905090810190601f168015613d8c5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052935061459d92505050565b5050565b6000808411613e065760405162461bcd60e51b815260040180806020018281038252602b81526020018061464d602b913960400191505060405180910390fd5b600083118015613e165750600082115b613e515760405162461bcd60e51b81526004018080602001828103825260288152602001806146046028913960400191505060405180910390fd5b6000613e65856103e563ffffffff61357616565b90506000613e79828563ffffffff61357616565b90506000613e93836122ca886103e863ffffffff61357616565b9050808281613e9e57fe5b04979650505050505050565b6000818310613eb957816133e7565b5090919050565b60008715613ee85781613ed9888863ffffffff61357616565b81613ee057fe5b049050613f4a565b6000613efa888863ffffffff61357616565b90506000670de0b6b3a7640000613f1c600261194a8a8963ffffffff61357616565b81613f2357fe5b0490506000613f38878363ffffffff6135d916565b9050808381613f4357fe5b0493505050505b979650505050505050565b6000808085613f6a888663ffffffff61357616565b81613f7157fe5b04905084811115613f9f5784925086613f90848863ffffffff61357616565b81613f9757fe5b049150613fa6565b8092508391505b5094509492505050565b60006001600160701b0383168511156140a757600154600354613ff8916001600160a01b039081169116613ff3886001600160701b03881663ffffffff61236e16565b612754565b600354600854604080516321913af360e11b8152306004820152600160a01b90920460ff1615156024830152516001600160a01b039092169163432275e6916044808201926060929091908290030181600087803b15801561405957600080fd5b505af115801561406d573d6000803e3d6000fd5b505050506040513d606081101561408357600080fd5b5051601480546001600160701b0319166001600160701b03861617905590506140c3565b601480546001600160701b0319166001600160701b0387161790555b83826001600160701b031610156141bb57600254600354614104916001600160a01b039081169116613ff3876001600160701b03871663ffffffff61236e16565b600354600854604080516321913af360e11b8152306004820152600160a01b90920460ff16156024830152516001600160a01b039092169163432275e6916044808201926060929091908290030181600087803b15801561416457600080fd5b505af1158015614178573d6000803e3d6000fd5b505050506040513d606081101561418e57600080fd5b505160148054600160701b600160e01b031916600160701b6001600160701b0386160217905590506141e0565b60148054600160701b600160e01b031916600160701b6001600160701b038716021790555b601454604080516001600160701b038084168252600160701b909304909216602083015280517f1d96001f313f6446e46c7776b79d231589555627a46fa2388f3220937fc79e519281900390910190a15050505050565b600087156142505785613ed9838963ffffffff61357616565b856142758861194a87670de0b6b3a76400006119566002848d8c63ffffffff61357616565b8161427c57fe5b0498975050505050505050565b600061429b828563ffffffff61236e16565b6142b6670de0b6b3a76400008590038763ffffffff61357616565b816142bd57fe5b0495945050505050565b6000670de0b6b3a76400008310156143f2576000670de0b6b3a76400006142f68486830363ffffffff61357616565b816142fd57fe5b600354600854604080516370a0823160e01b81526001600160a01b03928316600482015290519490930494506000939116916370a08231916024808301926020929190829003018186803b15801561435457600080fd5b505afa158015614368573d6000803e3d6000fd5b505050506040513d602081101561437e57600080fd5b50519050808210156143b1576003546008546143a8916001600160a01b03908116911681856143fb565b600092506143eb565b6003546008546143cf916001600160a01b03908116911681846143fb565b836143e0838363ffffffff61236e16565b816143e757fe5b0492505b50506123be565b50600092915050565b60006060856001600160a01b03166040518060600160405280602581526020016145df602591398051602091820120604080516001600160a01b03808b166024830152891660448201526064808201899052825180830390910181526084909101825292830180516001600160e01b03166001600160e01b0319909316929092178252518251909182918083835b602083106144a85780518252601f199092019160209182019101614489565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461450a576040519150601f19603f3d011682016040523d82523d6000602084013e61450f565b606091505b509150915081801561453d57508051158061453d575080806020019051602081101561453a57600080fd5b50515b612366576040805162461bcd60e51b815260206004820152601860248201527f5a503a205452414e534645525f46524f4d5f4641494c45440000000000000000604482015290519081900360640190fd5b6000818311613eb957816133e7565b80516a636f6e736f6c652e6c6f67602083016000808483855afa505050505056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c007472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954595a503a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a265627a7a723158209a65a7071da4c8948522ff321672fa81b11843af23da1390f64714e6552f2a7664736f6c63430005100032608060405234801561001057600080fd5b506040514690806052610d93823960408051918290036052018220828201825260068352652d34b931b7b760d11b6020938401528151808301835260018152603160f81b908401528151808401919091527f94c6df7cbb14f58e7ac6d9fa315f8346b33ef43dae2423c0e0e94673dd9e65ff818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060045550600780546001600160a01b03191633179055610c97806100fc6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637ecebe00116100b8578063b89f59ea1161007c578063b89f59ea1461037d578063c45a015514610385578063d505accf1461038d578063dd62ed3e146103de578063fc0c546a1461040c578063fecf97341461041457610137565b80637ecebe00146102ef57806395d89b41146103155780639dc29fac1461031d578063a8aa1b3114610349578063a9059cbb1461035157610137565b8063313ce567116100ff578063313ce567146102515780633644e5151461026f57806340c10f191461027757806346847794146102a557806370a08231146102c957610137565b806306fdde031461013c578063095ea7b3146101b957806318160ddd146101f957806323b872dd1461021357806330adf81f14610249575b600080fd5b610144610452565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017e578181015183820152602001610166565b50505050905090810190601f1680156101ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e5600480360360408110156101cf57600080fd5b506001600160a01b038135169060200135610474565b604080519115158252519081900360200190f35b61020161048b565b60408051918252519081900360200190f35b6101e56004803603606081101561022957600080fd5b506001600160a01b03813581169160208101359091169060400135610491565b61020161052b565b61025961054f565b6040805160ff9092168252519081900360200190f35b610201610554565b6102a36004803603604081101561028d57600080fd5b506001600160a01b03813516906020013561055a565b005b6102ad6105b8565b604080516001600160a01b039092168252519081900360200190f35b610201600480360360208110156102df57600080fd5b50356001600160a01b03166105c7565b6102016004803603602081101561030557600080fd5b50356001600160a01b03166105d9565b6101446105eb565b6102a36004803603604081101561033357600080fd5b506001600160a01b03813516906020013561060a565b6102ad610664565b6101e56004803603604081101561036757600080fd5b506001600160a01b038135169060200135610673565b6101e5610680565b6102ad610690565b6102a3600480360360e08110156103a357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561069f565b610201600480360360408110156103f457600080fd5b506001600160a01b03813581169160200135166108a1565b6102ad6108be565b6102a36004803603608081101561042a57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156108cd565b604051806040016040528060068152602001652d34b931b7b760d11b81525081565b6000610481338484610973565b5060015b92915050565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610516576001600160a01b03841660009081526002602090815260408083203384529091529020546104f1908363ffffffff6109d516565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610521848484610a25565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60045481565b6008546001600160a01b031633146105aa576040805162461bcd60e51b815260206004820152600e60248201526d2d282a1d102327a92124a22222a760911b604482015290519081900360640190fd5b6105b48282610adf565b5050565b6008546001600160a01b031681565b60016020526000908152604090205481565b60036020526000908152604090205481565b6040518060400160405280600381526020016216941560ea1b81525081565b6008546001600160a01b0316331461065a576040805162461bcd60e51b815260206004820152600e60248201526d2d282a1d102327a92124a22222a760911b604482015290519081900360640190fd5b6105b48282610b75565b6006546001600160a01b031681565b6000610481338484610a25565b600654600160a01b900460ff1681565b6007546001600160a01b031681565b428410156106e9576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6004546001600160a01b0380891660008181526003602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015610804573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061083a5750886001600160a01b0316816001600160a01b0316145b61088b576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b610896898989610973565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b6005546001600160a01b031681565b6007546001600160a01b0316331461091d576040805162461bcd60e51b815260206004820152600e60248201526d2d282a1d102327a92124a22222a760911b604482015290519081900360640190fd5b600580546001600160a01b039586166001600160a01b03199182161790915560068054921515600160a01b0260ff60a01b1995871693831693909317949094169190911790925560088054919093169116179055565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b80820382811115610485576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040902054610a4e908263ffffffff6109d516565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610a83908263ffffffff610c1316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600054610af2908263ffffffff610c1316565b60009081556001600160a01b038316815260016020526040902054610b1d908263ffffffff610c1316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216600090815260016020526040902054610b9e908263ffffffff6109d516565b6001600160a01b03831660009081526001602052604081209190915554610bcb908263ffffffff6109d516565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b80820182811015610485576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfea265627a7a7231582002ceb966122a24d9f2f6ab3c93019ed2fbdf23fcb16a009b7fe0e8476c0130df64736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158203c94068666e7380113662aa2d527d37fef2cc47902470382a20bbb4f8250b8bd64736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5520,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "getPylon",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 5523,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "allPylons",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5525,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5527,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "energyFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5529,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5531,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "maximumPercentageSync",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5533,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "deltaGammaThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5535,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "deltaGammaMinFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5537,
        "contract": "contracts/ZirconPylonFactory.sol:ZirconPylonFactory",
        "label": "muUpdatePeriod",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
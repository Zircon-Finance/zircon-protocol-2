{
  "address": "0xC1113597F0841708518b92b5704C99eAA816Edd9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_energyFactory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pylonFactory",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "energyFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc50115dfd6d4c4a2cacd9d778bdf97f52449f0183b0444af0791e536ab48bd30",
  "receipt": {
    "to": null,
    "from": "0x10AD3b25F0CD7Ed4EA01A95d2f1bf9E4bE987161",
    "contractAddress": "0xC1113597F0841708518b92b5704C99eAA816Edd9",
    "transactionIndex": 23,
    "gasUsed": "3154588",
    "logsBloom": "0x
    "blockHash": "0x0bebfebe6ef38a9eaacf06a9d4fbb281699679a6388bd58e1e54a90341a550dd",
    "transactionHash": "0xc50115dfd6d4c4a2cacd9d778bdf97f52449f0183b0444af0791e536ab48bd30",
    "logs": [],
    "blockNumber": 2467636,
    "cumulativeGasUsed": "3640906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF0e104ad900a52D90e7e737AC6B27a1c201A7640"
  ],
  "numDeployments": 2,
  "solcInputHash": "f48515f8802bde1eee02701e6e31aebc",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_energyFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pylonFactory\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"energyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ZirconFactory.sol\":\"ZirconFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"contracts/ZirconERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\nimport './libraries/SafeMath.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol';\\n\\ncontract ZirconERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n    // TODO: change name of token\\n    string public constant name = 'Zircon';\\n    string public constant symbol = 'ZPT';\\n    uint8 public constant decimals = 18;\\n    uint public totalSupply;\\n    mapping(address => uint)  public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf8eab8eb108b6d181eb7cee283f845c7a819da59a60c85eb713dff463be775e2\"},\"contracts/ZirconFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\nimport './ZirconPair.sol';\\nimport './energy/interfaces/IZirconEnergyFactory.sol';\\nimport \\\"./energy/interfaces/IZirconEnergyRevenue.sol\\\";\\n\\ncontract ZirconFactory is IZirconFactory {\\n//    address public feeTo;\\n//    address public feeToSetter;\\n    address public migrator;\\n    address public energyFactory;\\n    bytes4 private constant CREATE = bytes4(keccak256(bytes('createEnergyRev(address,address,address,address)')));\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _energyFactory) public {\\n        energyFactory = _energyFactory;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(ZirconPair).creationCode);\\n    }\\n\\n    function createEnergy( address _pairAddress, address _tokenA, address _tokenB, address _pylonFactory) private returns (address energy){\\n        energy = IZirconEnergyFactory(energyFactory).createEnergyRev(_pairAddress, _tokenA, _tokenB, _pylonFactory);\\n//        (bool success, bytes memory data) = energyFactory.call(abi.encodeWithSelector(CREATE, _pairAddress, _tokenA, _tokenB, _pylonFactory));\\n//        require(success, 'ZP: ENERGYREV_FAILED_CREATION');\\n//        energy = abi.decode(data, (address));\\n    }\\n\\n    function createPair(address tokenA, address tokenB, address _pylonFactory) external returns (address pair) {\\n        require(tokenA != tokenB, 'ZF: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'ZF: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'ZF: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(ZirconPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        address energyRev = createEnergy(pair, token0, token1, _pylonFactory);\\n        IZirconPair(pair).initialize(token0, token1, energyRev);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n//    function setFeeTo(address _feeTo) external  {\\n//        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n//        feeTo = _feeTo;\\n//    }\\n//    function setMigrator(address _migrator) external {\\n//        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n//        migrator = _migrator;\\n//    }\\n//    function setFeeToSetter(address _feeToSetter) external  {\\n//        require(msg.sender == feeToSetter, 'ZF: FORBIDDEN');\\n//        feeToSetter = _feeToSetter;\\n//    }\\n\\n}\\n\",\"keccak256\":\"0x834de8f1c6491aeeb08493695d0fbc07024b3bfdae4bf1880f71a619106d8040\"},\"contracts/ZirconPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\n\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\n//import './interfaces/IERC20.sol';\\nimport './interfaces/IZirconPair.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol';\\nimport './libraries/SafeMath.sol';\\nimport \\\"./ZirconERC20.sol\\\";\\nimport \\\"./interfaces/IZirconFactory.sol\\\";\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol';\\n\\n//import \\\"./libraries/////console.sol\\\";\\nimport \\\"./libraries/ZirconLibrary.sol\\\";\\nimport \\\"./energy/interfaces/IZirconEnergyRevenue.sol\\\";\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract ZirconPair is IZirconPair, ZirconERC20 { //Name change does not affect ABI\\n    using SafeMath for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    address public energyRevenueAddress;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // us es single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()  public view returns  (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    function tryLock() external lock {}\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1, address _energy) external {\\n        require(msg.sender == factory, 'ZirconPair: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        energyRevenueAddress = _energy;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1,\\n        uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private {\\n        uint _kLast = kLast; // gas savings\\n        if (_kLast != 0) {\\n            uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n            uint rootKLast = Math.sqrt(_kLast);\\n            if (rootK > rootKLast) {\\n\\n                //TODO: Add dynamic percentage here\\n\\n                uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                uint denominator = rootK.mul(5).add(rootKLast);\\n                uint liquidity = numerator / denominator;\\n                if (liquidity > 0) {\\n                    _mint(energyRevenueAddress, liquidity);\\n                    IZirconEnergyRevenue(energyRevenueAddress).calculate();\\n                }\\n            }\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = ZirconERC20(token0).balanceOf(address(this));\\n        uint balance1 = IUniswapV2ERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IZirconFactory(factory).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"ZirconPair: Bad desired liquidity\\\");\\n            } else {\\n                require(migrator == address(0), \\\"ZirconPair: Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    // TODO: will be better if we pass the output amount\\n    function mintOneSide(address to, bool isReserve0) external lock returns (uint liquidity, uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IUniswapV2ERC20(token0).balanceOf(address(this));\\n        uint balance1 = IUniswapV2ERC20(token1).balanceOf(address(this));\\n        amount0 = balance0.sub(_reserve0);\\n        amount1 = balance1.sub(_reserve1);\\n        require(amount0 > 1 || amount1 > 1, \\\"ZP: Insufficient Amount\\\");\\n        if (isReserve0) {\\n            amount1 = ZirconLibrary.getAmountOut(amount0/2,reserve0,reserve1);\\n            amount0 = amount0/2;\\n        }else {\\n            amount0 = ZirconLibrary.getAmountOut(amount1/2, reserve1, reserve0);\\n            amount1 = amount1/2;\\n        }\\n\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IZirconFactory(factory).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"ZirconPair: Bad desired liquidity\\\");\\n            } else {\\n                require(migrator == address(0), \\\"ZirconPair: Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    //TODO: Test this function\\n    //TODO: maybe allow burning both sides to one\\n    function burnOneSide(address to, bool isReserve0) external lock returns (uint amount) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint amount0;\\n        uint amount1;\\n        uint balance0 = IUniswapV2ERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IUniswapV2ERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n        //console.log(\\\"liquidity\\\", liquidity);\\n\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        if (isReserve0) {\\n            //console.log(\\\"amount0\\\", amount0);\\n            amount0 += ZirconLibrary.getAmountOut(amount1, _reserve1 - amount1, _reserve0 - amount0);\\n            //console.log(\\\"amount0\\\", amount0);\\n            amount = amount0;\\n            require(amount < balance0, \\\"UniswapV2: EXTENSION_NOT_ENOUGH_LIQUIDITY\\\");\\n        }else{\\n            //console.log(\\\"amount1\\\", amount1);\\n            amount1 += ZirconLibrary.getAmountOut(amount0, _reserve0 - amount0, _reserve1 - amount1);\\n            //console.log(\\\"amount1\\\", amount1);\\n            amount = amount1;\\n            require(amount < balance1, \\\"UniswapV2: EXTENSION_NOT_ENOUGH_LIQUIDITY\\\");\\n        }\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        if (isReserve0) {\\n            _safeTransfer(_token0, to, amount);\\n        }else{\\n            _safeTransfer(_token1, to, amount);\\n        }\\n        balance0 = IUniswapV2ERC20(_token0).balanceOf(address(this));\\n        balance1 = IUniswapV2ERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IUniswapV2ERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IUniswapV2ERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IUniswapV2ERC20(_token0).balanceOf(address(this));\\n        balance1 = IUniswapV2ERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data)  external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            // optimistically transfer tokens\\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IUniswapV2ERC20(_token0).balanceOf(address(this));\\n            balance1 = IUniswapV2ERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to)  external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IUniswapV2ERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IUniswapV2ERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IUniswapV2ERC20(token0).balanceOf(address(this)), IUniswapV2ERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x249f58d17de75bbab475fc7d5634d068520d2cb45c777f53a9bc90672fcefb53\"},\"contracts/energy/interfaces/IZirconEnergyFactory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\ninterface IZirconEnergyFactory {\\n\\n    // Variables\\n    function allEnergies(uint p) external view returns (address);\\n    function getEnergy(address _tokenA, address _tokenB) external view returns (address pair);\\n    function allEnergiesLength() external view returns (uint);\\n    function energyCodeHash() external pure returns (bytes32);\\n\\n    // Functions\\n    function createEnergy(address, address, address, address) external returns (address energy);\\n    function createEnergyRev(address, address, address, address) external returns (address energy);\\n\\n}\\n\",\"keccak256\":\"0x4d14cbeaa52c092bd156d65a17d1dc91c6e03de1e7bb7bb8879445eb0c8a43dd\"},\"contracts/energy/interfaces/IZirconEnergyRevenue.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface IZirconEnergyRevenue {\\n    function initialize(address _pair, address _tokenA, address _tokenB, address energy0, address energy1, address pylon0, address pylon1) external;\\n    function calculate() external;\\n}\\n\",\"keccak256\":\"0x2868bbf0cd153241d0a7783b585bd8d55eea76e0505c4a77c8a2af77a2ed5e0c\"},\"contracts/interfaces/IZirconFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IZirconFactory {\\n//    function feeTo() external view returns (address);\\n//    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n    function energyFactory() external view returns (address);\\n\\n    function getPair(address, address) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n    function createPair(address tokenA, address tokenB, address _pylonFactory) external returns (address pair);\\n//    function setFeeTo(address _feeTo) external;\\n//    function setMigrator(address _migrator) external;\\n//    function setFeeToSetter(address _feeToSetter) external;\\n}\\n\",\"keccak256\":\"0x9919f6ce06ad4c6589f926c8b85e727207bca41a6c5d4fa19851587feec7f3f1\"},\"contracts/interfaces/IZirconPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IZirconPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function energyRevenueAddress() external pure returns (address);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function burnOneSide(address to, bool isReserve0) external returns (uint amount);\\n    function mintOneSide(address to, bool isReserve0) external returns (uint liquidity, uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function tryLock() external;\\n\\n    function initialize(address, address, address) external;\\n}\\n\",\"keccak256\":\"0x613c91ef0eb7a0a24ec10354baee24d9e98040316999dc208cd57c7cb0843ace\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.5.16;\\n// a library for performing various math operations\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        z = x > y ? x : y;\\n    }\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61c3f60a7c20c5f1a38bc5c4882b4b3f4bf68f08211a7be9e03fc203d749aa70\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xc274a953581254f283cdf1a3da0cf400ed427c3f88d7564174dfacc86c5c4c58\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1ce089a59dbf0939611d747e877d0ef47659a1bd78c1e1414400c8d68b5c6b\"},\"contracts/libraries/ZirconLibrary.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./SafeMath.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\nlibrary ZirconLibrary {\\n    using SafeMath for uint256;\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n\\n    // Same Function as Uniswap Library, used here for incompatible solidity versions\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // TODO: check getAmountsOut function of v2 library, they use a slightly different formula\\n    // This function takes two variables and look at the maximum possible with the ration given by the reserves\\n    // @pR0, @pR1 the pair reserves\\n    // @b0, @b1 the balances to calculate\\n    function _getMaximum(uint _reserve0, uint _reserve1, uint _b0, uint _b1) pure internal returns (uint maxX, uint maxY)  {\\n\\n        //Expresses b1 in units of reserve0\\n        uint px = _reserve0.mul(_b1)/_reserve1;\\n\\n        if (px > _b0) {\\n            maxX = _b0;\\n            maxY = _b0.mul(_reserve1)/_reserve0; //b0 in units of reserve1\\n        } else {\\n            maxX = px; //max is b1 but in reserve0 units\\n            maxY = _b1;\\n        }\\n    }\\n\\n    // @notice This function converts amount, specifying which tranch uses with @isAnchor, to pool token share\\n    // @_amount is the quantity to convert\\n    // @_totalSupply is the supply of the pt's tranch\\n    // @reserve0, @_gamma, @vab are the variables needed to the calculation of the amount\\n    function calculatePTU(bool _isAnchor, uint _amount, uint _totalSupply, uint _reserve, uint _reservePylon, uint _gamma, uint _vab) pure internal returns (uint liquidity){\\n        if (_isAnchor) {\\n            liquidity = _amount.mul(_totalSupply)/_vab;\\n        }else {\\n            uint numerator = _amount.mul(_totalSupply);\\n            uint resTranslated = _reserve.mul(_gamma).mul(2)/1e18;\\n            uint denominator = (_reservePylon.add(resTranslated));\\n\\n            liquidity = (numerator/denominator);\\n        }\\n    }\\n\\n    // @notice This function converts pool token share, specifying which tranches with @isAnchor, to token amount\\n    // @_ptuAmount is the quantity to convert\\n    // @_totalSupply is the supply of the pt of the tranches\\n    // @reserve0, @_gamma, @vab are the variables needed to the calculation of the amount\\n    function calculatePTUToAmount(bool _isAnchor, uint _ptuAmount, uint _totalSupply, uint _reserve0, uint _reservePylon0, uint _gamma, uint _vab) pure internal returns (uint amount) {\\n        if (_isAnchor) {\\n            amount = _vab.mul(_ptuAmount)/_totalSupply;\\n        } else {\\n            amount = (((_reserve0.mul(_gamma).mul(2)/1e18).add(_reservePylon0)).mul(_ptuAmount))/_totalSupply;\\n        }\\n    }\\n\\n    function slashLiabilityOmega(uint tpvAnchorTranslated, uint anchorReserve, uint gammaMulDecimals, uint virtualAnchorBalance) pure internal returns (uint omegaMulDecimals) {\\n        //Omega is the \\\"survival factor\\\" i.e how much of the anchor balance survives slashing and can be withdrawn.\\n        //It's applied to the user's liquidity tokens to avoid changing other core functions.\\n        //This adjustment is only used for share calculations, the full amount of tokens is removed.\\n        omegaMulDecimals = ((1e18 - gammaMulDecimals).mul(tpvAnchorTranslated))/(virtualAnchorBalance.sub(anchorReserve));\\n    }\\n\\n    function calculateDeltaGamma(uint oldGamma, uint newGamma) pure internal returns (uint average) {\\n\\n    }\\n\\n    function absoluteDiff(uint value1, uint value2) pure internal returns (uint abs) {\\n        if (value1 >= value2) {\\n            abs = value1 - value2;\\n        } else {\\n            abs = value2 - value1;\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xdad3d8d019f9bd731645ed51d1ec48a139457ab31c313afe7d7d2519b0a6cd90\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161380e38038061380e8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556137ab806100636000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806376f797381161005b57806376f79738146100dd5780637cd07e47146101155780639aab92481461011d578063e6a43905146101255761007d565b806317d1ff9f146100825780631e3dd18b146100a6578063574f2ba3146100c3575b600080fd5b61008a610153565b604080516001600160a01b039092168252519081900360200190f35b61008a600480360360208110156100bc57600080fd5b5035610162565b6100cb610189565b60408051918252519081900360200190f35b61008a600480360360608110156100f357600080fd5b506001600160a01b03813581169160208101358216916040909101351661018f565b61008a6104c6565b6100cb6104d5565b61008a6004803603604081101561013b57600080fd5b506001600160a01b0381358116916020013516610507565b6001546001600160a01b031681565b6003818154811061016f57fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b6000826001600160a01b0316846001600160a01b031614156101f8576040805162461bcd60e51b815260206004820152601760248201527f5a463a204944454e544943414c5f414444524553534553000000000000000000604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b03161061021b57848661021e565b85855b90925090506001600160a01b038216610271576040805162461bcd60e51b815260206004820152601060248201526f5a463a205a45524f5f4144445245535360801b604482015290519081900360640190fd5b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156102dd576040805162461bcd60e51b815260206004820152600f60248201526e5a463a20504149525f45584953545360881b604482015290519081900360640190fd5b6060604051806020016102ef906105cc565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450600061037c8686868a61052d565b6040805163c0c53b8b60e01b81526001600160a01b0388811660048301528781166024830152808416604483015291519293509088169163c0c53b8b9160648082019260009290919082900301818387803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b505050506001600160a01b0385811660008181526002602081815260408084208a87168086529083528185208054978e166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a350505050509392505050565b6000546001600160a01b031681565b6000604051806020016104e7906105cc565b6020820181038252601f19601f8201166040525080519060200120905090565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b600154604080516394a77e5b60e01b81526001600160a01b038781166004830152868116602483015285811660448301528481166064830152915160009392909216916394a77e5b9160848082019260209290919082900301818787803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b505050506040513d60208110156105c157600080fd5b505195945050505050565b61319d806105da8339019056fe60806040526001600d5534801561001557600080fd5b50604051469080605261314b823960408051918290036052018220828201825260068352652d34b931b7b760d11b6020938401528151808301835260018152603160f81b908401528151808401919091527f94c6df7cbb14f58e7ac6d9fa315f8346b33ef43dae2423c0e0e94673dd9e65ff818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060045550600580546001600160a01b0319163317905561304a806101016000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636a6278421161010f578063ba9a7a56116100a2578063d21220a711610071578063d21220a714610604578063d505accf1461060c578063dd62ed3e1461065d578063fff6cae91461068b576101e5565b8063ba9a7a5614610596578063bc25cf771461059e578063c0c53b8b146105c4578063c45a0155146105fc576101e5565b80637ecebe00116100de5780637ecebe00146104fd57806389afcb441461052357806395d89b4114610562578063a9059cbb1461056a576101e5565b80636a627842146104a15780636da99636146104c757806370a08231146104cf5780637464fc3d146104f5576101e5565b806323b872dd116101875780633644e515116101565780633644e5151461043d578063432275e6146104455780635909c0d5146104915780635a3d549314610499576101e5565b806323b872dd146103b35780632ce51090146103e957806330adf81f14610417578063313ce5671461041f576101e5565b8063095ea7b3116101c3578063095ea7b31461032d5780630dfe16811461036d57806311816b041461039157806318160ddd14610399576101e5565b8063022c0d9f146101ea57806306fdde03146102785780630902f1ac146102f5575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610693565b005b610280610bce565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ba5781810151838201526020016102a2565b50505050905090810190601f1680156102e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fd610bf0565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103596004803603604081101561034357600080fd5b506001600160a01b038135169060200135610c1a565b604080519115158252519081900360200190f35b610375610c31565b604080516001600160a01b039092168252519081900360200190f35b610276610c40565b6103a1610c92565b60408051918252519081900360200190f35b610359600480360360608110156103c957600080fd5b506001600160a01b03813581169160208101359091169060400135610c98565b6103a1600480360360408110156103ff57600080fd5b506001600160a01b0381351690602001351515610d32565b6103a16111c1565b6104276111e5565b6040805160ff9092168252519081900360200190f35b6103a16111ea565b6104736004803603604081101561045b57600080fd5b506001600160a01b03813516906020013515156111f0565b60408051938452602084019290925282820152519081900360600190f35b6103a161172d565b6103a1611733565b6103a1600480360360208110156104b757600080fd5b50356001600160a01b0316611739565b610375611b9d565b6103a1600480360360208110156104e557600080fd5b50356001600160a01b0316611bac565b6103a1611bbe565b6103a16004803603602081101561051357600080fd5b50356001600160a01b0316611bc4565b6105496004803603602081101561053957600080fd5b50356001600160a01b0316611bd6565b6040805192835260208301919091528051918290030190f35b610280611f71565b6103596004803603604081101561058057600080fd5b506001600160a01b038135169060200135611f90565b6103a1611f9d565b610276600480360360208110156105b457600080fd5b50356001600160a01b0316611fa3565b610276600480360360608110156105da57600080fd5b506001600160a01b03813581169160208101358216916040909101351661210e565b6103756121a4565b6103756121b3565b610276600480360360e081101561062257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356121c2565b6103a16004803603604081101561067357600080fd5b506001600160a01b03813581169160200135166123c4565b6102766123e1565b600d546001146106de576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d55841515806106f15750600084115b61072c5760405162461bcd60e51b8152600401808060200182810382526025815260200180612e9d6025913960400191505060405180910390fd5b600080610737610bf0565b5091509150816001600160701b03168710801561075c5750806001600160701b031686105b6107975760405162461bcd60e51b8152600401808060200182810382526021815260200180612ee66021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107d55750806001600160a01b0316896001600160a01b031614155b61081e576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561082f5761082f828a8d61253c565b891561084057610840818a8c61253c565b86156108fb57886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d602081101561096b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109b757600080fd5b505afa1580156109cb573d6000803e3d6000fd5b505050506040513d60208110156109e157600080fd5b5051925060009150506001600160701b0385168a90038311610a04576000610a13565b89856001600160701b03160383035b9050600089856001600160701b0316038311610a30576000610a3f565b89856001600160701b03160383035b90506000821180610a505750600081115b610a8b5760405162461bcd60e51b8152600401808060200182810382526024815260200180612ec26024913960400191505060405180910390fd5b6000610abf610aa184600363ffffffff6126d616565b610ab3876103e863ffffffff6126d616565b9063ffffffff61273916565b90506000610ad7610aa184600363ffffffff6126d616565b9050610b08620f4240610afc6001600160701b038b8116908b1663ffffffff6126d616565b9063ffffffff6126d616565b610b18838363ffffffff6126d616565b1015610b5a576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610b6884848888612789565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b604051806040016040528060068152602001652d34b931b7b760d11b81525081565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610c2733848461294e565b5060015b92915050565b6006546001600160a01b031681565b600d54600114610c8b576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6001600d55565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610d1d576001600160a01b0384166000908152600260209081526040808320338452909152902054610cf8908363ffffffff61273916565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610d288484846129b0565b5060019392505050565b6000600d54600114610d7f576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580610d8f610bf0565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b03918216939116916000918291829186916370a08231916024808301926020929190829003018186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d6020811015610e1957600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038716916370a08231916024808301926020929190829003018186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505130600090815260016020526040902054909150610eb08989612a6a565b60005480610ec4838663ffffffff6126d616565b81610ecb57fe5b04955080610edf838563ffffffff6126d616565b81610ee657fe5b0494508b15610f5a57610f1085868b6001600160701b031603888d6001600160701b031603612b94565b86019550859a50838b10610f555760405162461bcd60e51b8152600401808060200182810382526029815260200180612fc26029913960400191505060405180910390fd5b610fc0565b610f7b86878c6001600160701b031603878c6001600160701b031603612b94565b85019450849a50828b10610fc05760405162461bcd60e51b8152600401808060200182810382526029815260200180612fc26029913960400191505060405180910390fd5b600086118015610fd05750600085115b61100b5760405162461bcd60e51b8152600401808060200182810382526028815260200180612f296028913960400191505060405180910390fd5b6110153083612c78565b8b1561102b57611026888e8d61253c565b611036565b611036878e8d61253c565b604080516370a0823160e01b815230600482015290516001600160a01b038a16916370a08231916024808301926020929190829003018186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d60208110156110a657600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038916916370a0823191602480820192602092909190829003018186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d602081101561111c57600080fd5b5051925061112c84848c8c612789565b600954611152906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c819055508c6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968888604051808381526020018281526020019250505060405180910390a350506001600d5550969998505050505050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60045481565b6000806000600d54600114611240576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611250610bf0565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d60208110156112ce57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561132157600080fd5b505afa158015611335573d6000803e3d6000fd5b505050506040513d602081101561134b57600080fd5b50519050611368826001600160701b03861663ffffffff61273916565b9550611383816001600160701b03851663ffffffff61273916565b945060018611806113945750600185115b6113e5576040805162461bcd60e51b815260206004820152601760248201527f5a503a20496e73756666696369656e7420416d6f756e74000000000000000000604482015290519081900360640190fd5b871561141d576009546114109060028804906001600160701b0380821691600160701b900416612b94565b945060028604955061144b565b611442600286600954919004906001600160701b03600160701b820481169116612b94565b95506002850494505b6114558484612a6a565b600054806116125760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b1580156114a257600080fd5b505afa1580156114b6573d6000803e3d6000fd5b505050506040513d60208110156114cc57600080fd5b50519050336001600160a01b038216141561159957806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d602081101561154457600080fd5b50519850881580159061155957506000198914155b6115945760405162461bcd60e51b8152600401808060200182810382526021815260200180612fa16021913960400191505060405180910390fd5b61160c565b6001600160a01b038116156115df5760405162461bcd60e51b8152600401808060200182810382526022815260200180612f076022913960400191505060405180910390fd5b6115fd6103e8610ab36115f88b8b63ffffffff6126d616565b612d16565b985061160c60006103e8612d68565b50611661565b61165e6001600160701b03861661162f898463ffffffff6126d616565b8161163657fe5b046001600160701b038616611651898563ffffffff6126d616565b8161165857fe5b04612dfe565b97505b600088116116a05760405162461bcd60e51b8152600401808060200182810382526028815260200180612f516028913960400191505060405180910390fd5b6116aa8a89612d68565b6116b683838787612789565b6009546116dc906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c556040805188815260208101889052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250505050506001600d819055509250925092565b600a5481565b600b5481565b6000600d54600114611786576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611796610bf0565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156117ea57600080fd5b505afa1580156117fe573d6000803e3d6000fd5b505050506040513d602081101561181457600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561186757600080fd5b505afa15801561187b573d6000803e3d6000fd5b505050506040513d602081101561189157600080fd5b5051905060006118b0836001600160701b03871663ffffffff61273916565b905060006118cd836001600160701b03871663ffffffff61273916565b90506118d98686612a6a565b60005480611a915760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b15801561192657600080fd5b505afa15801561193a573d6000803e3d6000fd5b505050506040513d602081101561195057600080fd5b50519050336001600160a01b0382161415611a1d57806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561199e57600080fd5b505afa1580156119b2573d6000803e3d6000fd5b505050506040513d60208110156119c857600080fd5b5051985088158015906119dd57506000198914155b611a185760405162461bcd60e51b8152600401808060200182810382526021815260200180612fa16021913960400191505060405180910390fd5b611a8b565b6001600160a01b03811615611a635760405162461bcd60e51b8152600401808060200182810382526022815260200180612f076022913960400191505060405180910390fd5b611a7c6103e8610ab36115f8878763ffffffff6126d616565b9850611a8b60006103e8612d68565b50611ad3565b611ad06001600160701b038816611aae858463ffffffff6126d616565b81611ab557fe5b046001600160701b038816611651858563ffffffff6126d616565b97505b60008811611b125760405162461bcd60e51b8152600401808060200182810382526028815260200180612f516028913960400191505060405180910390fd5b611b1c8989612d68565b611b2885858989612789565b600954611b4e906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c556040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d55509395945050505050565b6008546001600160a01b031681565b60016020526000908152604090205481565b600c5481565b60036020526000908152604090205481565b600080600d54600114611c24576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611c34610bf0565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b158015611c9057600080fd5b505afa158015611ca4573d6000803e3d6000fd5b505050506040513d6020811015611cba57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d6020811015611d3257600080fd5b505130600090815260016020526040902054909150611d518787612a6a565b60005480611d65838663ffffffff6126d616565b81611d6c57fe5b04995080611d80838563ffffffff6126d616565b81611d8757fe5b04985060008a118015611d9a5750600089115b611dd55760405162461bcd60e51b8152600401808060200182810382526028815260200180612f296028913960400191505060405180910390fd5b611ddf3083612c78565b611dea868c8c61253c565b611df5858c8b61253c565b604080516370a0823160e01b815230600482015290516001600160a01b038816916370a08231916024808301926020929190829003018186803b158015611e3b57600080fd5b505afa158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038716916370a0823191602480820192602092909190829003018186803b158015611eb157600080fd5b505afa158015611ec5573d6000803e3d6000fd5b505050506040513d6020811015611edb57600080fd5b50519250611eeb84848a8a612789565b600954611f11906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c55604080518b8152602081018b905281516001600160a01b038e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600d81905550915091565b6040518060400160405280600381526020016216941560ea1b81525081565b6000610c273384846129b0565b6103e881565b600d54600114611fee576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d55600654600754600954604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261209d9285928792612098926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561206057600080fd5b505afa158015612074573d6000803e3d6000fd5b505050506040513d602081101561208a57600080fd5b50519063ffffffff61273916565b61253c565b600954604080516370a0823160e01b81523060048201529051612104928492879261209892600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561206057600080fd5b50506001600d5550565b6005546001600160a01b03163314612165576040805162461bcd60e51b81526020600482015260156024820152742d34b931b7b72830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b600680546001600160a01b039485166001600160a01b031991821617909155600780549385169382169390931790925560088054919093169116179055565b6005546001600160a01b031681565b6007546001600160a01b031681565b4284101561220c576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6004546001600160a01b0380891660008181526003602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612327573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061235d5750886001600160a01b0316816001600160a01b0316145b6123ae576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6123b989898961294e565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461242c576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051610c8b926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561247d57600080fd5b505afa158015612491573d6000803e3d6000fd5b505050506040513d60208110156124a757600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156124f457600080fd5b505afa158015612508573d6000803e3d6000fd5b505050506040513d602081101561251e57600080fd5b50516009546001600160701b0380821691600160701b900416612789565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106125e95780518252601f1990920191602091820191016125ca565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461264b576040519150601f19603f3d011682016040523d82523d6000602084013e612650565b606091505b509150915081801561267e57508051158061267e575080806020019051602081101561267b57600080fd5b50515b6126cf576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b60008115806126f1575050808202828282816126ee57fe5b04145b610c2b576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610c2b576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b0384118015906127a757506001600160701b038311155b6127ee576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b9004811682039081161580159061281e57506001600160701b03841615155b801561283257506001600160701b03831615155b156128a3578063ffffffff166128608561284b86612e16565b6001600160e01b03169063ffffffff612e2816565b600a80546001600160e01b03929092169290920201905563ffffffff811661288b8461284b87612e16565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546129d9908263ffffffff61273916565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612a0e908263ffffffff612e4d16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600c548015612b8f576000612a946115f86001600160701b0386811690861663ffffffff6126d616565b90506000612aa183612d16565b9050808211156126cf576000612acf612ac0848463ffffffff61273916565b6000549063ffffffff6126d616565b90506000612af483612ae886600563ffffffff6126d616565b9063ffffffff612e4d16565b90506000818381612b0157fe5b0490508015612b8957600854612b20906001600160a01b031682612d68565b600860009054906101000a90046001600160a01b03166001600160a01b031663ca77ab656040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b7057600080fd5b505af1158015612b84573d6000803e3d6000fd5b505050505b50505050505b505050565b6000808411612bd45760405162461bcd60e51b815260040180806020018281038252602b815260200180612feb602b913960400191505060405180910390fd5b600083118015612be45750600082115b612c1f5760405162461bcd60e51b8152600401808060200182810382526028815260200180612f796028913960400191505060405180910390fd5b6000612c33856103e563ffffffff6126d616565b90506000612c47828563ffffffff6126d616565b90506000612c6183612ae8886103e863ffffffff6126d616565b9050808281612c6c57fe5b04979650505050505050565b6001600160a01b038216600090815260016020526040902054612ca1908263ffffffff61273916565b6001600160a01b03831660009081526001602052604081209190915554612cce908263ffffffff61273916565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b60006003821115612d59575080600160028204015b81811015612d5357809150600281828581612d4257fe5b040181612d4b57fe5b049050612d2b565b50612d63565b8115612d63575060015b919050565b600054612d7b908263ffffffff612e4d16565b60009081556001600160a01b038316815260016020526040902054612da6908263ffffffff612e4d16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612e0d5781612e0f565b825b9392505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681612e4557fe5b049392505050565b80820182811015610c2b576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c49515549444954595a6972636f6e506169723a204d757374206e6f742068617665206d69677261746f72556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954595a6972636f6e506169723a204261642064657369726564206c6971756964697479556e697377617056323a20455854454e53494f4e5f4e4f545f454e4f5547485f4c4951554944495459556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a265627a7a7231582041854915fdd0a8372f7d81effe33eae4f5b7e915c05b3e968de346a0d12e07e464736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158203a7c1e37bc9a6422a22bc9ec20709ee7b63675d14fc4481bdf61871b44d1c37564736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806376f797381161005b57806376f79738146100dd5780637cd07e47146101155780639aab92481461011d578063e6a43905146101255761007d565b806317d1ff9f146100825780631e3dd18b146100a6578063574f2ba3146100c3575b600080fd5b61008a610153565b604080516001600160a01b039092168252519081900360200190f35b61008a600480360360208110156100bc57600080fd5b5035610162565b6100cb610189565b60408051918252519081900360200190f35b61008a600480360360608110156100f357600080fd5b506001600160a01b03813581169160208101358216916040909101351661018f565b61008a6104c6565b6100cb6104d5565b61008a6004803603604081101561013b57600080fd5b506001600160a01b0381358116916020013516610507565b6001546001600160a01b031681565b6003818154811061016f57fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b6000826001600160a01b0316846001600160a01b031614156101f8576040805162461bcd60e51b815260206004820152601760248201527f5a463a204944454e544943414c5f414444524553534553000000000000000000604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b03161061021b57848661021e565b85855b90925090506001600160a01b038216610271576040805162461bcd60e51b815260206004820152601060248201526f5a463a205a45524f5f4144445245535360801b604482015290519081900360640190fd5b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156102dd576040805162461bcd60e51b815260206004820152600f60248201526e5a463a20504149525f45584953545360881b604482015290519081900360640190fd5b6060604051806020016102ef906105cc565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450600061037c8686868a61052d565b6040805163c0c53b8b60e01b81526001600160a01b0388811660048301528781166024830152808416604483015291519293509088169163c0c53b8b9160648082019260009290919082900301818387803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b505050506001600160a01b0385811660008181526002602081815260408084208a87168086529083528185208054978e166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a350505050509392505050565b6000546001600160a01b031681565b6000604051806020016104e7906105cc565b6020820181038252601f19601f8201166040525080519060200120905090565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b600154604080516394a77e5b60e01b81526001600160a01b038781166004830152868116602483015285811660448301528481166064830152915160009392909216916394a77e5b9160848082019260209290919082900301818787803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b505050506040513d60208110156105c157600080fd5b505195945050505050565b61319d806105da8339019056fe60806040526001600d5534801561001557600080fd5b50604051469080605261314b823960408051918290036052018220828201825260068352652d34b931b7b760d11b6020938401528151808301835260018152603160f81b908401528151808401919091527f94c6df7cbb14f58e7ac6d9fa315f8346b33ef43dae2423c0e0e94673dd9e65ff818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060045550600580546001600160a01b0319163317905561304a806101016000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636a6278421161010f578063ba9a7a56116100a2578063d21220a711610071578063d21220a714610604578063d505accf1461060c578063dd62ed3e1461065d578063fff6cae91461068b576101e5565b8063ba9a7a5614610596578063bc25cf771461059e578063c0c53b8b146105c4578063c45a0155146105fc576101e5565b80637ecebe00116100de5780637ecebe00146104fd57806389afcb441461052357806395d89b4114610562578063a9059cbb1461056a576101e5565b80636a627842146104a15780636da99636146104c757806370a08231146104cf5780637464fc3d146104f5576101e5565b806323b872dd116101875780633644e515116101565780633644e5151461043d578063432275e6146104455780635909c0d5146104915780635a3d549314610499576101e5565b806323b872dd146103b35780632ce51090146103e957806330adf81f14610417578063313ce5671461041f576101e5565b8063095ea7b3116101c3578063095ea7b31461032d5780630dfe16811461036d57806311816b041461039157806318160ddd14610399576101e5565b8063022c0d9f146101ea57806306fdde03146102785780630902f1ac146102f5575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610693565b005b610280610bce565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ba5781810151838201526020016102a2565b50505050905090810190601f1680156102e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fd610bf0565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103596004803603604081101561034357600080fd5b506001600160a01b038135169060200135610c1a565b604080519115158252519081900360200190f35b610375610c31565b604080516001600160a01b039092168252519081900360200190f35b610276610c40565b6103a1610c92565b60408051918252519081900360200190f35b610359600480360360608110156103c957600080fd5b506001600160a01b03813581169160208101359091169060400135610c98565b6103a1600480360360408110156103ff57600080fd5b506001600160a01b0381351690602001351515610d32565b6103a16111c1565b6104276111e5565b6040805160ff9092168252519081900360200190f35b6103a16111ea565b6104736004803603604081101561045b57600080fd5b506001600160a01b03813516906020013515156111f0565b60408051938452602084019290925282820152519081900360600190f35b6103a161172d565b6103a1611733565b6103a1600480360360208110156104b757600080fd5b50356001600160a01b0316611739565b610375611b9d565b6103a1600480360360208110156104e557600080fd5b50356001600160a01b0316611bac565b6103a1611bbe565b6103a16004803603602081101561051357600080fd5b50356001600160a01b0316611bc4565b6105496004803603602081101561053957600080fd5b50356001600160a01b0316611bd6565b6040805192835260208301919091528051918290030190f35b610280611f71565b6103596004803603604081101561058057600080fd5b506001600160a01b038135169060200135611f90565b6103a1611f9d565b610276600480360360208110156105b457600080fd5b50356001600160a01b0316611fa3565b610276600480360360608110156105da57600080fd5b506001600160a01b03813581169160208101358216916040909101351661210e565b6103756121a4565b6103756121b3565b610276600480360360e081101561062257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356121c2565b6103a16004803603604081101561067357600080fd5b506001600160a01b03813581169160200135166123c4565b6102766123e1565b600d546001146106de576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d55841515806106f15750600084115b61072c5760405162461bcd60e51b8152600401808060200182810382526025815260200180612e9d6025913960400191505060405180910390fd5b600080610737610bf0565b5091509150816001600160701b03168710801561075c5750806001600160701b031686105b6107975760405162461bcd60e51b8152600401808060200182810382526021815260200180612ee66021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107d55750806001600160a01b0316896001600160a01b031614155b61081e576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561082f5761082f828a8d61253c565b891561084057610840818a8c61253c565b86156108fb57886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d602081101561096b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109b757600080fd5b505afa1580156109cb573d6000803e3d6000fd5b505050506040513d60208110156109e157600080fd5b5051925060009150506001600160701b0385168a90038311610a04576000610a13565b89856001600160701b03160383035b9050600089856001600160701b0316038311610a30576000610a3f565b89856001600160701b03160383035b90506000821180610a505750600081115b610a8b5760405162461bcd60e51b8152600401808060200182810382526024815260200180612ec26024913960400191505060405180910390fd5b6000610abf610aa184600363ffffffff6126d616565b610ab3876103e863ffffffff6126d616565b9063ffffffff61273916565b90506000610ad7610aa184600363ffffffff6126d616565b9050610b08620f4240610afc6001600160701b038b8116908b1663ffffffff6126d616565b9063ffffffff6126d616565b610b18838363ffffffff6126d616565b1015610b5a576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610b6884848888612789565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b604051806040016040528060068152602001652d34b931b7b760d11b81525081565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610c2733848461294e565b5060015b92915050565b6006546001600160a01b031681565b600d54600114610c8b576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6001600d55565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610d1d576001600160a01b0384166000908152600260209081526040808320338452909152902054610cf8908363ffffffff61273916565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610d288484846129b0565b5060019392505050565b6000600d54600114610d7f576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580610d8f610bf0565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b03918216939116916000918291829186916370a08231916024808301926020929190829003018186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d6020811015610e1957600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038716916370a08231916024808301926020929190829003018186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505130600090815260016020526040902054909150610eb08989612a6a565b60005480610ec4838663ffffffff6126d616565b81610ecb57fe5b04955080610edf838563ffffffff6126d616565b81610ee657fe5b0494508b15610f5a57610f1085868b6001600160701b031603888d6001600160701b031603612b94565b86019550859a50838b10610f555760405162461bcd60e51b8152600401808060200182810382526029815260200180612fc26029913960400191505060405180910390fd5b610fc0565b610f7b86878c6001600160701b031603878c6001600160701b031603612b94565b85019450849a50828b10610fc05760405162461bcd60e51b8152600401808060200182810382526029815260200180612fc26029913960400191505060405180910390fd5b600086118015610fd05750600085115b61100b5760405162461bcd60e51b8152600401808060200182810382526028815260200180612f296028913960400191505060405180910390fd5b6110153083612c78565b8b1561102b57611026888e8d61253c565b611036565b611036878e8d61253c565b604080516370a0823160e01b815230600482015290516001600160a01b038a16916370a08231916024808301926020929190829003018186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d60208110156110a657600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038916916370a0823191602480820192602092909190829003018186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d602081101561111c57600080fd5b5051925061112c84848c8c612789565b600954611152906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c819055508c6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968888604051808381526020018281526020019250505060405180910390a350506001600d5550969998505050505050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60045481565b6000806000600d54600114611240576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611250610bf0565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d60208110156112ce57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561132157600080fd5b505afa158015611335573d6000803e3d6000fd5b505050506040513d602081101561134b57600080fd5b50519050611368826001600160701b03861663ffffffff61273916565b9550611383816001600160701b03851663ffffffff61273916565b945060018611806113945750600185115b6113e5576040805162461bcd60e51b815260206004820152601760248201527f5a503a20496e73756666696369656e7420416d6f756e74000000000000000000604482015290519081900360640190fd5b871561141d576009546114109060028804906001600160701b0380821691600160701b900416612b94565b945060028604955061144b565b611442600286600954919004906001600160701b03600160701b820481169116612b94565b95506002850494505b6114558484612a6a565b600054806116125760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b1580156114a257600080fd5b505afa1580156114b6573d6000803e3d6000fd5b505050506040513d60208110156114cc57600080fd5b50519050336001600160a01b038216141561159957806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d602081101561154457600080fd5b50519850881580159061155957506000198914155b6115945760405162461bcd60e51b8152600401808060200182810382526021815260200180612fa16021913960400191505060405180910390fd5b61160c565b6001600160a01b038116156115df5760405162461bcd60e51b8152600401808060200182810382526022815260200180612f076022913960400191505060405180910390fd5b6115fd6103e8610ab36115f88b8b63ffffffff6126d616565b612d16565b985061160c60006103e8612d68565b50611661565b61165e6001600160701b03861661162f898463ffffffff6126d616565b8161163657fe5b046001600160701b038616611651898563ffffffff6126d616565b8161165857fe5b04612dfe565b97505b600088116116a05760405162461bcd60e51b8152600401808060200182810382526028815260200180612f516028913960400191505060405180910390fd5b6116aa8a89612d68565b6116b683838787612789565b6009546116dc906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c556040805188815260208101889052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250505050506001600d819055509250925092565b600a5481565b600b5481565b6000600d54600114611786576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611796610bf0565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156117ea57600080fd5b505afa1580156117fe573d6000803e3d6000fd5b505050506040513d602081101561181457600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561186757600080fd5b505afa15801561187b573d6000803e3d6000fd5b505050506040513d602081101561189157600080fd5b5051905060006118b0836001600160701b03871663ffffffff61273916565b905060006118cd836001600160701b03871663ffffffff61273916565b90506118d98686612a6a565b60005480611a915760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b15801561192657600080fd5b505afa15801561193a573d6000803e3d6000fd5b505050506040513d602081101561195057600080fd5b50519050336001600160a01b0382161415611a1d57806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561199e57600080fd5b505afa1580156119b2573d6000803e3d6000fd5b505050506040513d60208110156119c857600080fd5b5051985088158015906119dd57506000198914155b611a185760405162461bcd60e51b8152600401808060200182810382526021815260200180612fa16021913960400191505060405180910390fd5b611a8b565b6001600160a01b03811615611a635760405162461bcd60e51b8152600401808060200182810382526022815260200180612f076022913960400191505060405180910390fd5b611a7c6103e8610ab36115f8878763ffffffff6126d616565b9850611a8b60006103e8612d68565b50611ad3565b611ad06001600160701b038816611aae858463ffffffff6126d616565b81611ab557fe5b046001600160701b038816611651858563ffffffff6126d616565b97505b60008811611b125760405162461bcd60e51b8152600401808060200182810382526028815260200180612f516028913960400191505060405180910390fd5b611b1c8989612d68565b611b2885858989612789565b600954611b4e906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c556040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d55509395945050505050565b6008546001600160a01b031681565b60016020526000908152604090205481565b600c5481565b60036020526000908152604090205481565b600080600d54600114611c24576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d81905580611c34610bf0565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b158015611c9057600080fd5b505afa158015611ca4573d6000803e3d6000fd5b505050506040513d6020811015611cba57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d6020811015611d3257600080fd5b505130600090815260016020526040902054909150611d518787612a6a565b60005480611d65838663ffffffff6126d616565b81611d6c57fe5b04995080611d80838563ffffffff6126d616565b81611d8757fe5b04985060008a118015611d9a5750600089115b611dd55760405162461bcd60e51b8152600401808060200182810382526028815260200180612f296028913960400191505060405180910390fd5b611ddf3083612c78565b611dea868c8c61253c565b611df5858c8b61253c565b604080516370a0823160e01b815230600482015290516001600160a01b038816916370a08231916024808301926020929190829003018186803b158015611e3b57600080fd5b505afa158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038716916370a0823191602480820192602092909190829003018186803b158015611eb157600080fd5b505afa158015611ec5573d6000803e3d6000fd5b505050506040513d6020811015611edb57600080fd5b50519250611eeb84848a8a612789565b600954611f11906001600160701b0380821691600160701b90041663ffffffff6126d616565b600c55604080518b8152602081018b905281516001600160a01b038e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600d81905550915091565b6040518060400160405280600381526020016216941560ea1b81525081565b6000610c273384846129b0565b6103e881565b600d54600114611fee576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d55600654600754600954604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261209d9285928792612098926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561206057600080fd5b505afa158015612074573d6000803e3d6000fd5b505050506040513d602081101561208a57600080fd5b50519063ffffffff61273916565b61253c565b600954604080516370a0823160e01b81523060048201529051612104928492879261209892600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561206057600080fd5b50506001600d5550565b6005546001600160a01b03163314612165576040805162461bcd60e51b81526020600482015260156024820152742d34b931b7b72830b4b91d102327a92124a22222a760591b604482015290519081900360640190fd5b600680546001600160a01b039485166001600160a01b031991821617909155600780549385169382169390931790925560088054919093169116179055565b6005546001600160a01b031681565b6007546001600160a01b031681565b4284101561220c576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6004546001600160a01b0380891660008181526003602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612327573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061235d5750886001600160a01b0316816001600160a01b0316145b6123ae576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6123b989898961294e565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461242c576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051610c8b926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561247d57600080fd5b505afa158015612491573d6000803e3d6000fd5b505050506040513d60208110156124a757600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156124f457600080fd5b505afa158015612508573d6000803e3d6000fd5b505050506040513d602081101561251e57600080fd5b50516009546001600160701b0380821691600160701b900416612789565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b602083106125e95780518252601f1990920191602091820191016125ca565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461264b576040519150601f19603f3d011682016040523d82523d6000602084013e612650565b606091505b509150915081801561267e57508051158061267e575080806020019051602081101561267b57600080fd5b50515b6126cf576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b60008115806126f1575050808202828282816126ee57fe5b04145b610c2b576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610c2b576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b0384118015906127a757506001600160701b038311155b6127ee576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b9004811682039081161580159061281e57506001600160701b03841615155b801561283257506001600160701b03831615155b156128a3578063ffffffff166128608561284b86612e16565b6001600160e01b03169063ffffffff612e2816565b600a80546001600160e01b03929092169290920201905563ffffffff811661288b8461284b87612e16565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546129d9908263ffffffff61273916565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612a0e908263ffffffff612e4d16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600c548015612b8f576000612a946115f86001600160701b0386811690861663ffffffff6126d616565b90506000612aa183612d16565b9050808211156126cf576000612acf612ac0848463ffffffff61273916565b6000549063ffffffff6126d616565b90506000612af483612ae886600563ffffffff6126d616565b9063ffffffff612e4d16565b90506000818381612b0157fe5b0490508015612b8957600854612b20906001600160a01b031682612d68565b600860009054906101000a90046001600160a01b03166001600160a01b031663ca77ab656040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b7057600080fd5b505af1158015612b84573d6000803e3d6000fd5b505050505b50505050505b505050565b6000808411612bd45760405162461bcd60e51b815260040180806020018281038252602b815260200180612feb602b913960400191505060405180910390fd5b600083118015612be45750600082115b612c1f5760405162461bcd60e51b8152600401808060200182810382526028815260200180612f796028913960400191505060405180910390fd5b6000612c33856103e563ffffffff6126d616565b90506000612c47828563ffffffff6126d616565b90506000612c6183612ae8886103e863ffffffff6126d616565b9050808281612c6c57fe5b04979650505050505050565b6001600160a01b038216600090815260016020526040902054612ca1908263ffffffff61273916565b6001600160a01b03831660009081526001602052604081209190915554612cce908263ffffffff61273916565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b60006003821115612d59575080600160028204015b81811015612d5357809150600281828581612d4257fe5b040181612d4b57fe5b049050612d2b565b50612d63565b8115612d63575060015b919050565b600054612d7b908263ffffffff612e4d16565b60009081556001600160a01b038316815260016020526040902054612da6908263ffffffff612e4d16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612e0d5781612e0f565b825b9392505050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681612e4557fe5b049392505050565b80820182811015610c2b576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c49515549444954595a6972636f6e506169723a204d757374206e6f742068617665206d69677261746f72556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954595a6972636f6e506169723a204261642064657369726564206c6971756964697479556e697377617056323a20455854454e53494f4e5f4e4f545f454e4f5547485f4c4951554944495459556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a265627a7a7231582041854915fdd0a8372f7d81effe33eae4f5b7e915c05b3e968de346a0d12e07e464736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158203a7c1e37bc9a6422a22bc9ec20709ee7b63675d14fc4481bdf61871b44d1c37564736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 555,
        "contract": "contracts/ZirconFactory.sol:ZirconFactory",
        "label": "migrator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 557,
        "contract": "contracts/ZirconFactory.sol:ZirconFactory",
        "label": "energyFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 572,
        "contract": "contracts/ZirconFactory.sol:ZirconFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 575,
        "contract": "contracts/ZirconFactory.sol:ZirconFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}
{
  "address": "0xD5c9f873D212aAd20BF1ea207285c383dDD63Fd3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservePylon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "syncPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptb",
          "type": "uint256"
        }
      ],
      "name": "maximumSync",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toConvert",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptb",
          "type": "uint256"
        }
      ],
      "name": "translate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x39d0fd1b4d52f8143f65e956fd3d4252982dc7cf35a791605d3a7b1c5ad8dccc",
  "receipt": {
    "to": null,
    "from": "0x10AD3b25F0CD7Ed4EA01A95d2f1bf9E4bE987161",
    "contractAddress": "0xD5c9f873D212aAd20BF1ea207285c383dDD63Fd3",
    "transactionIndex": 1,
    "gasUsed": "277288",
    "logsBloom": "0x
    "blockHash": "0x278960c0206fec006f1bc68046e1af9ff852af338971b5476784e786856d9a80",
    "transactionHash": "0x39d0fd1b4d52f8143f65e956fd3d4252982dc7cf35a791605d3a7b1c5ad8dccc",
    "logs": [],
    "blockNumber": 2308745,
    "cumulativeGasUsed": "298288",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9bcf0bae6fd744b89238071ab7a89808",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePylon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syncPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptb\",\"type\":\"uint256\"}],\"name\":\"maximumSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toConvert\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptb\",\"type\":\"uint256\"}],\"name\":\"translate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZirconPeripheralLibrary.sol\":\"ZirconPeripheralLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@zircon/core/contracts/interfaces/IZirconPylon.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IZirconPylon {\\n\\n    function initialized() external view returns (uint);\\n    function anchorPoolTokenAddress() external view returns (address);\\n    function floatPoolTokenAddress() external view returns (address);\\n    function getSyncReserves() external view returns  (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    // Called once by the factory at time of deployment\\n    // @_floatPoolToken -> Contains Address Of Float PT\\n    // @_anchorPoolToken -> Contains Address Of Anchor PT\\n    // @token0 -> Float token\\n    // @token1 -> Anchor token\\n    function initialize(address, address, address, address, address, address, address) external;\\n    // On init pylon we have to handle two cases\\n    // The first case is when we initialize the pair through the pylon\\n    // And the second one is when initialize the pylon with a pair al ready existing\\n    function initPylon(address _to) external returns (uint floatLiquidity, uint anchorLiquidity);\\n    // External Function called to mint pool Token\\n    // Liquidity have to be sent before\\n    function mintPoolTokens(address to, bool isAnchor) external returns (uint liquidity);\\n    function mintAsync100(address to, bool isAnchor) external returns (uint liquidity);\\n    function mintAsync(address to, bool shouldMintAnchor) external returns (uint liquidity);\\n    // Burn Async send both tokens 50-50\\n    // Liquidity has to be sent before\\n    function burnAsync(address _to, bool _isAnchor) external returns (uint amount0, uint amount1);\\n    // Burn send liquidity back to user burning Pool tokens\\n    // The function first uses the reserves of the Pylon\\n    // If not enough reserves it burns The Pool Tokens of the pylon\\n    function burn(address _to, bool _isAnchor) external returns (uint amount);\\n}\\n\",\"keccak256\":\"0x7fb5df7eedf8773def6c767762ecdce6c36c07b4a0cfbd89e1bd5a05b6534882\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x27f0ea82f879b3b01387b583e6d9d0ec858dca3b22b0aad173f8fbda06e761e1\"},\"contracts/libraries/ZirconPeripheralLibrary.sol\":{\"content\":\"pragma solidity >=0.6.6;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"@zircon/core/contracts/interfaces/IZirconPylon.sol\\\";\\n\\nlibrary ZirconPeripheralLibrary {\\n    using SafeMath for uint256;\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    //TODO: Update init code hash with Zircon Pylon code hash\\n    function pylonFor(address factory, address tokenA, address tokenB, address pair) internal pure returns (address pylon) {\\n        pylon = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(tokenA, tokenB, pair)),\\n                hex'70f02a62a722d5aa3660572da0f56438b960ee9e435f9763634cc49a149bb953' // init code hash\\n            ))));\\n    }\\n\\n    function isInitialized(address factory, address tokenA, address tokenB, address pair) view external returns (bool initialized){\\n        initialized = IZirconPylon(pylonFor(factory, tokenA, tokenB, pair)).initialized() == 1;\\n    }\\n\\n    function translate(uint toConvert, uint ptt, uint ptb) pure public  returns (uint amount){\\n        amount =  (ptt == 0 || ptb == 0) ? toConvert : toConvert.mul(ptb)/ptt;\\n    }\\n\\n    // fetches and gets Reserves\\n    function getSyncReserves(address factory, address tokenA, address tokenB, address pair) internal view returns (uint112 reserveF, uint112 reserveA) {\\n        (reserveF, reserveA,) = IZirconPylon(pylonFor(factory, tokenA, tokenB, pair)).getSyncReserves();\\n    }\\n\\n\\n    // TODO: Change this\\n    // fetches and sorts the reserves for a pair\\n    function maximumSync(uint reserve, uint reservePylon, uint syncPercentage, uint maxBase, uint ptt, uint ptb) external pure returns (uint maximum) {\\n        uint pairReserveTranslated = translate(reserve, ptt, ptb);\\n        maximum = (pairReserveTranslated == 0 || reservePylon > pairReserveTranslated) ? maxBase :\\n        (pairReserveTranslated.mul(syncPercentage)/100).sub(reservePylon);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd9fd1941e5c696484704b7f271edb714289edfcd3da4317b3cf2a47a72fe0325\"}},\"version\":1}",
  "bytecode": "0x610410610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80631852eecc146100505780632f95f76a146100af5780634f497041146100ea575b600080fd5b61009b6004803603608081101561006657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060013516610125565b604080519115158252519081900360200190f35b6100d8600480360360608110156100c557600080fd5b50803590602081013590604001356101b0565b60408051918252519081900360200190f35b6100d8600480360360c081101561010057600080fd5b5080359060208101359060408101359060608101359060808101359060a001356101e9565b600061013385858585610246565b73ffffffffffffffffffffffffffffffffffffffff1663158ef93e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017857600080fd5b505afa15801561018c573d6000803e3d6000fd5b505050506040513d60208110156101a257600080fd5b505160011495945050505050565b60008215806101bd575081155b6101df57826101d2858463ffffffff61031016565b816101d957fe5b046101e1565b835b949350505050565b6000806101f78885856101b0565b905080158061020557508087115b6102385761023387606461021f848a63ffffffff61031016565b8161022657fe5b049063ffffffff61038216565b61023a565b845b98975050505050505050565b604080516bffffffffffffffffffffffff19606095861b811660208084019190915294861b8116603483015292851b831660488201528151603c818303018152605c820183528051908501207fff00000000000000000000000000000000000000000000000000000000000000607c8301529590941b909116607d84015260918301939093527f70f02a62a722d5aa3660572da0f56438b960ee9e435f9763634cc49a149bb95360b1808401919091528351808403909101815260d1909201909252805191012090565b600081158061032b5750508082028282828161032857fe5b04145b61037c576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b92915050565b8082038281111561037c576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fdfea2646970667358221220b89e611bd585f07a9cf2079a25236938718e06c53c6eb423ae2bf4821be0549064736f6c63430006060033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80631852eecc146100505780632f95f76a146100af5780634f497041146100ea575b600080fd5b61009b6004803603608081101561006657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060013516610125565b604080519115158252519081900360200190f35b6100d8600480360360608110156100c557600080fd5b50803590602081013590604001356101b0565b60408051918252519081900360200190f35b6100d8600480360360c081101561010057600080fd5b5080359060208101359060408101359060608101359060808101359060a001356101e9565b600061013385858585610246565b73ffffffffffffffffffffffffffffffffffffffff1663158ef93e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017857600080fd5b505afa15801561018c573d6000803e3d6000fd5b505050506040513d60208110156101a257600080fd5b505160011495945050505050565b60008215806101bd575081155b6101df57826101d2858463ffffffff61031016565b816101d957fe5b046101e1565b835b949350505050565b6000806101f78885856101b0565b905080158061020557508087115b6102385761023387606461021f848a63ffffffff61031016565b8161022657fe5b049063ffffffff61038216565b61023a565b845b98975050505050505050565b604080516bffffffffffffffffffffffff19606095861b811660208084019190915294861b8116603483015292851b831660488201528151603c818303018152605c820183528051908501207fff00000000000000000000000000000000000000000000000000000000000000607c8301529590941b909116607d84015260918301939093527f70f02a62a722d5aa3660572da0f56438b960ee9e435f9763634cc49a149bb95360b1808401919091528351808403909101815260d1909201909252805191012090565b600081158061032b5750508082028282828161032857fe5b04145b61037c576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b92915050565b8082038281111561037c576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fdfea2646970667358221220b89e611bd585f07a9cf2079a25236938718e06c53c6eb423ae2bf4821be0549064736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}